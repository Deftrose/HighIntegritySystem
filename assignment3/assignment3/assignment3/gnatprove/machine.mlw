(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "opcode" defined at instruction.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Instruction__opcode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type opcode 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = opcode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type opcode__ref =
  { mutable opcode__content "model_trace:" "name:" : opcode }
 
 function opcode__ref___projection 
   (a : opcode__ref) : opcode =
  a.opcode__content
 
 meta "model_projection" function opcode__ref___projection
 
 meta "inline : no" function opcode__ref___projection
 
 val opcode__havoc 
   (x : opcode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "opcode" defined at instruction.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Instruction__opcode__rep
 use        Instruction__opcode
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__opcode.opcode, 
 predicate in_range = Instruction__opcode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "num_regs" defined at instruction.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__num_regs
 use import "_gnatprove_standard".Main

 function num_regs #"instruction.ads" 8 0 0#"model" "model_trace:6044" "name:NUM_REGS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "TregB" defined at instruction.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Instruction__TregB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tregB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tregB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tregB__ref =
  { mutable tregB__content "model_trace:" "name:" : tregB }
 
 function tregB__ref___projection 
   (a : tregB__ref) : tregB =
  a.tregB__content
 
 meta "model_projection" function tregB__ref___projection
 
 meta "inline : no" function tregB__ref___projection
 
 val tregB__havoc 
   (x : tregB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TregB" defined at instruction.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Instruction__TregB__rep
 use        Instruction__TregB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__TregB.tregB) : int =
  (Instruction__TregB.tregB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__TregB.tregB, 
 predicate in_range = Instruction__TregB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "reg" defined at instruction.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Instruction__reg
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reg =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reg, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reg__ref =
  { mutable reg__content "model_trace:" "name:" : reg }
 
 function reg__ref___projection 
   (a : reg__ref) : reg =
  a.reg__content
 
 meta "model_projection" function reg__ref___projection
 
 meta "inline : no" function reg__ref___projection
 
 val reg__havoc 
   (x : reg__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reg" defined at instruction.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Instruction__reg__rep
 use        Instruction__reg
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__reg.reg) : int =
  (Instruction__reg.reg'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__reg.reg, 
 predicate in_range = Instruction__reg.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "memory_size" defined at instruction.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__memory_size
 use import "_gnatprove_standard".Main

 function memory_size #"instruction.ads" 15 0 0#"model" "model_trace:6067" "name:MEMORY_SIZE" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "TaddrB" defined at instruction.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Instruction__TaddrB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type taddrB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = taddrB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type taddrB__ref =
  { mutable taddrB__content "model_trace:" "name:" : taddrB }
 
 function taddrB__ref___projection 
   (a : taddrB__ref) : taddrB =
  a.taddrB__content
 
 meta "model_projection" function taddrB__ref___projection
 
 meta "inline : no" function taddrB__ref___projection
 
 val taddrB__havoc 
   (x : taddrB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TaddrB" defined at instruction.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Instruction__TaddrB__rep
 use        Instruction__TaddrB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__TaddrB.taddrB) : int =
  (Instruction__TaddrB.taddrB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__TaddrB.taddrB, 
 predicate in_range = Instruction__TaddrB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "addr" defined at instruction.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Instruction__addr
 use import "_gnatprove_standard".Main
 use import "int".Int

 type addr =
  < range 0 65535 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = addr, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type addr__ref =
  { mutable addr__content "model_trace:" "name:" : addr }
 
 function addr__ref___projection 
   (a : addr__ref) : addr =
  a.addr__content
 
 meta "model_projection" function addr__ref___projection
 
 meta "inline : no" function addr__ref___projection
 
 val addr__havoc 
   (x : addr__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "addr" defined at instruction.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Instruction__addr__rep
 use        Instruction__addr
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__addr.addr) : int =
  (Instruction__addr.addr'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__addr.addr, 
 predicate in_range = Instruction__addr.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ToffsetB" defined at instruction.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Instruction__ToffsetB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type toffsetB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = toffsetB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type toffsetB__ref =
  { mutable toffsetB__content "model_trace:" "name:" : toffsetB }
 
 function toffsetB__ref___projection 
   (a : toffsetB__ref) : toffsetB =
  a.toffsetB__content
 
 meta "model_projection" function toffsetB__ref___projection
 
 meta "inline : no" function toffsetB__ref___projection
 
 val toffsetB__havoc 
   (x : toffsetB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ToffsetB" defined at instruction.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Instruction__ToffsetB__rep
 use        Instruction__ToffsetB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__ToffsetB.toffsetB) : int =
  (Instruction__ToffsetB.toffsetB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__ToffsetB.toffsetB, 
 predicate in_range = Instruction__ToffsetB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "offset" defined at instruction.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Instruction__offset
 use import "_gnatprove_standard".Main
 use import "int".Int

 type offset =
  < range -65535 65535 >
 
 function first 
   : int =
  ( -65535 )
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = offset, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type offset__ref =
  { mutable offset__content "model_trace:" "name:" : offset }
 
 function offset__ref___projection 
   (a : offset__ref) : offset =
  a.offset__content
 
 meta "model_projection" function offset__ref___projection
 
 meta "inline : no" function offset__ref___projection
 
 val offset__havoc 
   (x : offset__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "offset" defined at instruction.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Instruction__offset__rep
 use        Instruction__offset
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__offset.offset) : int =
  (Instruction__offset.offset'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__offset.offset, 
 predicate in_range = Instruction__offset.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "instr" defined at instruction.ads:25, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Instruction__instr__rep
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__reg
 use        Instruction__reg__rep
 use        Instruction__offset
 use        Instruction__offset__rep

 type __split_discrs =
  { rec__instruction__instr__op "model_trace:.6114" "name:Op" : Instruction__opcode.opcode }
 
 function __split_discrs___projection 
   (a : __split_discrs) : Instruction__opcode.opcode =
  a.rec__instruction__instr__op
 
 meta "model_projection" function __split_discrs___projection
 
 meta "inline : no" function __split_discrs___projection
 
 type __split_discrs__ref =
  { mutable __split_discrs__content "model_trace:" "name:" : __split_discrs }
 
 function __split_discrs__ref___projection 
   (a : __split_discrs__ref) : __split_discrs =
  a.__split_discrs__content
 
 meta "model_projection" function __split_discrs__ref___projection
 
 meta "inline : no" function __split_discrs__ref___projection
 
 val __split_discrs__havoc 
   (x : __split_discrs__ref) : unit
  writes {x}
 
 type __split_fields =
  { rec__instruction__instr__addrd "model_trace:.6135" "name:AddRd" : Instruction__reg.reg; rec__instruction__instr__addrs1 "model_trace:.6145" "name:AddRs1" : Instruction__reg.reg; rec__instruction__instr__addrs2 "model_trace:.6155" "name:AddRs2" : Instruction__reg.reg; rec__instruction__instr__subrd "model_trace:.6169" "name:SubRd" : Instruction__reg.reg; rec__instruction__instr__subrs1 "model_trace:.6179" "name:SubRs1" : Instruction__reg.reg; rec__instruction__instr__subrs2 "model_trace:.6189" "name:SubRs2" : Instruction__reg.reg; rec__instruction__instr__mulrd "model_trace:.6203" "name:MulRd" : Instruction__reg.reg; rec__instruction__instr__mulrs1 "model_trace:.6213" "name:MulRs1" : Instruction__reg.reg; rec__instruction__instr__mulrs2 "model_trace:.6223" "name:MulRs2" : Instruction__reg.reg; rec__instruction__instr__divrd "model_trace:.6237" "name:DivRd" : Instruction__reg.reg; rec__instruction__instr__divrs1 "model_trace:.6247" "name:DivRs1" : Instruction__reg.reg; rec__instruction__instr__divrs2 "model_trace:.6257" "name:DivRs2" : Instruction__reg.reg; rec__instruction__instr__retrs "model_trace:.6271" "name:RetRs" : Instruction__reg.reg; rec__instruction__instr__ldrrd "model_trace:.6285" "name:LdrRd" : Instruction__reg.reg; rec__instruction__instr__ldrrs "model_trace:.6295" "name:LdrRs" : Instruction__reg.reg; rec__instruction__instr__ldroffs "model_trace:.6305" "name:LdrOffs" : Instruction__offset.offset; rec__instruction__instr__strra "model_trace:.6319" "name:StrRa" : Instruction__reg.reg; rec__instruction__instr__stroffs "model_trace:.6329" "name:StrOffs" : Instruction__offset.offset; rec__instruction__instr__strrb "model_trace:.6339" "name:StrRb" : Instruction__reg.reg; rec__instruction__instr__movrd "model_trace:.6353" "name:MovRd" : Instruction__reg.reg; rec__instruction__instr__movoffs "model_trace:.6363" "name:MovOffs" : Instruction__offset.offset; rec__instruction__instr__jmpoffs "model_trace:.6377" "name:JmpOffs" : Instruction__offset.offset; rec__instruction__instr__jzra "model_trace:.6391" "name:JzRa" : Instruction__reg.reg; rec__instruction__instr__jzoffs "model_trace:.6401" "name:JzOffs" : Instruction__offset.offset }
 
 function __split_fields_AddRd__projection "model_trace:.6135" "name:AddRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__addrd
 
 meta "model_projection" function __split_fields_AddRd__projection
 
 meta "inline : no" function __split_fields_AddRd__projection
 
 function __split_fields_AddRs1__projection "model_trace:.6145" "name:AddRs1" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__addrs1
 
 meta "model_projection" function __split_fields_AddRs1__projection
 
 meta "inline : no" function __split_fields_AddRs1__projection
 
 function __split_fields_AddRs2__projection "model_trace:.6155" "name:AddRs2" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__addrs2
 
 meta "model_projection" function __split_fields_AddRs2__projection
 
 meta "inline : no" function __split_fields_AddRs2__projection
 
 function __split_fields_SubRd__projection "model_trace:.6169" "name:SubRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__subrd
 
 meta "model_projection" function __split_fields_SubRd__projection
 
 meta "inline : no" function __split_fields_SubRd__projection
 
 function __split_fields_SubRs1__projection "model_trace:.6179" "name:SubRs1" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__subrs1
 
 meta "model_projection" function __split_fields_SubRs1__projection
 
 meta "inline : no" function __split_fields_SubRs1__projection
 
 function __split_fields_SubRs2__projection "model_trace:.6189" "name:SubRs2" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__subrs2
 
 meta "model_projection" function __split_fields_SubRs2__projection
 
 meta "inline : no" function __split_fields_SubRs2__projection
 
 function __split_fields_MulRd__projection "model_trace:.6203" "name:MulRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__mulrd
 
 meta "model_projection" function __split_fields_MulRd__projection
 
 meta "inline : no" function __split_fields_MulRd__projection
 
 function __split_fields_MulRs1__projection "model_trace:.6213" "name:MulRs1" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__mulrs1
 
 meta "model_projection" function __split_fields_MulRs1__projection
 
 meta "inline : no" function __split_fields_MulRs1__projection
 
 function __split_fields_MulRs2__projection "model_trace:.6223" "name:MulRs2" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__mulrs2
 
 meta "model_projection" function __split_fields_MulRs2__projection
 
 meta "inline : no" function __split_fields_MulRs2__projection
 
 function __split_fields_DivRd__projection "model_trace:.6237" "name:DivRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__divrd
 
 meta "model_projection" function __split_fields_DivRd__projection
 
 meta "inline : no" function __split_fields_DivRd__projection
 
 function __split_fields_DivRs1__projection "model_trace:.6247" "name:DivRs1" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__divrs1
 
 meta "model_projection" function __split_fields_DivRs1__projection
 
 meta "inline : no" function __split_fields_DivRs1__projection
 
 function __split_fields_DivRs2__projection "model_trace:.6257" "name:DivRs2" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__divrs2
 
 meta "model_projection" function __split_fields_DivRs2__projection
 
 meta "inline : no" function __split_fields_DivRs2__projection
 
 function __split_fields_RetRs__projection "model_trace:.6271" "name:RetRs" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__retrs
 
 meta "model_projection" function __split_fields_RetRs__projection
 
 meta "inline : no" function __split_fields_RetRs__projection
 
 function __split_fields_LdrRd__projection "model_trace:.6285" "name:LdrRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__ldrrd
 
 meta "model_projection" function __split_fields_LdrRd__projection
 
 meta "inline : no" function __split_fields_LdrRd__projection
 
 function __split_fields_LdrRs__projection "model_trace:.6295" "name:LdrRs" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__ldrrs
 
 meta "model_projection" function __split_fields_LdrRs__projection
 
 meta "inline : no" function __split_fields_LdrRs__projection
 
 function __split_fields_LdrOffs__projection "model_trace:.6305" "name:LdrOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__ldroffs
 
 meta "model_projection" function __split_fields_LdrOffs__projection
 
 meta "inline : no" function __split_fields_LdrOffs__projection
 
 function __split_fields_StrRa__projection "model_trace:.6319" "name:StrRa" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__strra
 
 meta "model_projection" function __split_fields_StrRa__projection
 
 meta "inline : no" function __split_fields_StrRa__projection
 
 function __split_fields_StrOffs__projection "model_trace:.6329" "name:StrOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__stroffs
 
 meta "model_projection" function __split_fields_StrOffs__projection
 
 meta "inline : no" function __split_fields_StrOffs__projection
 
 function __split_fields_StrRb__projection "model_trace:.6339" "name:StrRb" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__strrb
 
 meta "model_projection" function __split_fields_StrRb__projection
 
 meta "inline : no" function __split_fields_StrRb__projection
 
 function __split_fields_MovRd__projection "model_trace:.6353" "name:MovRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__movrd
 
 meta "model_projection" function __split_fields_MovRd__projection
 
 meta "inline : no" function __split_fields_MovRd__projection
 
 function __split_fields_MovOffs__projection "model_trace:.6363" "name:MovOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__movoffs
 
 meta "model_projection" function __split_fields_MovOffs__projection
 
 meta "inline : no" function __split_fields_MovOffs__projection
 
 function __split_fields_JmpOffs__projection "model_trace:.6377" "name:JmpOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__jmpoffs
 
 meta "model_projection" function __split_fields_JmpOffs__projection
 
 meta "inline : no" function __split_fields_JmpOffs__projection
 
 function __split_fields_JzRa__projection "model_trace:.6391" "name:JzRa" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__jzra
 
 meta "model_projection" function __split_fields_JzRa__projection
 
 meta "inline : no" function __split_fields_JzRa__projection
 
 function __split_fields_JzOffs__projection "model_trace:.6401" "name:JzOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__jzoffs
 
 meta "model_projection" function __split_fields_JzOffs__projection
 
 meta "inline : no" function __split_fields_JzOffs__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_discrs "model_trace:" "name:" : __split_discrs; __split_fields "model_trace:" "name:" : __split_fields; attr__constrained "model_trace:" "name:" : bool }
 
 function __rep___projection 
   (a : __rep) : __split_discrs =
  a.__split_discrs
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function __rep___2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function __rep___3__projection 
   (a : __rep) : bool =
  a.attr__constrained
 
 meta "model_projection" function __rep___3__projection
 
 meta "inline : no" function __rep___3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 val rec__instruction__instr__op_ 
   (a : __rep) : Instruction__opcode.opcode
  requires {  true }
  ensures {  (result = a.__split_discrs.rec__instruction__instr__op) }
 
 predicate instruction__instr__addrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 1)
 
 val rec__instruction__instr__addrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__addrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__addrd) }
 
 predicate instruction__instr__addrs1__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 1)
 
 val rec__instruction__instr__addrs1_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__addrs1__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__addrs1) }
 
 predicate instruction__instr__addrs2__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 1)
 
 val rec__instruction__instr__addrs2_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__addrs2__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__addrs2) }
 
 predicate instruction__instr__subrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 2)
 
 val rec__instruction__instr__subrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__subrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__subrd) }
 
 predicate instruction__instr__subrs1__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 2)
 
 val rec__instruction__instr__subrs1_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__subrs1__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__subrs1) }
 
 predicate instruction__instr__subrs2__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 2)
 
 val rec__instruction__instr__subrs2_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__subrs2__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__subrs2) }
 
 predicate instruction__instr__mulrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 3)
 
 val rec__instruction__instr__mulrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__mulrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__mulrd) }
 
 predicate instruction__instr__mulrs1__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 3)
 
 val rec__instruction__instr__mulrs1_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__mulrs1__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__mulrs1) }
 
 predicate instruction__instr__mulrs2__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 3)
 
 val rec__instruction__instr__mulrs2_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__mulrs2__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__mulrs2) }
 
 predicate instruction__instr__divrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 4)
 
 val rec__instruction__instr__divrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__divrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__divrd) }
 
 predicate instruction__instr__divrs1__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 4)
 
 val rec__instruction__instr__divrs1_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__divrs1__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__divrs1) }
 
 predicate instruction__instr__divrs2__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 4)
 
 val rec__instruction__instr__divrs2_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__divrs2__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__divrs2) }
 
 predicate instruction__instr__retrs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 5)
 
 val rec__instruction__instr__retrs_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__retrs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__retrs) }
 
 predicate instruction__instr__ldrrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 6)
 
 val rec__instruction__instr__ldrrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__ldrrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__ldrrd) }
 
 predicate instruction__instr__ldrrs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 6)
 
 val rec__instruction__instr__ldrrs_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__ldrrs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__ldrrs) }
 
 predicate instruction__instr__ldroffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 6)
 
 val rec__instruction__instr__ldroffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__ldroffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__ldroffs) }
 
 predicate instruction__instr__strra__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 7)
 
 val rec__instruction__instr__strra_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__strra__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__strra) }
 
 predicate instruction__instr__stroffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 7)
 
 val rec__instruction__instr__stroffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__stroffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__stroffs) }
 
 predicate instruction__instr__strrb__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 7)
 
 val rec__instruction__instr__strrb_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__strrb__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__strrb) }
 
 predicate instruction__instr__movrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 8)
 
 val rec__instruction__instr__movrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__movrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__movrd) }
 
 predicate instruction__instr__movoffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 8)
 
 val rec__instruction__instr__movoffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__movoffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__movoffs) }
 
 predicate instruction__instr__jmpoffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 9)
 
 val rec__instruction__instr__jmpoffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__jmpoffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__jmpoffs) }
 
 predicate instruction__instr__jzra__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 10)
 
 val rec__instruction__instr__jzra_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__jzra__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__jzra) }
 
 predicate instruction__instr__jzoffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 10)
 
 val rec__instruction__instr__jzoffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__jzoffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__jzoffs) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = (Instruction__opcode__rep.to_rep b.__split_discrs.rec__instruction__instr__op)) /\ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (instruction__instr__addrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__addrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__addrd)) ) /\ ( (instruction__instr__addrs1__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__addrs1) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__addrs1)) ) ) /\ ( (instruction__instr__addrs2__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__addrs2) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__addrs2)) ) ) /\ ( (instruction__instr__subrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__subrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__subrd)) ) ) /\ ( (instruction__instr__subrs1__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__subrs1) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__subrs1)) ) ) /\ ( (instruction__instr__subrs2__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__subrs2) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__subrs2)) ) ) /\ ( (instruction__instr__mulrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__mulrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__mulrd)) ) ) /\ ( (instruction__instr__mulrs1__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__mulrs1) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__mulrs1)) ) ) /\ ( (instruction__instr__mulrs2__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__mulrs2) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__mulrs2)) ) ) /\ ( (instruction__instr__divrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__divrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__divrd)) ) ) /\ ( (instruction__instr__divrs1__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__divrs1) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__divrs1)) ) ) /\ ( (instruction__instr__divrs2__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__divrs2) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__divrs2)) ) ) /\ ( (instruction__instr__retrs__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__retrs) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__retrs)) ) ) /\ ( (instruction__instr__ldrrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__ldrrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__ldrrd)) ) ) /\ ( (instruction__instr__ldrrs__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__ldrrs) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__ldrrs)) ) ) /\ ( (instruction__instr__ldroffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__ldroffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__ldroffs)) ) ) /\ ( (instruction__instr__strra__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__strra) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__strra)) ) ) /\ ( (instruction__instr__stroffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__stroffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__stroffs)) ) ) /\ ( (instruction__instr__strrb__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__strrb) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__strrb)) ) ) /\ ( (instruction__instr__movrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__movrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__movrd)) ) ) /\ ( (instruction__instr__movoffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__movoffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__movoffs)) ) ) /\ ( (instruction__instr__jmpoffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__jmpoffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__jmpoffs)) ) ) /\ ( (instruction__instr__jzra__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__jzra) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__jzra)) ) ) /\ ( (instruction__instr__jzoffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__jzoffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__jzoffs)) ) ) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "instr" defined at instruction.ads:25, created in Gnat2Why.Types.Translate_Type *)
module Instruction__instr
 use export Instruction__instr__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type instr =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : instr) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : instr) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : instr.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : instr.
   ((object__alignment a) >= 0))
 
 function instruction__instr__op__first__bit 
   : int
 
 function instruction__instr__op__last__bit 
   : int
 
 function instruction__instr__op__position 
   : int
 
 axiom instruction__instr__op__first__bit_axiom :
  ((instruction__instr__op__first__bit ) >= 0)
 
 axiom instruction__instr__op__last__bit_axiom :
  ((instruction__instr__op__last__bit ) > (instruction__instr__op__first__bit ))
 
 axiom instruction__instr__op__position_axiom :
  ((instruction__instr__op__position ) >= 0)
 
 function instruction__instr__addrd__first__bit 
   : int
 
 function instruction__instr__addrd__last__bit 
   : int
 
 function instruction__instr__addrd__position 
   : int
 
 axiom instruction__instr__addrd__first__bit_axiom :
  ((instruction__instr__addrd__first__bit ) >= 0)
 
 axiom instruction__instr__addrd__last__bit_axiom :
  ((instruction__instr__addrd__last__bit ) > (instruction__instr__addrd__first__bit ))
 
 axiom instruction__instr__addrd__position_axiom :
  ((instruction__instr__addrd__position ) >= 0)
 
 function instruction__instr__addrs1__first__bit 
   : int
 
 function instruction__instr__addrs1__last__bit 
   : int
 
 function instruction__instr__addrs1__position 
   : int
 
 axiom instruction__instr__addrs1__first__bit_axiom :
  ((instruction__instr__addrs1__first__bit ) >= 0)
 
 axiom instruction__instr__addrs1__last__bit_axiom :
  ((instruction__instr__addrs1__last__bit ) > (instruction__instr__addrs1__first__bit ))
 
 axiom instruction__instr__addrs1__position_axiom :
  ((instruction__instr__addrs1__position ) >= 0)
 
 function instruction__instr__addrs2__first__bit 
   : int
 
 function instruction__instr__addrs2__last__bit 
   : int
 
 function instruction__instr__addrs2__position 
   : int
 
 axiom instruction__instr__addrs2__first__bit_axiom :
  ((instruction__instr__addrs2__first__bit ) >= 0)
 
 axiom instruction__instr__addrs2__last__bit_axiom :
  ((instruction__instr__addrs2__last__bit ) > (instruction__instr__addrs2__first__bit ))
 
 axiom instruction__instr__addrs2__position_axiom :
  ((instruction__instr__addrs2__position ) >= 0)
 
 function instruction__instr__subrd__first__bit 
   : int
 
 function instruction__instr__subrd__last__bit 
   : int
 
 function instruction__instr__subrd__position 
   : int
 
 axiom instruction__instr__subrd__first__bit_axiom :
  ((instruction__instr__subrd__first__bit ) >= 0)
 
 axiom instruction__instr__subrd__last__bit_axiom :
  ((instruction__instr__subrd__last__bit ) > (instruction__instr__subrd__first__bit ))
 
 axiom instruction__instr__subrd__position_axiom :
  ((instruction__instr__subrd__position ) >= 0)
 
 function instruction__instr__subrs1__first__bit 
   : int
 
 function instruction__instr__subrs1__last__bit 
   : int
 
 function instruction__instr__subrs1__position 
   : int
 
 axiom instruction__instr__subrs1__first__bit_axiom :
  ((instruction__instr__subrs1__first__bit ) >= 0)
 
 axiom instruction__instr__subrs1__last__bit_axiom :
  ((instruction__instr__subrs1__last__bit ) > (instruction__instr__subrs1__first__bit ))
 
 axiom instruction__instr__subrs1__position_axiom :
  ((instruction__instr__subrs1__position ) >= 0)
 
 function instruction__instr__subrs2__first__bit 
   : int
 
 function instruction__instr__subrs2__last__bit 
   : int
 
 function instruction__instr__subrs2__position 
   : int
 
 axiom instruction__instr__subrs2__first__bit_axiom :
  ((instruction__instr__subrs2__first__bit ) >= 0)
 
 axiom instruction__instr__subrs2__last__bit_axiom :
  ((instruction__instr__subrs2__last__bit ) > (instruction__instr__subrs2__first__bit ))
 
 axiom instruction__instr__subrs2__position_axiom :
  ((instruction__instr__subrs2__position ) >= 0)
 
 function instruction__instr__mulrd__first__bit 
   : int
 
 function instruction__instr__mulrd__last__bit 
   : int
 
 function instruction__instr__mulrd__position 
   : int
 
 axiom instruction__instr__mulrd__first__bit_axiom :
  ((instruction__instr__mulrd__first__bit ) >= 0)
 
 axiom instruction__instr__mulrd__last__bit_axiom :
  ((instruction__instr__mulrd__last__bit ) > (instruction__instr__mulrd__first__bit ))
 
 axiom instruction__instr__mulrd__position_axiom :
  ((instruction__instr__mulrd__position ) >= 0)
 
 function instruction__instr__mulrs1__first__bit 
   : int
 
 function instruction__instr__mulrs1__last__bit 
   : int
 
 function instruction__instr__mulrs1__position 
   : int
 
 axiom instruction__instr__mulrs1__first__bit_axiom :
  ((instruction__instr__mulrs1__first__bit ) >= 0)
 
 axiom instruction__instr__mulrs1__last__bit_axiom :
  ((instruction__instr__mulrs1__last__bit ) > (instruction__instr__mulrs1__first__bit ))
 
 axiom instruction__instr__mulrs1__position_axiom :
  ((instruction__instr__mulrs1__position ) >= 0)
 
 function instruction__instr__mulrs2__first__bit 
   : int
 
 function instruction__instr__mulrs2__last__bit 
   : int
 
 function instruction__instr__mulrs2__position 
   : int
 
 axiom instruction__instr__mulrs2__first__bit_axiom :
  ((instruction__instr__mulrs2__first__bit ) >= 0)
 
 axiom instruction__instr__mulrs2__last__bit_axiom :
  ((instruction__instr__mulrs2__last__bit ) > (instruction__instr__mulrs2__first__bit ))
 
 axiom instruction__instr__mulrs2__position_axiom :
  ((instruction__instr__mulrs2__position ) >= 0)
 
 function instruction__instr__divrd__first__bit 
   : int
 
 function instruction__instr__divrd__last__bit 
   : int
 
 function instruction__instr__divrd__position 
   : int
 
 axiom instruction__instr__divrd__first__bit_axiom :
  ((instruction__instr__divrd__first__bit ) >= 0)
 
 axiom instruction__instr__divrd__last__bit_axiom :
  ((instruction__instr__divrd__last__bit ) > (instruction__instr__divrd__first__bit ))
 
 axiom instruction__instr__divrd__position_axiom :
  ((instruction__instr__divrd__position ) >= 0)
 
 function instruction__instr__divrs1__first__bit 
   : int
 
 function instruction__instr__divrs1__last__bit 
   : int
 
 function instruction__instr__divrs1__position 
   : int
 
 axiom instruction__instr__divrs1__first__bit_axiom :
  ((instruction__instr__divrs1__first__bit ) >= 0)
 
 axiom instruction__instr__divrs1__last__bit_axiom :
  ((instruction__instr__divrs1__last__bit ) > (instruction__instr__divrs1__first__bit ))
 
 axiom instruction__instr__divrs1__position_axiom :
  ((instruction__instr__divrs1__position ) >= 0)
 
 function instruction__instr__divrs2__first__bit 
   : int
 
 function instruction__instr__divrs2__last__bit 
   : int
 
 function instruction__instr__divrs2__position 
   : int
 
 axiom instruction__instr__divrs2__first__bit_axiom :
  ((instruction__instr__divrs2__first__bit ) >= 0)
 
 axiom instruction__instr__divrs2__last__bit_axiom :
  ((instruction__instr__divrs2__last__bit ) > (instruction__instr__divrs2__first__bit ))
 
 axiom instruction__instr__divrs2__position_axiom :
  ((instruction__instr__divrs2__position ) >= 0)
 
 function instruction__instr__retrs__first__bit 
   : int
 
 function instruction__instr__retrs__last__bit 
   : int
 
 function instruction__instr__retrs__position 
   : int
 
 axiom instruction__instr__retrs__first__bit_axiom :
  ((instruction__instr__retrs__first__bit ) >= 0)
 
 axiom instruction__instr__retrs__last__bit_axiom :
  ((instruction__instr__retrs__last__bit ) > (instruction__instr__retrs__first__bit ))
 
 axiom instruction__instr__retrs__position_axiom :
  ((instruction__instr__retrs__position ) >= 0)
 
 function instruction__instr__ldrrd__first__bit 
   : int
 
 function instruction__instr__ldrrd__last__bit 
   : int
 
 function instruction__instr__ldrrd__position 
   : int
 
 axiom instruction__instr__ldrrd__first__bit_axiom :
  ((instruction__instr__ldrrd__first__bit ) >= 0)
 
 axiom instruction__instr__ldrrd__last__bit_axiom :
  ((instruction__instr__ldrrd__last__bit ) > (instruction__instr__ldrrd__first__bit ))
 
 axiom instruction__instr__ldrrd__position_axiom :
  ((instruction__instr__ldrrd__position ) >= 0)
 
 function instruction__instr__ldrrs__first__bit 
   : int
 
 function instruction__instr__ldrrs__last__bit 
   : int
 
 function instruction__instr__ldrrs__position 
   : int
 
 axiom instruction__instr__ldrrs__first__bit_axiom :
  ((instruction__instr__ldrrs__first__bit ) >= 0)
 
 axiom instruction__instr__ldrrs__last__bit_axiom :
  ((instruction__instr__ldrrs__last__bit ) > (instruction__instr__ldrrs__first__bit ))
 
 axiom instruction__instr__ldrrs__position_axiom :
  ((instruction__instr__ldrrs__position ) >= 0)
 
 function instruction__instr__ldroffs__first__bit 
   : int
 
 function instruction__instr__ldroffs__last__bit 
   : int
 
 function instruction__instr__ldroffs__position 
   : int
 
 axiom instruction__instr__ldroffs__first__bit_axiom :
  ((instruction__instr__ldroffs__first__bit ) >= 0)
 
 axiom instruction__instr__ldroffs__last__bit_axiom :
  ((instruction__instr__ldroffs__last__bit ) > (instruction__instr__ldroffs__first__bit ))
 
 axiom instruction__instr__ldroffs__position_axiom :
  ((instruction__instr__ldroffs__position ) >= 0)
 
 function instruction__instr__strra__first__bit 
   : int
 
 function instruction__instr__strra__last__bit 
   : int
 
 function instruction__instr__strra__position 
   : int
 
 axiom instruction__instr__strra__first__bit_axiom :
  ((instruction__instr__strra__first__bit ) >= 0)
 
 axiom instruction__instr__strra__last__bit_axiom :
  ((instruction__instr__strra__last__bit ) > (instruction__instr__strra__first__bit ))
 
 axiom instruction__instr__strra__position_axiom :
  ((instruction__instr__strra__position ) >= 0)
 
 function instruction__instr__stroffs__first__bit 
   : int
 
 function instruction__instr__stroffs__last__bit 
   : int
 
 function instruction__instr__stroffs__position 
   : int
 
 axiom instruction__instr__stroffs__first__bit_axiom :
  ((instruction__instr__stroffs__first__bit ) >= 0)
 
 axiom instruction__instr__stroffs__last__bit_axiom :
  ((instruction__instr__stroffs__last__bit ) > (instruction__instr__stroffs__first__bit ))
 
 axiom instruction__instr__stroffs__position_axiom :
  ((instruction__instr__stroffs__position ) >= 0)
 
 function instruction__instr__strrb__first__bit 
   : int
 
 function instruction__instr__strrb__last__bit 
   : int
 
 function instruction__instr__strrb__position 
   : int
 
 axiom instruction__instr__strrb__first__bit_axiom :
  ((instruction__instr__strrb__first__bit ) >= 0)
 
 axiom instruction__instr__strrb__last__bit_axiom :
  ((instruction__instr__strrb__last__bit ) > (instruction__instr__strrb__first__bit ))
 
 axiom instruction__instr__strrb__position_axiom :
  ((instruction__instr__strrb__position ) >= 0)
 
 function instruction__instr__movrd__first__bit 
   : int
 
 function instruction__instr__movrd__last__bit 
   : int
 
 function instruction__instr__movrd__position 
   : int
 
 axiom instruction__instr__movrd__first__bit_axiom :
  ((instruction__instr__movrd__first__bit ) >= 0)
 
 axiom instruction__instr__movrd__last__bit_axiom :
  ((instruction__instr__movrd__last__bit ) > (instruction__instr__movrd__first__bit ))
 
 axiom instruction__instr__movrd__position_axiom :
  ((instruction__instr__movrd__position ) >= 0)
 
 function instruction__instr__movoffs__first__bit 
   : int
 
 function instruction__instr__movoffs__last__bit 
   : int
 
 function instruction__instr__movoffs__position 
   : int
 
 axiom instruction__instr__movoffs__first__bit_axiom :
  ((instruction__instr__movoffs__first__bit ) >= 0)
 
 axiom instruction__instr__movoffs__last__bit_axiom :
  ((instruction__instr__movoffs__last__bit ) > (instruction__instr__movoffs__first__bit ))
 
 axiom instruction__instr__movoffs__position_axiom :
  ((instruction__instr__movoffs__position ) >= 0)
 
 function instruction__instr__jmpoffs__first__bit 
   : int
 
 function instruction__instr__jmpoffs__last__bit 
   : int
 
 function instruction__instr__jmpoffs__position 
   : int
 
 axiom instruction__instr__jmpoffs__first__bit_axiom :
  ((instruction__instr__jmpoffs__first__bit ) >= 0)
 
 axiom instruction__instr__jmpoffs__last__bit_axiom :
  ((instruction__instr__jmpoffs__last__bit ) > (instruction__instr__jmpoffs__first__bit ))
 
 axiom instruction__instr__jmpoffs__position_axiom :
  ((instruction__instr__jmpoffs__position ) >= 0)
 
 function instruction__instr__jzra__first__bit 
   : int
 
 function instruction__instr__jzra__last__bit 
   : int
 
 function instruction__instr__jzra__position 
   : int
 
 axiom instruction__instr__jzra__first__bit_axiom :
  ((instruction__instr__jzra__first__bit ) >= 0)
 
 axiom instruction__instr__jzra__last__bit_axiom :
  ((instruction__instr__jzra__last__bit ) > (instruction__instr__jzra__first__bit ))
 
 axiom instruction__instr__jzra__position_axiom :
  ((instruction__instr__jzra__position ) >= 0)
 
 function instruction__instr__jzoffs__first__bit 
   : int
 
 function instruction__instr__jzoffs__last__bit 
   : int
 
 function instruction__instr__jzoffs__position 
   : int
 
 axiom instruction__instr__jzoffs__first__bit_axiom :
  ((instruction__instr__jzoffs__first__bit ) >= 0)
 
 axiom instruction__instr__jzoffs__last__bit_axiom :
  ((instruction__instr__jzoffs__last__bit ) > (instruction__instr__jzoffs__first__bit ))
 
 axiom instruction__instr__jzoffs__position_axiom :
  ((instruction__instr__jzoffs__position ) >= 0)
 
 function user_eq 
   (a : instr) (b : instr) : bool
 
 function dummy 
   : instr
 
 type instr__ref =
  { mutable instr__content "model_trace:" "name:" : instr }
 
 function instr__ref___projection 
   (a : instr__ref) : instr =
  a.instr__content
 
 meta "model_projection" function instr__ref___projection
 
 meta "inline : no" function instr__ref___projection
 
 val instr__havoc 
   (x : instr__ref) : unit
  writes {x}

end

(* Module for defining the constant "inst" defined at instruction.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__debugprintinstr__inst
 use import "_gnatprove_standard".Main
 use        Instruction__instr

 function inst #"instruction.ads" 78 0 0#"model_projected" "name:Inst" "model_trace:6460" 
   : Instruction__instr.instr
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inst" defined at instruction.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__debugprintinstr__inst___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at debug.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Debug__put__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"debug.ads" 4 0 0#"model_projected" "model_trace:6502" "name:Item" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at debug.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Debug__put__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at debug.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Debug__put_line__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"debug.ads" 8 0 0#"model_projected" "name:Item" "model_trace:6525" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at debug.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Debug__put_line__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at debug.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Debug__put__2__item
 use import "_gnatprove_standard".Main

 function item #"debug.ads" 12 0 0#"model" "name:Item" "model_trace:6548" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at debug.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Debug__put__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at debug.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Debug__put__3__item
 use import "_gnatprove_standard".Main

 function item #"debug.ads" 20 0 0#"model" "name:Item" "model_trace:6585" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at debug.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Debug__put__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "nul" defined at a-chlat1.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__nul
 use import "_gnatprove_standard".Main

 function nul #"a-chlat1.ads" 25 0 0#"model" "model_trace:6666" "name:NUL" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "soh" defined at a-chlat1.ads:26, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__soh
 use import "_gnatprove_standard".Main

 function soh #"a-chlat1.ads" 26 0 0#"model" "model_trace:6679" "name:SOH" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stx" defined at a-chlat1.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__stx
 use import "_gnatprove_standard".Main

 function stx #"a-chlat1.ads" 27 0 0#"model" "model_trace:6692" "name:STX" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "etx" defined at a-chlat1.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__etx
 use import "_gnatprove_standard".Main

 function etx #"a-chlat1.ads" 28 0 0#"model" "model_trace:6705" "name:ETX" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "eot" defined at a-chlat1.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__eot
 use import "_gnatprove_standard".Main

 function eot #"a-chlat1.ads" 29 0 0#"model" "model_trace:6718" "name:EOT" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "enq" defined at a-chlat1.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__enq
 use import "_gnatprove_standard".Main

 function enq #"a-chlat1.ads" 30 0 0#"model" "model_trace:6731" "name:ENQ" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ack" defined at a-chlat1.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ack
 use import "_gnatprove_standard".Main

 function ack #"a-chlat1.ads" 31 0 0#"model" "model_trace:6744" "name:ACK" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "bel" defined at a-chlat1.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__bel
 use import "_gnatprove_standard".Main

 function bel #"a-chlat1.ads" 32 0 0#"model" "model_trace:6757" "name:BEL" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "bs" defined at a-chlat1.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__bs
 use import "_gnatprove_standard".Main

 function bs #"a-chlat1.ads" 33 0 0#"model" "model_trace:6770" "name:BS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ht" defined at a-chlat1.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ht
 use import "_gnatprove_standard".Main

 function ht #"a-chlat1.ads" 34 0 0#"model" "model_trace:6783" "name:HT" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lf" defined at a-chlat1.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lf
 use import "_gnatprove_standard".Main

 function lf #"a-chlat1.ads" 35 0 0#"model" "model_trace:6796" "name:LF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "vt" defined at a-chlat1.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__vt
 use import "_gnatprove_standard".Main

 function vt #"a-chlat1.ads" 36 0 0#"model" "model_trace:6809" "name:VT" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ff" defined at a-chlat1.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ff
 use import "_gnatprove_standard".Main

 function ff #"a-chlat1.ads" 37 0 0#"model" "model_trace:6822" "name:FF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "cr" defined at a-chlat1.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__cr
 use import "_gnatprove_standard".Main

 function cr #"a-chlat1.ads" 38 0 0#"model" "model_trace:6835" "name:CR" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "so" defined at a-chlat1.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__so
 use import "_gnatprove_standard".Main

 function so__ #"a-chlat1.ads" 39 0 0#"model" "model_trace:6848" "name:SO" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "si" defined at a-chlat1.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__si
 use import "_gnatprove_standard".Main

 function si #"a-chlat1.ads" 40 0 0#"model" "model_trace:6861" "name:SI" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dle" defined at a-chlat1.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dle
 use import "_gnatprove_standard".Main

 function dle #"a-chlat1.ads" 42 0 0#"model" "model_trace:6874" "name:DLE" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dc1" defined at a-chlat1.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dc1
 use import "_gnatprove_standard".Main

 function dc1 #"a-chlat1.ads" 43 0 0#"model" "model_trace:6887" "name:DC1" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dc2" defined at a-chlat1.ads:44, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dc2
 use import "_gnatprove_standard".Main

 function dc2 #"a-chlat1.ads" 44 0 0#"model" "model_trace:6900" "name:DC2" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dc3" defined at a-chlat1.ads:45, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dc3
 use import "_gnatprove_standard".Main

 function dc3 #"a-chlat1.ads" 45 0 0#"model" "model_trace:6913" "name:DC3" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dc4" defined at a-chlat1.ads:46, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dc4
 use import "_gnatprove_standard".Main

 function dc4 #"a-chlat1.ads" 46 0 0#"model" "model_trace:6926" "name:DC4" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "nak" defined at a-chlat1.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__nak
 use import "_gnatprove_standard".Main

 function nak #"a-chlat1.ads" 47 0 0#"model" "model_trace:6939" "name:NAK" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "syn" defined at a-chlat1.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__syn
 use import "_gnatprove_standard".Main

 function syn #"a-chlat1.ads" 48 0 0#"model" "model_trace:6952" "name:SYN" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "etb" defined at a-chlat1.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__etb
 use import "_gnatprove_standard".Main

 function etb #"a-chlat1.ads" 49 0 0#"model" "model_trace:6965" "name:ETB" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "can" defined at a-chlat1.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__can
 use import "_gnatprove_standard".Main

 function can #"a-chlat1.ads" 50 0 0#"model" "model_trace:6978" "name:CAN" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "em" defined at a-chlat1.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__em
 use import "_gnatprove_standard".Main

 function em #"a-chlat1.ads" 51 0 0#"model" "model_trace:6991" "name:EM" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "sub" defined at a-chlat1.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__sub
 use import "_gnatprove_standard".Main

 function sub #"a-chlat1.ads" 52 0 0#"model" "model_trace:7004" "name:SUB" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "esc" defined at a-chlat1.ads:53, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__esc
 use import "_gnatprove_standard".Main

 function esc #"a-chlat1.ads" 53 0 0#"model" "model_trace:7017" "name:ESC" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fs" defined at a-chlat1.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__fs
 use import "_gnatprove_standard".Main

 function fs #"a-chlat1.ads" 54 0 0#"model" "model_trace:7030" "name:FS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "gs" defined at a-chlat1.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__gs
 use import "_gnatprove_standard".Main

 function gs #"a-chlat1.ads" 55 0 0#"model" "model_trace:7043" "name:GS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "rs" defined at a-chlat1.ads:56, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__rs
 use import "_gnatprove_standard".Main

 function rs #"a-chlat1.ads" 56 0 0#"model" "model_trace:7056" "name:RS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "us" defined at a-chlat1.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__us
 use import "_gnatprove_standard".Main

 function us #"a-chlat1.ads" 57 0 0#"model" "model_trace:7069" "name:US" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "space" defined at a-chlat1.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__space
 use import "_gnatprove_standard".Main

 function space #"a-chlat1.ads" 63 0 0#"model" "model_trace:7082" "name:Space" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "exclamation" defined at a-chlat1.ads:64, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__exclamation
 use import "_gnatprove_standard".Main

 function exclamation #"a-chlat1.ads" 64 0 0#"model" "model_trace:7092" "name:Exclamation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "quotation" defined at a-chlat1.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__quotation
 use import "_gnatprove_standard".Main

 function quotation #"a-chlat1.ads" 65 0 0#"model" "model_trace:7102" "name:Quotation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "number_sign" defined at a-chlat1.ads:66, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__number_sign
 use import "_gnatprove_standard".Main

 function number_sign #"a-chlat1.ads" 66 0 0#"model" "model_trace:7112" "name:Number_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dollar_sign" defined at a-chlat1.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dollar_sign
 use import "_gnatprove_standard".Main

 function dollar_sign #"a-chlat1.ads" 67 0 0#"model" "model_trace:7122" "name:Dollar_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "percent_sign" defined at a-chlat1.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__percent_sign
 use import "_gnatprove_standard".Main

 function percent_sign #"a-chlat1.ads" 68 0 0#"model" "model_trace:7132" "name:Percent_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ampersand" defined at a-chlat1.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ampersand
 use import "_gnatprove_standard".Main

 function ampersand #"a-chlat1.ads" 69 0 0#"model" "model_trace:7142" "name:Ampersand" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "apostrophe" defined at a-chlat1.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__apostrophe
 use import "_gnatprove_standard".Main

 function apostrophe #"a-chlat1.ads" 70 0 0#"model" "model_trace:7152" "name:Apostrophe" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left_parenthesis" defined at a-chlat1.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__left_parenthesis
 use import "_gnatprove_standard".Main

 function left_parenthesis #"a-chlat1.ads" 71 0 0#"model" "model_trace:7162" "name:Left_Parenthesis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "right_parenthesis" defined at a-chlat1.ads:72, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__right_parenthesis
 use import "_gnatprove_standard".Main

 function right_parenthesis #"a-chlat1.ads" 72 0 0#"model" "model_trace:7172" "name:Right_Parenthesis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "asterisk" defined at a-chlat1.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__asterisk
 use import "_gnatprove_standard".Main

 function asterisk #"a-chlat1.ads" 73 0 0#"model" "model_trace:7182" "name:Asterisk" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "plus_sign" defined at a-chlat1.ads:74, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__plus_sign
 use import "_gnatprove_standard".Main

 function plus_sign #"a-chlat1.ads" 74 0 0#"model" "model_trace:7192" "name:Plus_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "comma" defined at a-chlat1.ads:75, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__comma
 use import "_gnatprove_standard".Main

 function comma #"a-chlat1.ads" 75 0 0#"model" "model_trace:7202" "name:Comma" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "hyphen" defined at a-chlat1.ads:76, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__hyphen
 use import "_gnatprove_standard".Main

 function hyphen #"a-chlat1.ads" 76 0 0#"model" "model_trace:7212" "name:Hyphen" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "full_stop" defined at a-chlat1.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__full_stop
 use import "_gnatprove_standard".Main

 function full_stop #"a-chlat1.ads" 78 0 0#"model" "model_trace:7232" "name:Full_Stop" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "solidus" defined at a-chlat1.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__solidus
 use import "_gnatprove_standard".Main

 function solidus #"a-chlat1.ads" 79 0 0#"model" "model_trace:7242" "name:Solidus" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "colon" defined at a-chlat1.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__colon
 use import "_gnatprove_standard".Main

 function colon #"a-chlat1.ads" 83 0 0#"model" "model_trace:7252" "name:Colon" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "semicolon" defined at a-chlat1.ads:84, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__semicolon
 use import "_gnatprove_standard".Main

 function semicolon #"a-chlat1.ads" 84 0 0#"model" "model_trace:7262" "name:Semicolon" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "less_than_sign" defined at a-chlat1.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__less_than_sign
 use import "_gnatprove_standard".Main

 function less_than_sign #"a-chlat1.ads" 85 0 0#"model" "model_trace:7272" "name:Less_Than_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "equals_sign" defined at a-chlat1.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__equals_sign
 use import "_gnatprove_standard".Main

 function equals_sign #"a-chlat1.ads" 86 0 0#"model" "model_trace:7282" "name:Equals_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "greater_than_sign" defined at a-chlat1.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__greater_than_sign
 use import "_gnatprove_standard".Main

 function greater_than_sign #"a-chlat1.ads" 87 0 0#"model" "model_trace:7292" "name:Greater_Than_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "question" defined at a-chlat1.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__question
 use import "_gnatprove_standard".Main

 function question #"a-chlat1.ads" 88 0 0#"model" "model_trace:7302" "name:Question" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "commercial_at" defined at a-chlat1.ads:89, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__commercial_at
 use import "_gnatprove_standard".Main

 function commercial_at #"a-chlat1.ads" 89 0 0#"model" "model_trace:7312" "name:Commercial_At" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left_square_bracket" defined at a-chlat1.ads:93, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__left_square_bracket
 use import "_gnatprove_standard".Main

 function left_square_bracket #"a-chlat1.ads" 93 0 0#"model" "model_trace:7322" "name:Left_Square_Bracket" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reverse_solidus" defined at a-chlat1.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reverse_solidus
 use import "_gnatprove_standard".Main

 function reverse_solidus #"a-chlat1.ads" 94 0 0#"model" "model_trace:7332" "name:Reverse_Solidus" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "right_square_bracket" defined at a-chlat1.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__right_square_bracket
 use import "_gnatprove_standard".Main

 function right_square_bracket #"a-chlat1.ads" 95 0 0#"model" "model_trace:7342" "name:Right_Square_Bracket" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "circumflex" defined at a-chlat1.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__circumflex
 use import "_gnatprove_standard".Main

 function circumflex #"a-chlat1.ads" 96 0 0#"model" "model_trace:7352" "name:Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "low_line" defined at a-chlat1.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__low_line
 use import "_gnatprove_standard".Main

 function low_line #"a-chlat1.ads" 97 0 0#"model" "model_trace:7362" "name:Low_Line" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "grave" defined at a-chlat1.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__grave
 use import "_gnatprove_standard".Main

 function grave #"a-chlat1.ads" 99 0 0#"model" "model_trace:7372" "name:Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a" defined at a-chlat1.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a
 use import "_gnatprove_standard".Main

 function lc_a #"a-chlat1.ads" 100 0 0#"model" "model_trace:7382" "name:LC_A" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_b" defined at a-chlat1.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_b
 use import "_gnatprove_standard".Main

 function lc_b #"a-chlat1.ads" 101 0 0#"model" "model_trace:7392" "name:LC_B" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_c" defined at a-chlat1.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_c
 use import "_gnatprove_standard".Main

 function lc_c #"a-chlat1.ads" 102 0 0#"model" "model_trace:7402" "name:LC_C" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_d" defined at a-chlat1.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_d
 use import "_gnatprove_standard".Main

 function lc_d #"a-chlat1.ads" 103 0 0#"model" "model_trace:7412" "name:LC_D" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e" defined at a-chlat1.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e
 use import "_gnatprove_standard".Main

 function lc_e #"a-chlat1.ads" 104 0 0#"model" "model_trace:7422" "name:LC_E" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_f" defined at a-chlat1.ads:105, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_f
 use import "_gnatprove_standard".Main

 function lc_f #"a-chlat1.ads" 105 0 0#"model" "model_trace:7432" "name:LC_F" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_g" defined at a-chlat1.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_g
 use import "_gnatprove_standard".Main

 function lc_g #"a-chlat1.ads" 106 0 0#"model" "model_trace:7442" "name:LC_G" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_h" defined at a-chlat1.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_h
 use import "_gnatprove_standard".Main

 function lc_h #"a-chlat1.ads" 107 0 0#"model" "model_trace:7452" "name:LC_H" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i" defined at a-chlat1.ads:108, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i
 use import "_gnatprove_standard".Main

 function lc_i #"a-chlat1.ads" 108 0 0#"model" "model_trace:7462" "name:LC_I" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_j" defined at a-chlat1.ads:109, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_j
 use import "_gnatprove_standard".Main

 function lc_j #"a-chlat1.ads" 109 0 0#"model" "model_trace:7472" "name:LC_J" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_k" defined at a-chlat1.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_k
 use import "_gnatprove_standard".Main

 function lc_k #"a-chlat1.ads" 110 0 0#"model" "model_trace:7482" "name:LC_K" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_l" defined at a-chlat1.ads:111, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_l
 use import "_gnatprove_standard".Main

 function lc_l #"a-chlat1.ads" 111 0 0#"model" "model_trace:7492" "name:LC_L" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_m" defined at a-chlat1.ads:112, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_m
 use import "_gnatprove_standard".Main

 function lc_m #"a-chlat1.ads" 112 0 0#"model" "model_trace:7502" "name:LC_M" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_n" defined at a-chlat1.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_n
 use import "_gnatprove_standard".Main

 function lc_n #"a-chlat1.ads" 113 0 0#"model" "model_trace:7512" "name:LC_N" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o" defined at a-chlat1.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o
 use import "_gnatprove_standard".Main

 function lc_o #"a-chlat1.ads" 114 0 0#"model" "model_trace:7522" "name:LC_O" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_p" defined at a-chlat1.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_p
 use import "_gnatprove_standard".Main

 function lc_p #"a-chlat1.ads" 115 0 0#"model" "model_trace:7532" "name:LC_P" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_q" defined at a-chlat1.ads:116, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_q
 use import "_gnatprove_standard".Main

 function lc_q #"a-chlat1.ads" 116 0 0#"model" "model_trace:7542" "name:LC_Q" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_r" defined at a-chlat1.ads:117, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_r
 use import "_gnatprove_standard".Main

 function lc_r #"a-chlat1.ads" 117 0 0#"model" "model_trace:7552" "name:LC_R" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_s" defined at a-chlat1.ads:118, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_s
 use import "_gnatprove_standard".Main

 function lc_s #"a-chlat1.ads" 118 0 0#"model" "model_trace:7562" "name:LC_S" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_t" defined at a-chlat1.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_t
 use import "_gnatprove_standard".Main

 function lc_t #"a-chlat1.ads" 119 0 0#"model" "model_trace:7572" "name:LC_T" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u" defined at a-chlat1.ads:120, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u
 use import "_gnatprove_standard".Main

 function lc_u #"a-chlat1.ads" 120 0 0#"model" "model_trace:7582" "name:LC_U" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_v" defined at a-chlat1.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_v
 use import "_gnatprove_standard".Main

 function lc_v #"a-chlat1.ads" 121 0 0#"model" "model_trace:7592" "name:LC_V" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_w" defined at a-chlat1.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_w
 use import "_gnatprove_standard".Main

 function lc_w #"a-chlat1.ads" 122 0 0#"model" "model_trace:7602" "name:LC_W" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_x" defined at a-chlat1.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_x
 use import "_gnatprove_standard".Main

 function lc_x #"a-chlat1.ads" 123 0 0#"model" "model_trace:7612" "name:LC_X" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_y" defined at a-chlat1.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_y
 use import "_gnatprove_standard".Main

 function lc_y #"a-chlat1.ads" 124 0 0#"model" "model_trace:7622" "name:LC_Y" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_z" defined at a-chlat1.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_z
 use import "_gnatprove_standard".Main

 function lc_z #"a-chlat1.ads" 125 0 0#"model" "model_trace:7632" "name:LC_Z" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left_curly_bracket" defined at a-chlat1.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__left_curly_bracket
 use import "_gnatprove_standard".Main

 function left_curly_bracket #"a-chlat1.ads" 126 0 0#"model" "model_trace:7642" "name:Left_Curly_Bracket" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "vertical_line" defined at a-chlat1.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__vertical_line
 use import "_gnatprove_standard".Main

 function vertical_line #"a-chlat1.ads" 127 0 0#"model" "model_trace:7652" "name:Vertical_Line" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "right_curly_bracket" defined at a-chlat1.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__right_curly_bracket
 use import "_gnatprove_standard".Main

 function right_curly_bracket #"a-chlat1.ads" 128 0 0#"model" "model_trace:7662" "name:Right_Curly_Bracket" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "tilde" defined at a-chlat1.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__tilde
 use import "_gnatprove_standard".Main

 function tilde #"a-chlat1.ads" 129 0 0#"model" "model_trace:7672" "name:Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "del" defined at a-chlat1.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__del
 use import "_gnatprove_standard".Main

 function del #"a-chlat1.ads" 130 0 0#"model" "model_trace:7682" "name:DEL" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reserved_128" defined at a-chlat1.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reserved_128
 use import "_gnatprove_standard".Main

 function reserved_128 #"a-chlat1.ads" 141 0 0#"model" "model_trace:7735" "name:Reserved_128" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reserved_129" defined at a-chlat1.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reserved_129
 use import "_gnatprove_standard".Main

 function reserved_129 #"a-chlat1.ads" 142 0 0#"model" "model_trace:7748" "name:Reserved_129" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "bph" defined at a-chlat1.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__bph
 use import "_gnatprove_standard".Main

 function bph #"a-chlat1.ads" 143 0 0#"model" "model_trace:7761" "name:BPH" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "nbh" defined at a-chlat1.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__nbh
 use import "_gnatprove_standard".Main

 function nbh #"a-chlat1.ads" 144 0 0#"model" "model_trace:7774" "name:NBH" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reserved_132" defined at a-chlat1.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reserved_132
 use import "_gnatprove_standard".Main

 function reserved_132 #"a-chlat1.ads" 145 0 0#"model" "model_trace:7787" "name:Reserved_132" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "nel" defined at a-chlat1.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__nel
 use import "_gnatprove_standard".Main

 function nel #"a-chlat1.ads" 146 0 0#"model" "model_trace:7800" "name:NEL" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ssa" defined at a-chlat1.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ssa
 use import "_gnatprove_standard".Main

 function ssa #"a-chlat1.ads" 147 0 0#"model" "model_trace:7813" "name:SSA" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "esa" defined at a-chlat1.ads:148, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__esa
 use import "_gnatprove_standard".Main

 function esa #"a-chlat1.ads" 148 0 0#"model" "model_trace:7826" "name:ESA" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "hts" defined at a-chlat1.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__hts
 use import "_gnatprove_standard".Main

 function hts #"a-chlat1.ads" 149 0 0#"model" "model_trace:7839" "name:HTS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "htj" defined at a-chlat1.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__htj
 use import "_gnatprove_standard".Main

 function htj #"a-chlat1.ads" 150 0 0#"model" "model_trace:7852" "name:HTJ" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "vts" defined at a-chlat1.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__vts
 use import "_gnatprove_standard".Main

 function vts #"a-chlat1.ads" 151 0 0#"model" "model_trace:7865" "name:VTS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pld" defined at a-chlat1.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pld
 use import "_gnatprove_standard".Main

 function pld #"a-chlat1.ads" 152 0 0#"model" "model_trace:7878" "name:PLD" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "plu" defined at a-chlat1.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__plu
 use import "_gnatprove_standard".Main

 function plu #"a-chlat1.ads" 153 0 0#"model" "model_trace:7891" "name:PLU" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ri" defined at a-chlat1.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ri
 use import "_gnatprove_standard".Main

 function ri #"a-chlat1.ads" 154 0 0#"model" "model_trace:7904" "name:RI" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ss2" defined at a-chlat1.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ss2
 use import "_gnatprove_standard".Main

 function ss2 #"a-chlat1.ads" 155 0 0#"model" "model_trace:7917" "name:SS2" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ss3" defined at a-chlat1.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ss3
 use import "_gnatprove_standard".Main

 function ss3 #"a-chlat1.ads" 156 0 0#"model" "model_trace:7930" "name:SS3" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dcs" defined at a-chlat1.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dcs
 use import "_gnatprove_standard".Main

 function dcs #"a-chlat1.ads" 158 0 0#"model" "model_trace:7943" "name:DCS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pu1" defined at a-chlat1.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pu1
 use import "_gnatprove_standard".Main

 function pu1 #"a-chlat1.ads" 159 0 0#"model" "model_trace:7956" "name:PU1" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pu2" defined at a-chlat1.ads:160, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pu2
 use import "_gnatprove_standard".Main

 function pu2 #"a-chlat1.ads" 160 0 0#"model" "model_trace:7969" "name:PU2" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "sts" defined at a-chlat1.ads:161, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__sts
 use import "_gnatprove_standard".Main

 function sts #"a-chlat1.ads" 161 0 0#"model" "model_trace:7982" "name:STS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "cch" defined at a-chlat1.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__cch
 use import "_gnatprove_standard".Main

 function cch #"a-chlat1.ads" 162 0 0#"model" "model_trace:7995" "name:CCH" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "mw" defined at a-chlat1.ads:163, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__mw
 use import "_gnatprove_standard".Main

 function mw #"a-chlat1.ads" 163 0 0#"model" "model_trace:8008" "name:MW" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "spa" defined at a-chlat1.ads:164, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__spa
 use import "_gnatprove_standard".Main

 function spa #"a-chlat1.ads" 164 0 0#"model" "model_trace:8021" "name:SPA" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "epa" defined at a-chlat1.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__epa
 use import "_gnatprove_standard".Main

 function epa #"a-chlat1.ads" 165 0 0#"model" "model_trace:8034" "name:EPA" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "sos" defined at a-chlat1.ads:167, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__sos
 use import "_gnatprove_standard".Main

 function sos #"a-chlat1.ads" 167 0 0#"model" "model_trace:8047" "name:SOS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reserved_153" defined at a-chlat1.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reserved_153
 use import "_gnatprove_standard".Main

 function reserved_153 #"a-chlat1.ads" 168 0 0#"model" "model_trace:8060" "name:Reserved_153" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "sci" defined at a-chlat1.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__sci
 use import "_gnatprove_standard".Main

 function sci #"a-chlat1.ads" 169 0 0#"model" "model_trace:8073" "name:SCI" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "csi" defined at a-chlat1.ads:170, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__csi
 use import "_gnatprove_standard".Main

 function csi #"a-chlat1.ads" 170 0 0#"model" "model_trace:8086" "name:CSI" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "st" defined at a-chlat1.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__st
 use import "_gnatprove_standard".Main

 function st #"a-chlat1.ads" 171 0 0#"model" "model_trace:8099" "name:ST" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "osc" defined at a-chlat1.ads:172, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__osc
 use import "_gnatprove_standard".Main

 function osc #"a-chlat1.ads" 172 0 0#"model" "model_trace:8112" "name:OSC" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pm" defined at a-chlat1.ads:173, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pm
 use import "_gnatprove_standard".Main

 function pm #"a-chlat1.ads" 173 0 0#"model" "model_trace:8125" "name:PM" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "apc" defined at a-chlat1.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__apc
 use import "_gnatprove_standard".Main

 function apc #"a-chlat1.ads" 174 0 0#"model" "model_trace:8138" "name:APC" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "no_break_space" defined at a-chlat1.ads:182, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__no_break_space
 use import "_gnatprove_standard".Main

 function no_break_space #"a-chlat1.ads" 182 0 0#"model" "model_trace:8151" "name:No_Break_Space" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "inverted_exclamation" defined at a-chlat1.ads:184, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__inverted_exclamation
 use import "_gnatprove_standard".Main

 function inverted_exclamation #"a-chlat1.ads" 184 0 0#"model" "model_trace:8174" "name:Inverted_Exclamation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "cent_sign" defined at a-chlat1.ads:185, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__cent_sign
 use import "_gnatprove_standard".Main

 function cent_sign #"a-chlat1.ads" 185 0 0#"model" "model_trace:8187" "name:Cent_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pound_sign" defined at a-chlat1.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pound_sign
 use import "_gnatprove_standard".Main

 function pound_sign #"a-chlat1.ads" 186 0 0#"model" "model_trace:8200" "name:Pound_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "currency_sign" defined at a-chlat1.ads:187, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__currency_sign
 use import "_gnatprove_standard".Main

 function currency_sign #"a-chlat1.ads" 187 0 0#"model" "model_trace:8213" "name:Currency_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "yen_sign" defined at a-chlat1.ads:188, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__yen_sign
 use import "_gnatprove_standard".Main

 function yen_sign #"a-chlat1.ads" 188 0 0#"model" "model_trace:8226" "name:Yen_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "broken_bar" defined at a-chlat1.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__broken_bar
 use import "_gnatprove_standard".Main

 function broken_bar #"a-chlat1.ads" 189 0 0#"model" "model_trace:8239" "name:Broken_Bar" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "section_sign" defined at a-chlat1.ads:190, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__section_sign
 use import "_gnatprove_standard".Main

 function section_sign #"a-chlat1.ads" 190 0 0#"model" "model_trace:8252" "name:Section_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "diaeresis" defined at a-chlat1.ads:191, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__diaeresis
 use import "_gnatprove_standard".Main

 function diaeresis #"a-chlat1.ads" 191 0 0#"model" "model_trace:8265" "name:Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "copyright_sign" defined at a-chlat1.ads:192, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__copyright_sign
 use import "_gnatprove_standard".Main

 function copyright_sign #"a-chlat1.ads" 192 0 0#"model" "model_trace:8278" "name:Copyright_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "feminine_ordinal_indicator" defined at a-chlat1.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__feminine_ordinal_indicator
 use import "_gnatprove_standard".Main

 function feminine_ordinal_indicator #"a-chlat1.ads" 193 0 0#"model" "model_trace:8291" "name:Feminine_Ordinal_Indicator" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left_angle_quotation" defined at a-chlat1.ads:194, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__left_angle_quotation
 use import "_gnatprove_standard".Main

 function left_angle_quotation #"a-chlat1.ads" 194 0 0#"model" "model_trace:8304" "name:Left_Angle_Quotation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "not_sign" defined at a-chlat1.ads:195, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__not_sign
 use import "_gnatprove_standard".Main

 function not_sign #"a-chlat1.ads" 195 0 0#"model" "model_trace:8317" "name:Not_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "soft_hyphen" defined at a-chlat1.ads:196, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__soft_hyphen
 use import "_gnatprove_standard".Main

 function soft_hyphen #"a-chlat1.ads" 196 0 0#"model" "model_trace:8330" "name:Soft_Hyphen" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "registered_trade_mark_sign" defined at a-chlat1.ads:197, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__registered_trade_mark_sign
 use import "_gnatprove_standard".Main

 function registered_trade_mark_sign #"a-chlat1.ads" 197 0 0#"model" "model_trace:8343" "name:Registered_Trade_Mark_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "macron" defined at a-chlat1.ads:198, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__macron
 use import "_gnatprove_standard".Main

 function macron #"a-chlat1.ads" 198 0 0#"model" "model_trace:8356" "name:Macron" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "degree_sign" defined at a-chlat1.ads:202, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__degree_sign
 use import "_gnatprove_standard".Main

 function degree_sign #"a-chlat1.ads" 202 0 0#"model" "model_trace:8369" "name:Degree_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "plus_minus_sign" defined at a-chlat1.ads:204, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__plus_minus_sign
 use import "_gnatprove_standard".Main

 function plus_minus_sign #"a-chlat1.ads" 204 0 0#"model" "model_trace:8392" "name:Plus_Minus_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "superscript_two" defined at a-chlat1.ads:205, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__superscript_two
 use import "_gnatprove_standard".Main

 function superscript_two #"a-chlat1.ads" 205 0 0#"model" "model_trace:8405" "name:Superscript_Two" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "superscript_three" defined at a-chlat1.ads:206, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__superscript_three
 use import "_gnatprove_standard".Main

 function superscript_three #"a-chlat1.ads" 206 0 0#"model" "model_trace:8418" "name:Superscript_Three" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "acute" defined at a-chlat1.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__acute
 use import "_gnatprove_standard".Main

 function acute #"a-chlat1.ads" 207 0 0#"model" "model_trace:8431" "name:Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "micro_sign" defined at a-chlat1.ads:208, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__micro_sign
 use import "_gnatprove_standard".Main

 function micro_sign #"a-chlat1.ads" 208 0 0#"model" "model_trace:8444" "name:Micro_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pilcrow_sign" defined at a-chlat1.ads:209, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pilcrow_sign
 use import "_gnatprove_standard".Main

 function pilcrow_sign #"a-chlat1.ads" 209 0 0#"model" "model_trace:8457" "name:Pilcrow_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "middle_dot" defined at a-chlat1.ads:211, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__middle_dot
 use import "_gnatprove_standard".Main

 function middle_dot #"a-chlat1.ads" 211 0 0#"model" "model_trace:8480" "name:Middle_Dot" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "cedilla" defined at a-chlat1.ads:212, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__cedilla
 use import "_gnatprove_standard".Main

 function cedilla #"a-chlat1.ads" 212 0 0#"model" "model_trace:8493" "name:Cedilla" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "superscript_one" defined at a-chlat1.ads:213, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__superscript_one
 use import "_gnatprove_standard".Main

 function superscript_one #"a-chlat1.ads" 213 0 0#"model" "model_trace:8506" "name:Superscript_One" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "masculine_ordinal_indicator" defined at a-chlat1.ads:214, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__masculine_ordinal_indicator
 use import "_gnatprove_standard".Main

 function masculine_ordinal_indicator #"a-chlat1.ads" 214 0 0#"model" "model_trace:8519" "name:Masculine_Ordinal_Indicator" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "right_angle_quotation" defined at a-chlat1.ads:215, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__right_angle_quotation
 use import "_gnatprove_standard".Main

 function right_angle_quotation #"a-chlat1.ads" 215 0 0#"model" "model_trace:8532" "name:Right_Angle_Quotation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fraction_one_quarter" defined at a-chlat1.ads:216, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__fraction_one_quarter
 use import "_gnatprove_standard".Main

 function fraction_one_quarter #"a-chlat1.ads" 216 0 0#"model" "model_trace:8545" "name:Fraction_One_Quarter" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fraction_one_half" defined at a-chlat1.ads:217, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__fraction_one_half
 use import "_gnatprove_standard".Main

 function fraction_one_half #"a-chlat1.ads" 217 0 0#"model" "model_trace:8558" "name:Fraction_One_Half" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fraction_three_quarters" defined at a-chlat1.ads:218, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__fraction_three_quarters
 use import "_gnatprove_standard".Main

 function fraction_three_quarters #"a-chlat1.ads" 218 0 0#"model" "model_trace:8571" "name:Fraction_Three_Quarters" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "inverted_question" defined at a-chlat1.ads:219, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__inverted_question
 use import "_gnatprove_standard".Main

 function inverted_question #"a-chlat1.ads" 219 0 0#"model" "model_trace:8584" "name:Inverted_Question" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_grave" defined at a-chlat1.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_grave
 use import "_gnatprove_standard".Main

 function uc_a_grave #"a-chlat1.ads" 223 0 0#"model" "model_trace:8597" "name:UC_A_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_acute" defined at a-chlat1.ads:224, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_acute
 use import "_gnatprove_standard".Main

 function uc_a_acute #"a-chlat1.ads" 224 0 0#"model" "model_trace:8610" "name:UC_A_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_circumflex" defined at a-chlat1.ads:225, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_circumflex
 use import "_gnatprove_standard".Main

 function uc_a_circumflex #"a-chlat1.ads" 225 0 0#"model" "model_trace:8623" "name:UC_A_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_tilde" defined at a-chlat1.ads:226, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_tilde
 use import "_gnatprove_standard".Main

 function uc_a_tilde #"a-chlat1.ads" 226 0 0#"model" "model_trace:8636" "name:UC_A_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_diaeresis" defined at a-chlat1.ads:227, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_diaeresis
 use import "_gnatprove_standard".Main

 function uc_a_diaeresis #"a-chlat1.ads" 227 0 0#"model" "model_trace:8649" "name:UC_A_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_ring" defined at a-chlat1.ads:228, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_ring
 use import "_gnatprove_standard".Main

 function uc_a_ring #"a-chlat1.ads" 228 0 0#"model" "model_trace:8662" "name:UC_A_Ring" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_ae_diphthong" defined at a-chlat1.ads:229, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_ae_diphthong
 use import "_gnatprove_standard".Main

 function uc_ae_diphthong #"a-chlat1.ads" 229 0 0#"model" "model_trace:8675" "name:UC_AE_Diphthong" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_c_cedilla" defined at a-chlat1.ads:230, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_c_cedilla
 use import "_gnatprove_standard".Main

 function uc_c_cedilla #"a-chlat1.ads" 230 0 0#"model" "model_trace:8688" "name:UC_C_Cedilla" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_e_grave" defined at a-chlat1.ads:231, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_e_grave
 use import "_gnatprove_standard".Main

 function uc_e_grave #"a-chlat1.ads" 231 0 0#"model" "model_trace:8701" "name:UC_E_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_e_acute" defined at a-chlat1.ads:232, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_e_acute
 use import "_gnatprove_standard".Main

 function uc_e_acute #"a-chlat1.ads" 232 0 0#"model" "model_trace:8714" "name:UC_E_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_e_circumflex" defined at a-chlat1.ads:233, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_e_circumflex
 use import "_gnatprove_standard".Main

 function uc_e_circumflex #"a-chlat1.ads" 233 0 0#"model" "model_trace:8727" "name:UC_E_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_e_diaeresis" defined at a-chlat1.ads:234, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_e_diaeresis
 use import "_gnatprove_standard".Main

 function uc_e_diaeresis #"a-chlat1.ads" 234 0 0#"model" "model_trace:8740" "name:UC_E_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_i_grave" defined at a-chlat1.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_i_grave
 use import "_gnatprove_standard".Main

 function uc_i_grave #"a-chlat1.ads" 235 0 0#"model" "model_trace:8753" "name:UC_I_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_i_acute" defined at a-chlat1.ads:236, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_i_acute
 use import "_gnatprove_standard".Main

 function uc_i_acute #"a-chlat1.ads" 236 0 0#"model" "model_trace:8766" "name:UC_I_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_i_circumflex" defined at a-chlat1.ads:237, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_i_circumflex
 use import "_gnatprove_standard".Main

 function uc_i_circumflex #"a-chlat1.ads" 237 0 0#"model" "model_trace:8779" "name:UC_I_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_i_diaeresis" defined at a-chlat1.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_i_diaeresis
 use import "_gnatprove_standard".Main

 function uc_i_diaeresis #"a-chlat1.ads" 238 0 0#"model" "model_trace:8792" "name:UC_I_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_icelandic_eth" defined at a-chlat1.ads:242, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_icelandic_eth
 use import "_gnatprove_standard".Main

 function uc_icelandic_eth #"a-chlat1.ads" 242 0 0#"model" "model_trace:8805" "name:UC_Icelandic_Eth" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_n_tilde" defined at a-chlat1.ads:243, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_n_tilde
 use import "_gnatprove_standard".Main

 function uc_n_tilde #"a-chlat1.ads" 243 0 0#"model" "model_trace:8818" "name:UC_N_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_grave" defined at a-chlat1.ads:244, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_grave
 use import "_gnatprove_standard".Main

 function uc_o_grave #"a-chlat1.ads" 244 0 0#"model" "model_trace:8831" "name:UC_O_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_acute" defined at a-chlat1.ads:245, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_acute
 use import "_gnatprove_standard".Main

 function uc_o_acute #"a-chlat1.ads" 245 0 0#"model" "model_trace:8844" "name:UC_O_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_circumflex" defined at a-chlat1.ads:246, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_circumflex
 use import "_gnatprove_standard".Main

 function uc_o_circumflex #"a-chlat1.ads" 246 0 0#"model" "model_trace:8857" "name:UC_O_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_tilde" defined at a-chlat1.ads:247, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_tilde
 use import "_gnatprove_standard".Main

 function uc_o_tilde #"a-chlat1.ads" 247 0 0#"model" "model_trace:8870" "name:UC_O_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_diaeresis" defined at a-chlat1.ads:248, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_diaeresis
 use import "_gnatprove_standard".Main

 function uc_o_diaeresis #"a-chlat1.ads" 248 0 0#"model" "model_trace:8883" "name:UC_O_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "multiplication_sign" defined at a-chlat1.ads:249, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__multiplication_sign
 use import "_gnatprove_standard".Main

 function multiplication_sign #"a-chlat1.ads" 249 0 0#"model" "model_trace:8896" "name:Multiplication_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_oblique_stroke" defined at a-chlat1.ads:250, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_oblique_stroke
 use import "_gnatprove_standard".Main

 function uc_o_oblique_stroke #"a-chlat1.ads" 250 0 0#"model" "model_trace:8909" "name:UC_O_Oblique_Stroke" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_u_grave" defined at a-chlat1.ads:251, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_u_grave
 use import "_gnatprove_standard".Main

 function uc_u_grave #"a-chlat1.ads" 251 0 0#"model" "model_trace:8922" "name:UC_U_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_u_acute" defined at a-chlat1.ads:252, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_u_acute
 use import "_gnatprove_standard".Main

 function uc_u_acute #"a-chlat1.ads" 252 0 0#"model" "model_trace:8935" "name:UC_U_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_u_circumflex" defined at a-chlat1.ads:253, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_u_circumflex
 use import "_gnatprove_standard".Main

 function uc_u_circumflex #"a-chlat1.ads" 253 0 0#"model" "model_trace:8948" "name:UC_U_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_u_diaeresis" defined at a-chlat1.ads:254, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_u_diaeresis
 use import "_gnatprove_standard".Main

 function uc_u_diaeresis #"a-chlat1.ads" 254 0 0#"model" "model_trace:8961" "name:UC_U_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_y_acute" defined at a-chlat1.ads:255, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_y_acute
 use import "_gnatprove_standard".Main

 function uc_y_acute #"a-chlat1.ads" 255 0 0#"model" "model_trace:8974" "name:UC_Y_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_icelandic_thorn" defined at a-chlat1.ads:256, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_icelandic_thorn
 use import "_gnatprove_standard".Main

 function uc_icelandic_thorn #"a-chlat1.ads" 256 0 0#"model" "model_trace:8987" "name:UC_Icelandic_Thorn" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_german_sharp_s" defined at a-chlat1.ads:257, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_german_sharp_s
 use import "_gnatprove_standard".Main

 function lc_german_sharp_s #"a-chlat1.ads" 257 0 0#"model" "model_trace:9000" "name:LC_German_Sharp_S" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_grave" defined at a-chlat1.ads:261, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_grave
 use import "_gnatprove_standard".Main

 function lc_a_grave #"a-chlat1.ads" 261 0 0#"model" "model_trace:9013" "name:LC_A_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_acute" defined at a-chlat1.ads:262, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_acute
 use import "_gnatprove_standard".Main

 function lc_a_acute #"a-chlat1.ads" 262 0 0#"model" "model_trace:9026" "name:LC_A_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_circumflex" defined at a-chlat1.ads:263, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_circumflex
 use import "_gnatprove_standard".Main

 function lc_a_circumflex #"a-chlat1.ads" 263 0 0#"model" "model_trace:9039" "name:LC_A_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_tilde" defined at a-chlat1.ads:264, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_tilde
 use import "_gnatprove_standard".Main

 function lc_a_tilde #"a-chlat1.ads" 264 0 0#"model" "model_trace:9052" "name:LC_A_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_diaeresis" defined at a-chlat1.ads:265, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_diaeresis
 use import "_gnatprove_standard".Main

 function lc_a_diaeresis #"a-chlat1.ads" 265 0 0#"model" "model_trace:9065" "name:LC_A_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_ring" defined at a-chlat1.ads:266, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_ring
 use import "_gnatprove_standard".Main

 function lc_a_ring #"a-chlat1.ads" 266 0 0#"model" "model_trace:9078" "name:LC_A_Ring" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_ae_diphthong" defined at a-chlat1.ads:267, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_ae_diphthong
 use import "_gnatprove_standard".Main

 function lc_ae_diphthong #"a-chlat1.ads" 267 0 0#"model" "model_trace:9091" "name:LC_AE_Diphthong" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_c_cedilla" defined at a-chlat1.ads:268, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_c_cedilla
 use import "_gnatprove_standard".Main

 function lc_c_cedilla #"a-chlat1.ads" 268 0 0#"model" "model_trace:9104" "name:LC_C_Cedilla" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e_grave" defined at a-chlat1.ads:269, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e_grave
 use import "_gnatprove_standard".Main

 function lc_e_grave #"a-chlat1.ads" 269 0 0#"model" "model_trace:9117" "name:LC_E_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e_acute" defined at a-chlat1.ads:270, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e_acute
 use import "_gnatprove_standard".Main

 function lc_e_acute #"a-chlat1.ads" 270 0 0#"model" "model_trace:9130" "name:LC_E_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e_circumflex" defined at a-chlat1.ads:271, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e_circumflex
 use import "_gnatprove_standard".Main

 function lc_e_circumflex #"a-chlat1.ads" 271 0 0#"model" "model_trace:9143" "name:LC_E_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e_diaeresis" defined at a-chlat1.ads:272, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e_diaeresis
 use import "_gnatprove_standard".Main

 function lc_e_diaeresis #"a-chlat1.ads" 272 0 0#"model" "model_trace:9156" "name:LC_E_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i_grave" defined at a-chlat1.ads:273, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i_grave
 use import "_gnatprove_standard".Main

 function lc_i_grave #"a-chlat1.ads" 273 0 0#"model" "model_trace:9169" "name:LC_I_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i_acute" defined at a-chlat1.ads:274, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i_acute
 use import "_gnatprove_standard".Main

 function lc_i_acute #"a-chlat1.ads" 274 0 0#"model" "model_trace:9182" "name:LC_I_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i_circumflex" defined at a-chlat1.ads:275, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i_circumflex
 use import "_gnatprove_standard".Main

 function lc_i_circumflex #"a-chlat1.ads" 275 0 0#"model" "model_trace:9195" "name:LC_I_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i_diaeresis" defined at a-chlat1.ads:276, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i_diaeresis
 use import "_gnatprove_standard".Main

 function lc_i_diaeresis #"a-chlat1.ads" 276 0 0#"model" "model_trace:9208" "name:LC_I_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_icelandic_eth" defined at a-chlat1.ads:279, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_icelandic_eth
 use import "_gnatprove_standard".Main

 function lc_icelandic_eth #"a-chlat1.ads" 279 0 0#"model" "model_trace:9221" "name:LC_Icelandic_Eth" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_n_tilde" defined at a-chlat1.ads:280, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_n_tilde
 use import "_gnatprove_standard".Main

 function lc_n_tilde #"a-chlat1.ads" 280 0 0#"model" "model_trace:9234" "name:LC_N_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_grave" defined at a-chlat1.ads:281, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_grave
 use import "_gnatprove_standard".Main

 function lc_o_grave #"a-chlat1.ads" 281 0 0#"model" "model_trace:9247" "name:LC_O_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_acute" defined at a-chlat1.ads:282, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_acute
 use import "_gnatprove_standard".Main

 function lc_o_acute #"a-chlat1.ads" 282 0 0#"model" "model_trace:9260" "name:LC_O_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_circumflex" defined at a-chlat1.ads:283, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_circumflex
 use import "_gnatprove_standard".Main

 function lc_o_circumflex #"a-chlat1.ads" 283 0 0#"model" "model_trace:9273" "name:LC_O_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_tilde" defined at a-chlat1.ads:284, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_tilde
 use import "_gnatprove_standard".Main

 function lc_o_tilde #"a-chlat1.ads" 284 0 0#"model" "model_trace:9286" "name:LC_O_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_diaeresis" defined at a-chlat1.ads:285, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_diaeresis
 use import "_gnatprove_standard".Main

 function lc_o_diaeresis #"a-chlat1.ads" 285 0 0#"model" "model_trace:9299" "name:LC_O_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "division_sign" defined at a-chlat1.ads:286, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__division_sign
 use import "_gnatprove_standard".Main

 function division_sign #"a-chlat1.ads" 286 0 0#"model" "model_trace:9312" "name:Division_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_oblique_stroke" defined at a-chlat1.ads:287, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_oblique_stroke
 use import "_gnatprove_standard".Main

 function lc_o_oblique_stroke #"a-chlat1.ads" 287 0 0#"model" "model_trace:9325" "name:LC_O_Oblique_Stroke" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u_grave" defined at a-chlat1.ads:288, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u_grave
 use import "_gnatprove_standard".Main

 function lc_u_grave #"a-chlat1.ads" 288 0 0#"model" "model_trace:9338" "name:LC_U_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u_acute" defined at a-chlat1.ads:289, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u_acute
 use import "_gnatprove_standard".Main

 function lc_u_acute #"a-chlat1.ads" 289 0 0#"model" "model_trace:9351" "name:LC_U_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u_circumflex" defined at a-chlat1.ads:290, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u_circumflex
 use import "_gnatprove_standard".Main

 function lc_u_circumflex #"a-chlat1.ads" 290 0 0#"model" "model_trace:9364" "name:LC_U_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u_diaeresis" defined at a-chlat1.ads:291, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u_diaeresis
 use import "_gnatprove_standard".Main

 function lc_u_diaeresis #"a-chlat1.ads" 291 0 0#"model" "model_trace:9377" "name:LC_U_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_y_acute" defined at a-chlat1.ads:292, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_y_acute
 use import "_gnatprove_standard".Main

 function lc_y_acute #"a-chlat1.ads" 292 0 0#"model" "model_trace:9390" "name:LC_Y_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_icelandic_thorn" defined at a-chlat1.ads:293, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_icelandic_thorn
 use import "_gnatprove_standard".Main

 function lc_icelandic_thorn #"a-chlat1.ads" 293 0 0#"model" "model_trace:9403" "name:LC_Icelandic_Thorn" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_y_diaeresis" defined at a-chlat1.ads:294, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_y_diaeresis
 use import "_gnatprove_standard".Main

 function lc_y_diaeresis #"a-chlat1.ads" 294 0 0#"model" "model_trace:9416" "name:LC_Y_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "returncode" defined at machine.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Machine__returncode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type returncode 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = returncode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type returncode__ref =
  { mutable returncode__content "model_trace:" "name:" : returncode }
 
 function returncode__ref___projection 
   (a : returncode__ref) : returncode =
  a.returncode__content
 
 meta "model_projection" function returncode__ref___projection
 
 meta "inline : no" function returncode__ref___projection
 
 val returncode__havoc 
   (x : returncode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "returncode" defined at machine.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Machine__returncode__rep
 use        Machine__returncode
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__returncode.returncode, 
 predicate in_range = Machine__returncode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "max_program_length" defined at machine.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__max_program_length
 use import "_gnatprove_standard".Main

 function max_program_length #"machine.ads" 15 0 0#"model" "model_trace:5830" "name:MAX_PROGRAM_LENGTH" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "TprogramcounterB" defined at machine.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Machine__TprogramcounterB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tprogramcounterB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tprogramcounterB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tprogramcounterB__ref =
  { mutable tprogramcounterB__content "model_trace:" "name:" : tprogramcounterB }
 
 function tprogramcounterB__ref___projection 
   (a : tprogramcounterB__ref) : tprogramcounterB =
  a.tprogramcounterB__content
 
 meta "model_projection" function tprogramcounterB__ref___projection
 
 meta "inline : no" function tprogramcounterB__ref___projection
 
 val tprogramcounterB__havoc 
   (x : tprogramcounterB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TprogramcounterB" defined at machine.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Machine__TprogramcounterB__rep
 use        Machine__TprogramcounterB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__TprogramcounterB.tprogramcounterB) : int =
  (Machine__TprogramcounterB.tprogramcounterB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__TprogramcounterB.tprogramcounterB, 
 predicate in_range = Machine__TprogramcounterB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "programcounter" defined at machine.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Machine__programcounter
 use import "_gnatprove_standard".Main
 use import "int".Int

 type programcounter =
  < range 1 65536 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  65536
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = programcounter, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type programcounter__ref =
  { mutable programcounter__content "model_trace:" "name:" : programcounter }
 
 function programcounter__ref___projection 
   (a : programcounter__ref) : programcounter =
  a.programcounter__content
 
 meta "model_projection" function programcounter__ref___projection
 
 meta "inline : no" function programcounter__ref___projection
 
 val programcounter__havoc 
   (x : programcounter__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "programcounter" defined at machine.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Machine__programcounter__rep
 use        Machine__programcounter
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__programcounter.programcounter) : int =
  (Machine__programcounter.programcounter'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__programcounter.programcounter, 
 predicate in_range = Machine__programcounter.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TprogramB" defined at machine.ads:22, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Instruction__instr
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__instr

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Instruction__instr.instr
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Instruction__instr.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154))) = True)) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Instruction__instr.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154))) = True)) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TprogramB" defined at machine.ads:22, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Instruction__instr__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Instruction__instr

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Instruction__instr.component_type, 
 type map = Array__Int__Instruction__instr.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Instruction__instr.get

end

(* Module for axiomatizing type "TprogramB" defined at machine.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Machine__TprogramB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__instr
 use        Machine__TprogramcounterB
 use        Machine__TprogramcounterB__rep
 use        Machine__programcounter
 use        Array__Int__Instruction__instr

 type component_type =
  Instruction__instr.instr
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Instruction__instr.map, 
 function array_bool_eq = Array__Int__Instruction__instr.bool_eq, 
 type index_base_type = Machine__TprogramcounterB.tprogramcounterB, 
 type index_rep_type = int, 
 function to_rep = Machine__TprogramcounterB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Machine__TprogramcounterB.in_range, 
 predicate index_dynamic_property = Machine__programcounter.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tprogramB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tprogramB__ref =
  { mutable tprogramB__content "model_trace:" "name:" : tprogramB }
 
 function tprogramB__ref___projection 
   (a : tprogramB__ref) : tprogramB =
  a.tprogramB__content
 
 meta "model_projection" function tprogramB__ref___projection
 
 meta "inline : no" function tprogramB__ref___projection
 
 val tprogramB__havoc 
   (x : tprogramB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "program" defined at machine.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Machine__program
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__instr
 use        Array__Int__Instruction__instr

 type component_type =
  Instruction__instr.instr
 
 function first 
   : int =
  1
 
 function last 
   : int =
  65536
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Instruction__instr.map, 
 function array_bool_eq = Array__Int__Instruction__instr.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "prog" defined at machine.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__prog
 use import "_gnatprove_standard".Main
 use        Array__Int__Instruction__instr

 function prog #"machine.ads" 35 0 0#"model_projected" "model_trace:5872" "name:Prog" 
   : Array__Int__Instruction__instr.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "prog" defined at machine.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__executeprogram__prog___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycles" defined at machine.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__cycles
 use import "_gnatprove_standard".Main

 function cycles #"machine.ads" 36 0 0#"model" "model_trace:5881" "name:Cycles" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycles" defined at machine.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__executeprogram__cycles___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "prog" defined at machine.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__prog
 use import "_gnatprove_standard".Main
 use        Array__Int__Instruction__instr

 function prog #"machine.ads" 47 0 0#"model_projected" "name:Prog" "model_trace:5917" 
   : Array__Int__Instruction__instr.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "prog" defined at machine.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__prog___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycles" defined at machine.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__cycles
 use import "_gnatprove_standard".Main

 function cycles #"machine.ads" 48 0 0#"model" "name:Cycles" "model_trace:5926" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycles" defined at machine.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__cycles___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "TdatavalB" defined at machine.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Machine__TdatavalB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tdatavalB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tdatavalB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tdatavalB__ref =
  { mutable tdatavalB__content "model_trace:" "name:" : tdatavalB }
 
 function tdatavalB__ref___projection 
   (a : tdatavalB__ref) : tdatavalB =
  a.tdatavalB__content
 
 meta "model_projection" function tdatavalB__ref___projection
 
 meta "inline : no" function tdatavalB__ref___projection
 
 val tdatavalB__havoc 
   (x : tdatavalB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TdatavalB" defined at machine.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Machine__TdatavalB__rep
 use        Machine__TdatavalB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__TdatavalB.tdatavalB) : int =
  (Machine__TdatavalB.tdatavalB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__TdatavalB.tdatavalB, 
 predicate in_range = Machine__TdatavalB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "dataval" defined at machine.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Machine__dataval
 use import "_gnatprove_standard".Main
 use import "int".Int

 type dataval =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = dataval, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type dataval__ref =
  { mutable dataval__content "model_trace:" "name:" : dataval }
 
 function dataval__ref___projection 
   (a : dataval__ref) : dataval =
  a.dataval__content
 
 meta "model_projection" function dataval__ref___projection
 
 meta "inline : no" function dataval__ref___projection
 
 val dataval__havoc 
   (x : dataval__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "dataval" defined at machine.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Machine__dataval__rep
 use        Machine__dataval
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__dataval.dataval) : int =
  (Machine__dataval.dataval'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__dataval.dataval, 
 predicate in_range = Machine__dataval.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TregsB" defined at machine.adb:14, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Machine__dataval
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval
 use        Machine__dataval__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Machine__dataval.dataval
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_155   : int.
   (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
    ((Machine__dataval__rep.to_rep (get a temp___idx_155)) = (Machine__dataval__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_155   : int.
    (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
     ((Machine__dataval__rep.to_rep (get a temp___idx_155)) = (Machine__dataval__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TregsB" defined at machine.adb:14, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Machine__dataval__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Machine__dataval

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Machine__dataval.component_type, 
 type map = Array__Int__Machine__dataval.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Machine__dataval.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TregsB" defined at machine.adb:14, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Machine__dataval_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval__rep
 use        Array__Int__Machine__dataval

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Machine__dataval.component_type, 
 function to_rep = Machine__dataval__rep.to_rep, 
 type map = Array__Int__Machine__dataval.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Machine__dataval.get, 
 function bool_eq = Array__Int__Machine__dataval.bool_eq

end

(* Module for axiomatizing type "TregsB" defined at machine.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Machine__TregsB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__TregB
 use        Instruction__TregB__rep
 use        Instruction__reg
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 type index_base_type = Instruction__TregB.tregB, 
 type index_rep_type = int, 
 function to_rep = Instruction__TregB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Instruction__TregB.in_range, 
 predicate index_dynamic_property = Instruction__reg.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tregsB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tregsB__ref =
  { mutable tregsB__content "model_trace:" "name:" : tregsB }
 
 function tregsB__ref___projection 
   (a : tregsB__ref) : tregsB =
  a.tregsB__content
 
 meta "model_projection" function tregsB__ref___projection
 
 meta "inline : no" function tregsB__ref___projection
 
 val tregsB__havoc 
   (x : tregsB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TregsT" defined at machine.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Machine__TregsT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at machine.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Machine__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3b =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3b" defined at machine.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Machine__T3b__rep
 use        Machine__T3b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__T3b.t3b) : int =
  (Machine__T3b.t3b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__T3b.t3b, 
 predicate in_range = Machine__T3b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T4b" defined at machine.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Machine__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TmemoryB" defined at machine.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Machine__TmemoryB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__TaddrB
 use        Instruction__TaddrB__rep
 use        Instruction__addr
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 type index_base_type = Instruction__TaddrB.taddrB, 
 type index_rep_type = int, 
 function to_rep = Instruction__TaddrB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Instruction__TaddrB.in_range, 
 predicate index_dynamic_property = Instruction__addr.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmemoryB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tmemoryB__ref =
  { mutable tmemoryB__content "model_trace:" "name:" : tmemoryB }
 
 function tmemoryB__ref___projection 
   (a : tmemoryB__ref) : tmemoryB =
  a.tmemoryB__content
 
 meta "model_projection" function tmemoryB__ref___projection
 
 meta "inline : no" function tmemoryB__ref___projection
 
 val tmemoryB__havoc 
   (x : tmemoryB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TmemoryT" defined at machine.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Machine__TmemoryT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7b" defined at machine.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Machine__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t7b =
  < range 0 65535 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t7b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t7b__ref =
  { mutable t7b__content "model_trace:" "name:" : t7b }
 
 function t7b__ref___projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T7b" defined at machine.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Machine__T7b__rep
 use        Machine__T7b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__T7b.t7b) : int =
  (Machine__T7b.t7b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__T7b.t7b, 
 predicate in_range = Machine__T7b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T8b" defined at machine.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Machine__T8b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "offs" defined at machine.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__incpc__offs
 use import "_gnatprove_standard".Main

 function offs #"machine.adb" 22 0 0#"model" "model_trace:10088" "name:Offs" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offs" defined at machine.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__incpc__offs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:33, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__doadd__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 33 0 0#"model" "model_trace:10327" "name:Rd" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__doadd__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs1" defined at machine.adb:34, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__doadd__rs1
 use import "_gnatprove_standard".Main

 function rs1 #"machine.adb" 34 0 0#"model" "model_trace:10334" "name:Rs1" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs1" defined at machine.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__doadd__rs1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs2" defined at machine.adb:35, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__doadd__rs2
 use import "_gnatprove_standard".Main

 function rs2 #"machine.adb" 35 0 0#"model" "model_trace:10341" "name:Rs2" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs2" defined at machine.adb:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__doadd__rs2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:60, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__dosub__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 60 0 0#"model" "name:Rd" "model_trace:10783" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dosub__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs1" defined at machine.adb:61, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__dosub__rs1
 use import "_gnatprove_standard".Main

 function rs1 #"machine.adb" 61 0 0#"model" "name:Rs1" "model_trace:10790" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs1" defined at machine.adb:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dosub__rs1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs2" defined at machine.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__dosub__rs2
 use import "_gnatprove_standard".Main

 function rs2 #"machine.adb" 62 0 0#"model" "name:Rs2" "model_trace:10797" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs2" defined at machine.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dosub__rs2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:86, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__domul__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 86 0 0#"model" "name:Rd" "model_trace:11239" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__domul__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs1" defined at machine.adb:87, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__domul__rs1
 use import "_gnatprove_standard".Main

 function rs1 #"machine.adb" 87 0 0#"model" "name:Rs1" "model_trace:11246" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs1" defined at machine.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__domul__rs1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs2" defined at machine.adb:88, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__domul__rs2
 use import "_gnatprove_standard".Main

 function rs2 #"machine.adb" 88 0 0#"model" "name:Rs2" "model_trace:11253" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs2" defined at machine.adb:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__domul__rs2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:153, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__dodiv__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 153 0 0#"model" "name:Rd" "model_trace:12114" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:153, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dodiv__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs1" defined at machine.adb:154, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__dodiv__rs1
 use import "_gnatprove_standard".Main

 function rs1 #"machine.adb" 154 0 0#"model" "name:Rs1" "model_trace:12121" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs1" defined at machine.adb:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dodiv__rs1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs2" defined at machine.adb:155, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__dodiv__rs2
 use import "_gnatprove_standard".Main

 function rs2 #"machine.adb" 155 0 0#"model" "name:Rs2" "model_trace:12128" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs2" defined at machine.adb:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dodiv__rs2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:171, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__doldr__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 171 0 0#"model" "name:Rd" "model_trace:12426" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__doldr__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs" defined at machine.adb:172, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__doldr__rs
 use import "_gnatprove_standard".Main

 function rs #"machine.adb" 172 0 0#"model" "model_trace:12433" "name:Rs" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs" defined at machine.adb:172, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__doldr__rs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offs" defined at machine.adb:173, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__doldr__offs
 use import "_gnatprove_standard".Main

 function offs #"machine.adb" 173 0 0#"model" "name:Offs" "model_trace:12440" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offs" defined at machine.adb:173, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__doldr__offs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "ra" defined at machine.adb:212, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__dostr__ra
 use import "_gnatprove_standard".Main

 function ra #"machine.adb" 212 0 0#"model" "model_trace:13133" "name:Ra" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ra" defined at machine.adb:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dostr__ra___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offs" defined at machine.adb:213, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__dostr__offs
 use import "_gnatprove_standard".Main

 function offs #"machine.adb" 213 0 0#"model" "name:Offs" "model_trace:13140" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offs" defined at machine.adb:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dostr__offs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rb" defined at machine.adb:214, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__dostr__rb
 use import "_gnatprove_standard".Main

 function rb #"machine.adb" 214 0 0#"model" "model_trace:13147" "name:Rb" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rb" defined at machine.adb:214, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dostr__rb___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:253, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__domov__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 253 0 0#"model" "name:Rd" "model_trace:13838" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:253, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__domov__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offs" defined at machine.adb:254, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__domov__offs
 use import "_gnatprove_standard".Main

 function offs #"machine.adb" 254 0 0#"model" "name:Offs" "model_trace:13845" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offs" defined at machine.adb:254, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__domov__offs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "C9b" defined at machine.adb:282, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C9b
 use import "_gnatprove_standard".Main

 function c9b #"machine.adb" 282 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C10b" defined at machine.adb:282, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C10b
 use import "_gnatprove_standard".Main

 function c10b #"machine.adb" 282 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C11b" defined at machine.adb:282, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C11b
 use import "_gnatprove_standard".Main

 function c11b #"machine.adb" 282 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C17b" defined at machine.adb:289, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C17b
 use import "_gnatprove_standard".Main

 function c17b #"machine.adb" 289 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C18b" defined at machine.adb:289, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C18b
 use import "_gnatprove_standard".Main

 function c18b #"machine.adb" 289 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C19b" defined at machine.adb:289, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C19b
 use import "_gnatprove_standard".Main

 function c19b #"machine.adb" 289 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C25b" defined at machine.adb:296, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C25b
 use import "_gnatprove_standard".Main

 function c25b #"machine.adb" 296 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C26b" defined at machine.adb:296, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C26b
 use import "_gnatprove_standard".Main

 function c26b #"machine.adb" 296 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C27b" defined at machine.adb:296, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C27b
 use import "_gnatprove_standard".Main

 function c27b #"machine.adb" 296 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C33b" defined at machine.adb:303, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C33b
 use import "_gnatprove_standard".Main

 function c33b #"machine.adb" 303 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C34b" defined at machine.adb:303, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C34b
 use import "_gnatprove_standard".Main

 function c34b #"machine.adb" 303 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C35b" defined at machine.adb:303, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C35b
 use import "_gnatprove_standard".Main

 function c35b #"machine.adb" 303 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C41b" defined at machine.adb:310, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C41b
 use import "_gnatprove_standard".Main

 function c41b #"machine.adb" 310 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C42b" defined at machine.adb:310, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C42b
 use import "_gnatprove_standard".Main

 function c42b #"machine.adb" 310 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C43b" defined at machine.adb:310, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C43b
 use import "_gnatprove_standard".Main

 function c43b #"machine.adb" 310 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C49b" defined at machine.adb:317, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C49b
 use import "_gnatprove_standard".Main

 function c49b #"machine.adb" 317 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C50b" defined at machine.adb:317, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C50b
 use import "_gnatprove_standard".Main

 function c50b #"machine.adb" 317 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C51b" defined at machine.adb:317, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C51b
 use import "_gnatprove_standard".Main

 function c51b #"machine.adb" 317 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C57b" defined at machine.adb:324, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C57b
 use import "_gnatprove_standard".Main

 function c57b #"machine.adb" 324 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C58b" defined at machine.adb:324, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C58b
 use import "_gnatprove_standard".Main

 function c58b #"machine.adb" 324 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C66b" defined at machine.adb:335, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C66b
 use import "_gnatprove_standard".Main

 function c66b #"machine.adb" 335 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C69b" defined at machine.adb:338, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__executeprogram__L_1__C69b
 use import "_gnatprove_standard".Main

 function c69b #"machine.adb" 338 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing the array theory associated to type "TregssignedB" defined at machine.adb:358, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Bool
 use import "_gnatprove_standard".Main
 use import "int".Int

 function index_I1_one 
   : int =
  1
 
 type component_type =
  bool
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_156   : int.
   (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
    ((get a temp___idx_156) = (get b ((b__first - a__first) + temp___idx_156)))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_156   : int.
    (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
     ((get a temp___idx_156) = (get b ((b__first - a__first) + temp___idx_156)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TregssignedB" defined at machine.adb:358, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Bool__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Bool.component_type, 
 type map = Array__Int__Bool.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Bool.get

end

(* Module for axiomatizing logical operations for the array theory associated to type "TregssignedB" defined at machine.adb:358, created in Why.Gen.Arrays.Declare_Logical_Operation_Symbols *)
module Array__Int__Bool__Bool_Op
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Standard_Array_Logical_Op_Axioms with
 type map = Array__Int__Bool.map, 
 function get = Array__Int__Bool.get, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one

end

(* Module for axiomatizing comparison for the array theory associated to type "TregssignedB" defined at machine.adb:358, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Bool_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Array__Int__Bool

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Bool.component_type, 
 function to_rep = Boolean.to_int, 
 type map = Array__Int__Bool.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Bool.get, 
 function bool_eq = Array__Int__Bool.bool_eq

end

(* Module for axiomatizing type "TregssignedB" defined at machine.adb:358, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__TregssignedB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__TregB
 use        Instruction__TregB__rep
 use        Instruction__reg
 use        Array__Int__Bool

 type component_type =
  bool
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 type index_base_type = Instruction__TregB.tregB, 
 type index_rep_type = int, 
 function to_rep = Instruction__TregB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Instruction__TregB.in_range, 
 predicate index_dynamic_property = Instruction__reg.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tregssignedB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tregssignedB__ref =
  { mutable tregssignedB__content "model_trace:" "name:" : tregssignedB }
 
 function tregssignedB__ref___projection 
   (a : tregssignedB__ref) : tregssignedB =
  a.tregssignedB__content
 
 meta "model_projection" function tregssignedB__ref___projection
 
 meta "inline : no" function tregssignedB__ref___projection
 
 val tregssignedB__havoc 
   (x : tregssignedB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TregssignedT" defined at machine.adb:358, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__TregssignedT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 type component_type =
  bool
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T77b" defined at machine.adb:358, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T77b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t77b =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t77b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t77b__ref =
  { mutable t77b__content "model_trace:" "name:" : t77b }
 
 function t77b__ref___projection 
   (a : t77b__ref) : t77b =
  a.t77b__content
 
 meta "model_projection" function t77b__ref___projection
 
 meta "inline : no" function t77b__ref___projection
 
 val t77b__havoc 
   (x : t77b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T77b" defined at machine.adb:358, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T77b__rep
 use        Machine__detectinvalidbehaviour__T77b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__detectinvalidbehaviour__T77b.t77b) : int =
  (Machine__detectinvalidbehaviour__T77b.t77b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__detectinvalidbehaviour__T77b.t77b, 
 predicate in_range = Machine__detectinvalidbehaviour__T77b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T78b" defined at machine.adb:358, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T78b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 type component_type =
  bool
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TmemorysignedB" defined at machine.adb:362, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__TmemorysignedB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__TaddrB
 use        Instruction__TaddrB__rep
 use        Instruction__addr
 use        Array__Int__Bool

 type component_type =
  bool
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 type index_base_type = Instruction__TaddrB.taddrB, 
 type index_rep_type = int, 
 function to_rep = Instruction__TaddrB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Instruction__TaddrB.in_range, 
 predicate index_dynamic_property = Instruction__addr.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmemorysignedB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tmemorysignedB__ref =
  { mutable tmemorysignedB__content "model_trace:" "name:" : tmemorysignedB }
 
 function tmemorysignedB__ref___projection 
   (a : tmemorysignedB__ref) : tmemorysignedB =
  a.tmemorysignedB__content
 
 meta "model_projection" function tmemorysignedB__ref___projection
 
 meta "inline : no" function tmemorysignedB__ref___projection
 
 val tmemorysignedB__havoc 
   (x : tmemorysignedB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TmemorysignedT" defined at machine.adb:362, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__TmemorysignedT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 type component_type =
  bool
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T81b" defined at machine.adb:362, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T81b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t81b =
  < range 0 65535 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t81b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t81b__ref =
  { mutable t81b__content "model_trace:" "name:" : t81b }
 
 function t81b__ref___projection 
   (a : t81b__ref) : t81b =
  a.t81b__content
 
 meta "model_projection" function t81b__ref___projection
 
 meta "inline : no" function t81b__ref___projection
 
 val t81b__havoc 
   (x : t81b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T81b" defined at machine.adb:362, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T81b__rep
 use        Machine__detectinvalidbehaviour__T81b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__detectinvalidbehaviour__T81b.t81b) : int =
  (Machine__detectinvalidbehaviour__T81b.t81b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__detectinvalidbehaviour__T81b.t81b, 
 predicate in_range = Machine__detectinvalidbehaviour__T81b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T82b" defined at machine.adb:362, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T82b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 type component_type =
  bool
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Tcheck_regsB" defined at machine.adb:365, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__Tcheck_regsB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__TregB
 use        Instruction__TregB__rep
 use        Instruction__reg
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 type index_base_type = Instruction__TregB.tregB, 
 type index_rep_type = int, 
 function to_rep = Instruction__TregB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Instruction__TregB.in_range, 
 predicate index_dynamic_property = Instruction__reg.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tcheck_regsB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tcheck_regsB__ref =
  { mutable tcheck_regsB__content "model_trace:" "name:" : tcheck_regsB }
 
 function tcheck_regsB__ref___projection 
   (a : tcheck_regsB__ref) : tcheck_regsB =
  a.tcheck_regsB__content
 
 meta "model_projection" function tcheck_regsB__ref___projection
 
 meta "inline : no" function tcheck_regsB__ref___projection
 
 val tcheck_regsB__havoc 
   (x : tcheck_regsB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tcheck_regsT" defined at machine.adb:365, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__Tcheck_regsT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T85b" defined at machine.adb:365, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T85b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t85b =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t85b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t85b__ref =
  { mutable t85b__content "model_trace:" "name:" : t85b }
 
 function t85b__ref___projection 
   (a : t85b__ref) : t85b =
  a.t85b__content
 
 meta "model_projection" function t85b__ref___projection
 
 meta "inline : no" function t85b__ref___projection
 
 val t85b__havoc 
   (x : t85b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T85b" defined at machine.adb:365, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T85b__rep
 use        Machine__detectinvalidbehaviour__T85b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__detectinvalidbehaviour__T85b.t85b) : int =
  (Machine__detectinvalidbehaviour__T85b.t85b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__detectinvalidbehaviour__T85b.t85b, 
 predicate in_range = Machine__detectinvalidbehaviour__T85b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T86b" defined at machine.adb:365, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T86b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Tcheck_memoryB" defined at machine.adb:368, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__Tcheck_memoryB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__TaddrB
 use        Instruction__TaddrB__rep
 use        Instruction__addr
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 type index_base_type = Instruction__TaddrB.taddrB, 
 type index_rep_type = int, 
 function to_rep = Instruction__TaddrB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Instruction__TaddrB.in_range, 
 predicate index_dynamic_property = Instruction__addr.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tcheck_memoryB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tcheck_memoryB__ref =
  { mutable tcheck_memoryB__content "model_trace:" "name:" : tcheck_memoryB }
 
 function tcheck_memoryB__ref___projection 
   (a : tcheck_memoryB__ref) : tcheck_memoryB =
  a.tcheck_memoryB__content
 
 meta "model_projection" function tcheck_memoryB__ref___projection
 
 meta "inline : no" function tcheck_memoryB__ref___projection
 
 val tcheck_memoryB__havoc 
   (x : tcheck_memoryB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tcheck_memoryT" defined at machine.adb:368, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__Tcheck_memoryT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T89b" defined at machine.adb:368, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T89b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t89b =
  < range 0 65535 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t89b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t89b__ref =
  { mutable t89b__content "model_trace:" "name:" : t89b }
 
 function t89b__ref___projection 
   (a : t89b__ref) : t89b =
  a.t89b__content
 
 meta "model_projection" function t89b__ref___projection
 
 meta "inline : no" function t89b__ref___projection
 
 val t89b__havoc 
   (x : t89b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T89b" defined at machine.adb:368, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T89b__rep
 use        Machine__detectinvalidbehaviour__T89b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Machine__detectinvalidbehaviour__T89b.t89b) : int =
  (Machine__detectinvalidbehaviour__T89b.t89b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Machine__detectinvalidbehaviour__T89b.t89b, 
 predicate in_range = Machine__detectinvalidbehaviour__T89b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T90b" defined at machine.adb:368, created in Gnat2Why.Types.Translate_Type *)
module Machine__detectinvalidbehaviour__T90b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval
 use        Array__Int__Machine__dataval

 type component_type =
  Machine__dataval.dataval
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Machine__dataval.map, 
 function array_bool_eq = Array__Int__Machine__dataval.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "rd" defined at machine.adb:382, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkadd__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 382 0 0#"model" "name:Rd" "model_trace:17329" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:382, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkadd__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs1" defined at machine.adb:383, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkadd__rs1
 use import "_gnatprove_standard".Main

 function rs1 #"machine.adb" 383 0 0#"model" "name:Rs1" "model_trace:17336" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs1" defined at machine.adb:383, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkadd__rs1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs2" defined at machine.adb:384, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkadd__rs2
 use import "_gnatprove_standard".Main

 function rs2 #"machine.adb" 384 0 0#"model" "name:Rs2" "model_trace:17343" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs2" defined at machine.adb:384, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkadd__rs2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:409, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checksub__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 409 0 0#"model" "name:Rd" "model_trace:17785" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:409, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checksub__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs1" defined at machine.adb:410, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checksub__rs1
 use import "_gnatprove_standard".Main

 function rs1 #"machine.adb" 410 0 0#"model" "name:Rs1" "model_trace:17792" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs1" defined at machine.adb:410, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checksub__rs1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs2" defined at machine.adb:411, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checksub__rs2
 use import "_gnatprove_standard".Main

 function rs2 #"machine.adb" 411 0 0#"model" "name:Rs2" "model_trace:17799" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs2" defined at machine.adb:411, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checksub__rs2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:436, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkmul__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 436 0 0#"model" "name:Rd" "model_trace:18241" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:436, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkmul__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs1" defined at machine.adb:437, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkmul__rs1
 use import "_gnatprove_standard".Main

 function rs1 #"machine.adb" 437 0 0#"model" "name:Rs1" "model_trace:18248" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs1" defined at machine.adb:437, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkmul__rs1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs2" defined at machine.adb:438, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkmul__rs2
 use import "_gnatprove_standard".Main

 function rs2 #"machine.adb" 438 0 0#"model" "name:Rs2" "model_trace:18255" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs2" defined at machine.adb:438, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkmul__rs2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:504, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkdiv__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 504 0 0#"model" "name:Rd" "model_trace:19116" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:504, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkdiv__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs1" defined at machine.adb:505, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkdiv__rs1
 use import "_gnatprove_standard".Main

 function rs1 #"machine.adb" 505 0 0#"model" "name:Rs1" "model_trace:19123" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs1" defined at machine.adb:505, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkdiv__rs1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs2" defined at machine.adb:506, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkdiv__rs2
 use import "_gnatprove_standard".Main

 function rs2 #"machine.adb" 506 0 0#"model" "name:Rs2" "model_trace:19130" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs2" defined at machine.adb:506, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkdiv__rs2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rd" defined at machine.adb:523, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkldr__rd
 use import "_gnatprove_standard".Main

 function rd #"machine.adb" 523 0 0#"model" "name:Rd" "model_trace:19428" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rd" defined at machine.adb:523, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkldr__rd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rs" defined at machine.adb:524, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkldr__rs
 use import "_gnatprove_standard".Main

 function rs #"machine.adb" 524 0 0#"model" "name:Rs" "model_trace:19435" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rs" defined at machine.adb:524, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkldr__rs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offs" defined at machine.adb:525, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkldr__offs
 use import "_gnatprove_standard".Main

 function offs #"machine.adb" 525 0 0#"model" "name:Offs" "model_trace:19442" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offs" defined at machine.adb:525, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkldr__offs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "ra" defined at machine.adb:584, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkstr__ra
 use import "_gnatprove_standard".Main

 function ra #"machine.adb" 584 0 0#"model" "name:Ra" "model_trace:20183" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ra" defined at machine.adb:584, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkstr__ra___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offs" defined at machine.adb:585, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkstr__offs
 use import "_gnatprove_standard".Main

 function offs #"machine.adb" 585 0 0#"model" "name:Offs" "model_trace:20190" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offs" defined at machine.adb:585, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkstr__offs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "rb" defined at machine.adb:586, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__checkstr__rb
 use import "_gnatprove_standard".Main

 function rb #"machine.adb" 586 0 0#"model" "name:Rb" "model_trace:20197" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "rb" defined at machine.adb:586, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkstr__rb___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "C91b" defined at machine.adb:637, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C91b
 use import "_gnatprove_standard".Main

 function c91b #"machine.adb" 637 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C92b" defined at machine.adb:637, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C92b
 use import "_gnatprove_standard".Main

 function c92b #"machine.adb" 637 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C93b" defined at machine.adb:637, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C93b
 use import "_gnatprove_standard".Main

 function c93b #"machine.adb" 637 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C98b" defined at machine.adb:648, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C98b
 use import "_gnatprove_standard".Main

 function c98b #"machine.adb" 648 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C99b" defined at machine.adb:648, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C99b
 use import "_gnatprove_standard".Main

 function c99b #"machine.adb" 648 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C100b" defined at machine.adb:648, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C100b
 use import "_gnatprove_standard".Main

 function c100b #"machine.adb" 648 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C105b" defined at machine.adb:659, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C105b
 use import "_gnatprove_standard".Main

 function c105b #"machine.adb" 659 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C106b" defined at machine.adb:659, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C106b
 use import "_gnatprove_standard".Main

 function c106b #"machine.adb" 659 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C107b" defined at machine.adb:659, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C107b
 use import "_gnatprove_standard".Main

 function c107b #"machine.adb" 659 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C112b" defined at machine.adb:670, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C112b
 use import "_gnatprove_standard".Main

 function c112b #"machine.adb" 670 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C113b" defined at machine.adb:670, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C113b
 use import "_gnatprove_standard".Main

 function c113b #"machine.adb" 670 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C114b" defined at machine.adb:670, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C114b
 use import "_gnatprove_standard".Main

 function c114b #"machine.adb" 670 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C124b" defined at machine.adb:694, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C124b
 use import "_gnatprove_standard".Main

 function c124b #"machine.adb" 694 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C125b" defined at machine.adb:694, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C125b
 use import "_gnatprove_standard".Main

 function c125b #"machine.adb" 694 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C126b" defined at machine.adb:694, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C126b
 use import "_gnatprove_standard".Main

 function c126b #"machine.adb" 694 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C131b" defined at machine.adb:705, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C131b
 use import "_gnatprove_standard".Main

 function c131b #"machine.adb" 705 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C132b" defined at machine.adb:705, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C132b
 use import "_gnatprove_standard".Main

 function c132b #"machine.adb" 705 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "C133b" defined at machine.adb:705, created in Gnat2Why.Decls.Translate_Constant *)
module Machine__detectinvalidbehaviour__L_2__C133b
 use import "_gnatprove_standard".Main

 function c133b #"machine.adb" 705 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end
(* Module for defining a ref holding the value of variable "inst" defined at instruction.ads:74, created in Gnat2Why.Decls.Translate_Variable *)
module Instruction__generaterandominstr__inst
 use import "_gnatprove_standard".Main
 use        Instruction__instr

 val inst__split_fields #"instruction.ads" 74 0 0#"model_projected" "model_trace:6437" "name:Inst"  : Instruction__instr.__split_fields__ref 
 
 val inst__split_discrs #"instruction.ads" 74 0 0# : Instruction__instr.__split_discrs__ref 
 
 function inst__attr__constrained #"instruction.ads" 74 0 0#
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inst" defined at instruction.ads:74, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__generaterandominstr__inst___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.ads:37, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__executeprogram__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.ads" 37 0 0#"model_projected" "model_trace:5890" "name:Ret"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__executeprogram__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at machine.ads:38, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__executeprogram__result
 use import "_gnatprove_standard".Main

 val result__ #"machine.ads" 38 0 0#"model_projected" "model_trace:5899" "name:Result"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at machine.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__executeprogram__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "regs" defined at machine.adb:14, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__regs
 use import "_gnatprove_standard".Main
 use        Array__Int__Machine__dataval

 val regs #"machine.adb" 14 0 0#"model_projected" "model_trace:2339" "name:Regs"  : Array__Int__Machine__dataval.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "regs" defined at machine.adb:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__regs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "memory" defined at machine.adb:17, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__memory
 use import "_gnatprove_standard".Main
 use        Array__Int__Machine__dataval

 val memory #"machine.adb" 17 0 0#"model_projected" "model_trace:2355" "name:Memory"  : Array__Int__Machine__dataval.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "memory" defined at machine.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__memory___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pc" defined at machine.adb:20, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__pc
 use import "_gnatprove_standard".Main

 val pc #"machine.adb" 20 0 0#"model_projected" "model_trace:2371" "name:PC"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pc" defined at machine.adb:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__pc___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__incpc__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 22 0 0#"model_projected" "name:Ret" "model_trace:10081"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__incpc__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:36, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__doadd__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 36 0 0#"model_projected" "name:Ret" "model_trace:10348"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__doadd__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:63, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__dosub__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 63 0 0#"model_projected" "name:Ret" "model_trace:10804"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dosub__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:89, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__domul__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 89 0 0#"model_projected" "name:Ret" "model_trace:11260"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__domul__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:156, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__dodiv__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 156 0 0#"model_projected" "name:Ret" "model_trace:12135"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:156, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dodiv__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:174, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__doldr__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 174 0 0#"model_projected" "name:Ret" "model_trace:12447"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__doldr__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at machine.adb:175, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__doldr__a
 use import "_gnatprove_standard".Main

 val a #"machine.adb" 175 0 0#"model_projected" "model_trace:3225" "name:A"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at machine.adb:175, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__doldr__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:215, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__dostr__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 215 0 0#"model_projected" "name:Ret" "model_trace:13154"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:215, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dostr__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at machine.adb:216, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__dostr__a
 use import "_gnatprove_standard".Main

 val a #"machine.adb" 216 0 0#"model_projected" "name:A" "model_trace:3476"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at machine.adb:216, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__dostr__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:255, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__domov__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 255 0 0#"model_projected" "name:Ret" "model_trace:13852"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:255, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__domov__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "cyclecount" defined at machine.adb:266, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__executeprogram__cyclecount
 use import "_gnatprove_standard".Main

 val cyclecount #"machine.adb" 266 0 0#"model_projected" "model_trace:3775" "name:CycleCount"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cyclecount" defined at machine.adb:266, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__executeprogram__cyclecount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "inst" defined at machine.adb:267, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__executeprogram__inst
 use import "_gnatprove_standard".Main
 use        Instruction__instr

 val inst__split_fields #"machine.adb" 267 0 0#"model_projected" "name:Inst" "model_trace:3785"  : Instruction__instr.__split_fields__ref 
 
 val inst__split_discrs #"machine.adb" 267 0 0# : Instruction__instr.__split_discrs__ref 
 
 function inst__attr__constrained #"machine.adb" 267 0 0#
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inst" defined at machine.adb:267, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__executeprogram__inst___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at machine.adb:175 instantiated at machine.adb:310, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__executeprogram__L_1__B45b__a
 use import "_gnatprove_standard".Main

 val a #"machine.adb" 175 0 0#"model_projected" "name:A" "model_trace:15550"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at machine.adb:175 instantiated at machine.adb:310, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__executeprogram__L_1__B45b__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at machine.adb:216 instantiated at machine.adb:317, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__executeprogram__L_1__B53b__a
 use import "_gnatprove_standard".Main

 val a #"machine.adb" 216 0 0#"model_projected" "name:A" "model_trace:16024"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at machine.adb:216 instantiated at machine.adb:317, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__executeprogram__L_1__B53b__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "regssigned" defined at machine.adb:358, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__regssigned
 use import "_gnatprove_standard".Main
 use        Array__Int__Bool

 val regssigned #"machine.adb" 358 0 0#"model_projected" "model_trace:4099" "name:RegsSigned"  : Array__Int__Bool.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "regssigned" defined at machine.adb:358, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__regssigned___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "memorysigned" defined at machine.adb:362, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__memorysigned
 use import "_gnatprove_standard".Main
 use        Array__Int__Bool

 val memorysigned #"machine.adb" 362 0 0#"model_projected" "model_trace:4115" "name:MemorySigned"  : Array__Int__Bool.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "memorysigned" defined at machine.adb:362, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__memorysigned___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "check_regs" defined at machine.adb:365, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__check_regs
 use import "_gnatprove_standard".Main
 use        Array__Int__Machine__dataval

 val check_regs #"machine.adb" 365 0 0#"model_projected" "model_trace:4131" "name:Check_Regs"  : Array__Int__Machine__dataval.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "check_regs" defined at machine.adb:365, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__check_regs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "check_memory" defined at machine.adb:368, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__check_memory
 use import "_gnatprove_standard".Main
 use        Array__Int__Machine__dataval

 val check_memory #"machine.adb" 368 0 0#"model_projected" "model_trace:4147" "name:Check_Memory"  : Array__Int__Machine__dataval.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "check_memory" defined at machine.adb:368, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__check_memory___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "check_pc" defined at machine.adb:371, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__check_pc
 use import "_gnatprove_standard".Main

 val check_pc #"machine.adb" 371 0 0#"model_projected" "model_trace:4163" "name:Check_PC"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "check_pc" defined at machine.adb:371, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__check_pc___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:374, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 374 0 0#"model_projected" "name:Ret" "model_trace:4175"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:374, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "cyclecount" defined at machine.adb:377, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__cyclecount
 use import "_gnatprove_standard".Main

 val cyclecount #"machine.adb" 377 0 0#"model_projected" "name:CycleCount" "model_trace:4185"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cyclecount" defined at machine.adb:377, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__cyclecount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "inst" defined at machine.adb:379, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__inst
 use import "_gnatprove_standard".Main
 use        Instruction__instr

 val inst__split_fields #"machine.adb" 379 0 0#"model_projected" "name:Inst" "model_trace:4195"  : Instruction__instr.__split_fields__ref 
 
 val inst__split_discrs #"machine.adb" 379 0 0# : Instruction__instr.__split_discrs__ref 
 
 function inst__attr__constrained #"machine.adb" 379 0 0#
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inst" defined at machine.adb:379, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__inst___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:385, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__checkadd__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 385 0 0#"model_projected" "name:Ret" "model_trace:17350"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:385, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkadd__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:412, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__checksub__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 412 0 0#"model_projected" "name:Ret" "model_trace:17806"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:412, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checksub__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:439, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__checkmul__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 439 0 0#"model_projected" "name:Ret" "model_trace:18262"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:439, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkmul__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:507, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__checkdiv__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 507 0 0#"model_projected" "name:Ret" "model_trace:19137"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:507, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkdiv__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:526, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__checkldr__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 526 0 0#"model_projected" "name:Ret" "model_trace:19449"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:526, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkldr__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at machine.adb:527, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__checkldr__a
 use import "_gnatprove_standard".Main

 val a #"machine.adb" 527 0 0#"model_projected" "name:A" "model_trace:4972"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at machine.adb:527, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkldr__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "ret" defined at machine.adb:587, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__checkstr__ret
 use import "_gnatprove_standard".Main

 val ret #"machine.adb" 587 0 0#"model_projected" "name:Ret" "model_trace:20204"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ret" defined at machine.adb:587, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkstr__ret___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at machine.adb:588, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__checkstr__a
 use import "_gnatprove_standard".Main

 val a #"machine.adb" 588 0 0#"model_projected" "name:A" "model_trace:5244"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at machine.adb:588, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__checkstr__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at machine.adb:527 instantiated at machine.adb:694, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__L_2__B128b__a
 use import "_gnatprove_standard".Main

 val a #"machine.adb" 527 0 0#"model_projected" "name:A" "model_trace:22122"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at machine.adb:527 instantiated at machine.adb:694, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__L_2__B128b__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at machine.adb:588 instantiated at machine.adb:705, created in Gnat2Why.Decls.Translate_Variable *)
module Machine__detectinvalidbehaviour__L_2__B135b__a
 use import "_gnatprove_standard".Main

 val a #"machine.adb" 588 0 0#"model_projected" "name:A" "model_trace:22539"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at machine.adb:588 instantiated at machine.adb:705, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__L_2__B135b__a___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "init" defined at instruction.ads:70, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__init
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "generaterandominstr" defined at instruction.ads:74, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__generaterandominstr
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "debugprintinstr" defined at instruction.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__debugprintinstr
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put" defined at debug.ads:4, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__put
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_line" defined at debug.ads:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__put_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__2" defined at debug.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__put__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_line" defined at debug.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__new_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__3" defined at debug.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__put__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "executeprogram" defined at machine.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Machine__executeprogram
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "detectinvalidbehaviour" defined at machine.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Machine__detectinvalidbehaviour
 use        Machine__regs
 use        Machine__memory
 use import "_gnatprove_standard".Main
 use        Array__Int__Instruction__instr
 use        Array__Int__Machine__dataval
 use        Array__Int__Machine__dataval

 function detectinvalidbehaviour 
   (prog : Array__Int__Instruction__instr.map) (cycles : int) (machine__regs : Array__Int__Machine__dataval.map) (machine__memory : Array__Int__Machine__dataval.map) : bool
 
 predicate detectinvalidbehaviour__function_guard 
   (result : bool) (prog : Array__Int__Instruction__instr.map) (cycles : int) (machine__regs : Array__Int__Machine__dataval.map) (machine__memory : Array__Int__Machine__dataval.map) 

end

(* Module for defining the loop exit exception for the loop "L_1" defined at machine.adb:272, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Machine__executeprogram__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at machine.adb:272, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__executeprogram__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at machine.adb:630, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Machine__detectinvalidbehaviour__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at machine.adb:630, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Machine__detectinvalidbehaviour__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "opcode" defined at instruction.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__opcode___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__opcode

 predicate dynamic_invariant "inline" 
   (temp___expr_161 : int) (temp___is_init_157 : bool) (temp___skip_constant_158 : bool) (temp___do_toplevel_159 : bool) (temp___do_typ_inv_160 : bool)  =
  (if (( temp___is_init_157 \/ (Instruction__opcode.first <= Instruction__opcode.last) )) then (
   (Instruction__opcode.dynamic_property Instruction__opcode.first Instruction__opcode.last temp___expr_161)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_162 : int) (temp___skip_top_level_163 : bool)  =
  true

end

(* Module giving axioms for type "TregB" defined at instruction.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__TregB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "reg" defined at instruction.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__reg___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__reg

 predicate dynamic_invariant "inline" 
   (temp___expr_168 : int) (temp___is_init_164 : bool) (temp___skip_constant_165 : bool) (temp___do_toplevel_166 : bool) (temp___do_typ_inv_167 : bool)  =
  (if (( temp___is_init_164 \/ (Instruction__reg.first <= Instruction__reg.last) )) then (
   (Instruction__reg.dynamic_property Instruction__reg.first Instruction__reg.last temp___expr_168)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_169 : int) (temp___skip_top_level_170 : bool)  =
  true

end

(* Module giving axioms for type "TaddrB" defined at instruction.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__TaddrB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "addr" defined at instruction.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__addr___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__addr

 predicate dynamic_invariant "inline" 
   (temp___expr_175 : int) (temp___is_init_171 : bool) (temp___skip_constant_172 : bool) (temp___do_toplevel_173 : bool) (temp___do_typ_inv_174 : bool)  =
  (if (( temp___is_init_171 \/ (Instruction__addr.first <= Instruction__addr.last) )) then (
   (Instruction__addr.dynamic_property Instruction__addr.first Instruction__addr.last temp___expr_175)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_176 : int) (temp___skip_top_level_177 : bool)  =
  true

end

(* Module giving axioms for type "ToffsetB" defined at instruction.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__ToffsetB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "offset" defined at instruction.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__offset___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__offset

 predicate dynamic_invariant "inline" 
   (temp___expr_182 : int) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool)  =
  (if (( temp___is_init_178 \/ (Instruction__offset.first <= Instruction__offset.last) )) then (
   (Instruction__offset.dynamic_property Instruction__offset.first Instruction__offset.last temp___expr_182)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_183 : int) (temp___skip_top_level_184 : bool)  =
  true

end

(* Module giving axioms for type "instr" defined at instruction.ads:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__instr___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__instr

 predicate dynamic_invariant "inline" 
   (temp___expr_189 : Instruction__instr.instr) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_191 : Instruction__instr.instr) (temp___skip_top_level_192 : bool)  =
  ( ((Instruction__instr.attr__constrained temp___expr_191) = False) /\ (let temp___193 = (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs temp___expr_191)) in (
   ((Instruction__opcode__rep.to_rep (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs temp___expr_191))) = 0)))
   )

end

(* Module giving axioms for type "returncode" defined at machine.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__returncode___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__returncode

 predicate dynamic_invariant "inline" 
   (temp___expr_226 : int) (temp___is_init_222 : bool) (temp___skip_constant_223 : bool) (temp___do_toplevel_224 : bool) (temp___do_typ_inv_225 : bool)  =
  (if (( temp___is_init_222 \/ (Machine__returncode.first <= Machine__returncode.last) )) then (
   (Machine__returncode.dynamic_property Machine__returncode.first Machine__returncode.last temp___expr_226)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_227 : int) (temp___skip_top_level_228 : bool)  =
  true

end

(* Module giving axioms for type "TprogramcounterB" defined at machine.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__TprogramcounterB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "programcounter" defined at machine.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__programcounter___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__programcounter

 predicate dynamic_invariant "inline" 
   (temp___expr_233 : int) (temp___is_init_229 : bool) (temp___skip_constant_230 : bool) (temp___do_toplevel_231 : bool) (temp___do_typ_inv_232 : bool)  =
  (if (( temp___is_init_229 \/ (Machine__programcounter.first <= Machine__programcounter.last) )) then (
   (Machine__programcounter.dynamic_property Machine__programcounter.first Machine__programcounter.last temp___expr_233)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_234 : int) (temp___skip_top_level_235 : bool)  =
  true

end

(* Module giving axioms for type "TprogramB" defined at machine.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__TprogramB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "program" defined at machine.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__program___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__instr
 use        Machine__programcounter
 use        Array__Int__Instruction__instr
 use        Array__Int__Instruction__instr
 use        Array__Int__Instruction__instr

 predicate dynamic_invariant "inline" 
   (temp___expr_240 : Array__Int__Instruction__instr.map) (temp___is_init_236 : bool) (temp___skip_constant_237 : bool) (temp___do_toplevel_238 : bool) (temp___do_typ_inv_239 : bool)  =
  (forall temp___241   : int.
   (if (( (Machine__programcounter.first <= temp___241) /\ (temp___241 <= Machine__programcounter.last) )) then (
    ((Instruction__instr.attr__constrained (Array__Int__Instruction__instr.get temp___expr_240 temp___241)) = False)) else true))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_243 : Array__Int__Instruction__instr.map) (temp___skip_top_level_244 : bool)  =
  (forall temp___245   : int.
   (if (( (Machine__programcounter.first <= temp___245) /\ (temp___245 <= Machine__programcounter.last) )) then (
    (let temp___246 = (Array__Int__Instruction__instr.get temp___expr_243 temp___245) in (
     ( ((Instruction__instr.attr__constrained temp___246) = False) /\ (let temp___247 = (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs (Array__Int__Instruction__instr.get temp___expr_243 temp___245))) in (
      ((Instruction__opcode__rep.to_rep (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs (Array__Int__Instruction__instr.get temp___expr_243 temp___245)))) = 0)))
      )))
   ) else true))

end

(* Module giving axioms for type "TdatavalB" defined at machine.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__TdatavalB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "dataval" defined at machine.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__dataval___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__dataval

 predicate dynamic_invariant "inline" 
   (temp___expr_288 : int) (temp___is_init_284 : bool) (temp___skip_constant_285 : bool) (temp___do_toplevel_286 : bool) (temp___do_typ_inv_287 : bool)  =
  (if (( temp___is_init_284 \/ (Machine__dataval.first <= Machine__dataval.last) )) then (
   (Machine__dataval.dynamic_property Machine__dataval.first Machine__dataval.last temp___expr_288)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_289 : int) (temp___skip_top_level_290 : bool)  =
  true

end

(* Module giving axioms for type "TregsB" defined at machine.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__TregsB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TregsT" defined at machine.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__TregsT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at machine.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at machine.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TmemoryB" defined at machine.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__TmemoryB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TmemoryT" defined at machine.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__TmemoryT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at machine.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__T7b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8b" defined at machine.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__T8b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TregssignedB" defined at machine.adb:358, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__TregssignedB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TregssignedT" defined at machine.adb:358, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__TregssignedT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T77b" defined at machine.adb:358, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__T77b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T78b" defined at machine.adb:358, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__T78b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TmemorysignedB" defined at machine.adb:362, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__TmemorysignedB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TmemorysignedT" defined at machine.adb:362, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__TmemorysignedT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T81b" defined at machine.adb:362, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__T81b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T82b" defined at machine.adb:362, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__T82b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tcheck_regsB" defined at machine.adb:365, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__Tcheck_regsB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tcheck_regsT" defined at machine.adb:365, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__Tcheck_regsT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T85b" defined at machine.adb:365, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__T85b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T86b" defined at machine.adb:365, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__T86b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tcheck_memoryB" defined at machine.adb:368, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__Tcheck_memoryB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tcheck_memoryT" defined at machine.adb:368, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__Tcheck_memoryT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T89b" defined at machine.adb:368, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__T89b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T90b" defined at machine.adb:368, created in Gnat2Why.Types.Generate_Type_Completion *)
module Machine__detectinvalidbehaviour__T90b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at machine.adb:17, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__memory__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Machine__dataval

 function machine__memory__aggregate_def 
   (temp___292 : int) : Array__Int__Machine__dataval.map

end

(* Module for declaring an abstract function for the aggregate at machine.adb:14, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__regs__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Machine__dataval

 function machine__regs__aggregate_def 
   (temp___296 : int) : Array__Int__Machine__dataval.map

end

(* Module for declaring an abstract function for the aggregate at machine.adb:358, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__detectinvalidbehaviour__regssigned__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Bool

 function machine__detectinvalidbehaviour__regssigned__aggregate_def 
   (temp___327 : bool) : Array__Int__Bool.map

end

(* Module for declaring an abstract function for the aggregate at machine.adb:362, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__detectinvalidbehaviour__memorysigned__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Bool

 function machine__detectinvalidbehaviour__memorysigned__aggregate_def 
   (temp___331 : bool) : Array__Int__Bool.map

end

(* Module for declaring an abstract function for the aggregate at machine.adb:365, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__detectinvalidbehaviour__check_regs__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Machine__dataval

 function machine__detectinvalidbehaviour__check_regs__aggregate_def 
   (temp___335 : int) : Array__Int__Machine__dataval.map

end

(* Module for declaring an abstract function for the aggregate at machine.adb:368, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__detectinvalidbehaviour__check_memory__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Machine__dataval

 function machine__detectinvalidbehaviour__check_memory__aggregate_def 
   (temp___339 : int) : Array__Int__Machine__dataval.map

end
(* Module for defining the value of constant "num_regs" defined at instruction.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Instruction__num_regs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__num_regs

 axiom num_regs__def_axiom :
  ((Instruction__num_regs.num_regs ) = 32)

end

(* Module for defining the value of constant "memory_size" defined at instruction.ads:15, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Instruction__memory_size___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__memory_size

 axiom memory_size__def_axiom :
  ((Instruction__memory_size.memory_size ) = 65536)

end

(* Module for defining the value of constant "nul" defined at a-chlat1.ads:25, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__nul___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__nul

 axiom nul__def_axiom :
  ((Ada__characters__latin_1__nul.nul ) = 0)

end

(* Module for defining the value of constant "soh" defined at a-chlat1.ads:26, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__soh___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__soh

 axiom soh__def_axiom :
  ((Ada__characters__latin_1__soh.soh ) = 1)

end

(* Module for defining the value of constant "stx" defined at a-chlat1.ads:27, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__stx___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__stx

 axiom stx__def_axiom :
  ((Ada__characters__latin_1__stx.stx ) = 2)

end

(* Module for defining the value of constant "etx" defined at a-chlat1.ads:28, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__etx___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__etx

 axiom etx__def_axiom :
  ((Ada__characters__latin_1__etx.etx ) = 3)

end

(* Module for defining the value of constant "eot" defined at a-chlat1.ads:29, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__eot___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__eot

 axiom eot__def_axiom :
  ((Ada__characters__latin_1__eot.eot ) = 4)

end

(* Module for defining the value of constant "enq" defined at a-chlat1.ads:30, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__enq___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__enq

 axiom enq__def_axiom :
  ((Ada__characters__latin_1__enq.enq ) = 5)

end

(* Module for defining the value of constant "ack" defined at a-chlat1.ads:31, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ack___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ack

 axiom ack__def_axiom :
  ((Ada__characters__latin_1__ack.ack ) = 6)

end

(* Module for defining the value of constant "bel" defined at a-chlat1.ads:32, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__bel___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__bel

 axiom bel__def_axiom :
  ((Ada__characters__latin_1__bel.bel ) = 7)

end

(* Module for defining the value of constant "bs" defined at a-chlat1.ads:33, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__bs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__bs

 axiom bs__def_axiom :
  ((Ada__characters__latin_1__bs.bs ) = 8)

end

(* Module for defining the value of constant "ht" defined at a-chlat1.ads:34, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ht___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ht

 axiom ht__def_axiom :
  ((Ada__characters__latin_1__ht.ht ) = 9)

end

(* Module for defining the value of constant "lf" defined at a-chlat1.ads:35, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lf___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lf

 axiom lf__def_axiom :
  ((Ada__characters__latin_1__lf.lf ) = 10)

end

(* Module for defining the value of constant "vt" defined at a-chlat1.ads:36, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__vt___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__vt

 axiom vt__def_axiom :
  ((Ada__characters__latin_1__vt.vt ) = 11)

end

(* Module for defining the value of constant "ff" defined at a-chlat1.ads:37, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ff___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ff

 axiom ff__def_axiom :
  ((Ada__characters__latin_1__ff.ff ) = 12)

end

(* Module for defining the value of constant "cr" defined at a-chlat1.ads:38, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__cr___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__cr

 axiom cr__def_axiom :
  ((Ada__characters__latin_1__cr.cr ) = 13)

end

(* Module for defining the value of constant "so" defined at a-chlat1.ads:39, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__so___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__so

 axiom so____def_axiom :
  ((Ada__characters__latin_1__so.so__ ) = 14)

end

(* Module for defining the value of constant "si" defined at a-chlat1.ads:40, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__si___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__si

 axiom si__def_axiom :
  ((Ada__characters__latin_1__si.si ) = 15)

end

(* Module for defining the value of constant "dle" defined at a-chlat1.ads:42, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dle___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dle

 axiom dle__def_axiom :
  ((Ada__characters__latin_1__dle.dle ) = 16)

end

(* Module for defining the value of constant "dc1" defined at a-chlat1.ads:43, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dc1___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dc1

 axiom dc1__def_axiom :
  ((Ada__characters__latin_1__dc1.dc1 ) = 17)

end

(* Module for defining the value of constant "dc2" defined at a-chlat1.ads:44, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dc2___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dc2

 axiom dc2__def_axiom :
  ((Ada__characters__latin_1__dc2.dc2 ) = 18)

end

(* Module for defining the value of constant "dc3" defined at a-chlat1.ads:45, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dc3___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dc3

 axiom dc3__def_axiom :
  ((Ada__characters__latin_1__dc3.dc3 ) = 19)

end

(* Module for defining the value of constant "dc4" defined at a-chlat1.ads:46, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dc4___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dc4

 axiom dc4__def_axiom :
  ((Ada__characters__latin_1__dc4.dc4 ) = 20)

end

(* Module for defining the value of constant "nak" defined at a-chlat1.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__nak___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__nak

 axiom nak__def_axiom :
  ((Ada__characters__latin_1__nak.nak ) = 21)

end

(* Module for defining the value of constant "syn" defined at a-chlat1.ads:48, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__syn___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__syn

 axiom syn__def_axiom :
  ((Ada__characters__latin_1__syn.syn ) = 22)

end

(* Module for defining the value of constant "etb" defined at a-chlat1.ads:49, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__etb___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__etb

 axiom etb__def_axiom :
  ((Ada__characters__latin_1__etb.etb ) = 23)

end

(* Module for defining the value of constant "can" defined at a-chlat1.ads:50, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__can___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__can

 axiom can__def_axiom :
  ((Ada__characters__latin_1__can.can ) = 24)

end

(* Module for defining the value of constant "em" defined at a-chlat1.ads:51, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__em___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__em

 axiom em__def_axiom :
  ((Ada__characters__latin_1__em.em ) = 25)

end

(* Module for defining the value of constant "sub" defined at a-chlat1.ads:52, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__sub___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__sub

 axiom sub__def_axiom :
  ((Ada__characters__latin_1__sub.sub ) = 26)

end

(* Module for defining the value of constant "esc" defined at a-chlat1.ads:53, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__esc___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__esc

 axiom esc__def_axiom :
  ((Ada__characters__latin_1__esc.esc ) = 27)

end

(* Module for defining the value of constant "fs" defined at a-chlat1.ads:54, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__fs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__fs

 axiom fs__def_axiom :
  ((Ada__characters__latin_1__fs.fs ) = 28)

end

(* Module for defining the value of constant "gs" defined at a-chlat1.ads:55, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__gs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__gs

 axiom gs__def_axiom :
  ((Ada__characters__latin_1__gs.gs ) = 29)

end

(* Module for defining the value of constant "rs" defined at a-chlat1.ads:56, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__rs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__rs

 axiom rs__def_axiom :
  ((Ada__characters__latin_1__rs.rs ) = 30)

end

(* Module for defining the value of constant "us" defined at a-chlat1.ads:57, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__us___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__us

 axiom us__def_axiom :
  ((Ada__characters__latin_1__us.us ) = 31)

end

(* Module for defining the value of constant "space" defined at a-chlat1.ads:63, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__space___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__space

 axiom space__def_axiom :
  ((Ada__characters__latin_1__space.space ) = 32)

end

(* Module for defining the value of constant "exclamation" defined at a-chlat1.ads:64, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__exclamation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__exclamation

 axiom exclamation__def_axiom :
  ((Ada__characters__latin_1__exclamation.exclamation ) = 33)

end

(* Module for defining the value of constant "quotation" defined at a-chlat1.ads:65, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__quotation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__quotation

 axiom quotation__def_axiom :
  ((Ada__characters__latin_1__quotation.quotation ) = 34)

end

(* Module for defining the value of constant "number_sign" defined at a-chlat1.ads:66, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__number_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__number_sign

 axiom number_sign__def_axiom :
  ((Ada__characters__latin_1__number_sign.number_sign ) = 35)

end

(* Module for defining the value of constant "dollar_sign" defined at a-chlat1.ads:67, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dollar_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dollar_sign

 axiom dollar_sign__def_axiom :
  ((Ada__characters__latin_1__dollar_sign.dollar_sign ) = 36)

end

(* Module for defining the value of constant "percent_sign" defined at a-chlat1.ads:68, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__percent_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__percent_sign

 axiom percent_sign__def_axiom :
  ((Ada__characters__latin_1__percent_sign.percent_sign ) = 37)

end

(* Module for defining the value of constant "ampersand" defined at a-chlat1.ads:69, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ampersand___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ampersand

 axiom ampersand__def_axiom :
  ((Ada__characters__latin_1__ampersand.ampersand ) = 38)

end

(* Module for defining the value of constant "apostrophe" defined at a-chlat1.ads:70, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__apostrophe___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__apostrophe

 axiom apostrophe__def_axiom :
  ((Ada__characters__latin_1__apostrophe.apostrophe ) = 39)

end

(* Module for defining the value of constant "left_parenthesis" defined at a-chlat1.ads:71, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__left_parenthesis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__left_parenthesis

 axiom left_parenthesis__def_axiom :
  ((Ada__characters__latin_1__left_parenthesis.left_parenthesis ) = 40)

end

(* Module for defining the value of constant "right_parenthesis" defined at a-chlat1.ads:72, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__right_parenthesis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__right_parenthesis

 axiom right_parenthesis__def_axiom :
  ((Ada__characters__latin_1__right_parenthesis.right_parenthesis ) = 41)

end

(* Module for defining the value of constant "asterisk" defined at a-chlat1.ads:73, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__asterisk___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__asterisk

 axiom asterisk__def_axiom :
  ((Ada__characters__latin_1__asterisk.asterisk ) = 42)

end

(* Module for defining the value of constant "plus_sign" defined at a-chlat1.ads:74, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__plus_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__plus_sign

 axiom plus_sign__def_axiom :
  ((Ada__characters__latin_1__plus_sign.plus_sign ) = 43)

end

(* Module for defining the value of constant "comma" defined at a-chlat1.ads:75, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__comma___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__comma

 axiom comma__def_axiom :
  ((Ada__characters__latin_1__comma.comma ) = 44)

end

(* Module for defining the value of constant "hyphen" defined at a-chlat1.ads:76, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__hyphen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__hyphen

 axiom hyphen__def_axiom :
  ((Ada__characters__latin_1__hyphen.hyphen ) = 45)

end

(* Module for defining the value of constant "full_stop" defined at a-chlat1.ads:78, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__full_stop___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__full_stop

 axiom full_stop__def_axiom :
  ((Ada__characters__latin_1__full_stop.full_stop ) = 46)

end

(* Module for defining the value of constant "solidus" defined at a-chlat1.ads:79, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__solidus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__solidus

 axiom solidus__def_axiom :
  ((Ada__characters__latin_1__solidus.solidus ) = 47)

end

(* Module for defining the value of constant "colon" defined at a-chlat1.ads:83, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__colon___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__colon

 axiom colon__def_axiom :
  ((Ada__characters__latin_1__colon.colon ) = 58)

end

(* Module for defining the value of constant "semicolon" defined at a-chlat1.ads:84, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__semicolon___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__semicolon

 axiom semicolon__def_axiom :
  ((Ada__characters__latin_1__semicolon.semicolon ) = 59)

end

(* Module for defining the value of constant "less_than_sign" defined at a-chlat1.ads:85, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__less_than_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__less_than_sign

 axiom less_than_sign__def_axiom :
  ((Ada__characters__latin_1__less_than_sign.less_than_sign ) = 60)

end

(* Module for defining the value of constant "equals_sign" defined at a-chlat1.ads:86, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__equals_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__equals_sign

 axiom equals_sign__def_axiom :
  ((Ada__characters__latin_1__equals_sign.equals_sign ) = 61)

end

(* Module for defining the value of constant "greater_than_sign" defined at a-chlat1.ads:87, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__greater_than_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__greater_than_sign

 axiom greater_than_sign__def_axiom :
  ((Ada__characters__latin_1__greater_than_sign.greater_than_sign ) = 62)

end

(* Module for defining the value of constant "question" defined at a-chlat1.ads:88, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__question___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__question

 axiom question__def_axiom :
  ((Ada__characters__latin_1__question.question ) = 63)

end

(* Module for defining the value of constant "commercial_at" defined at a-chlat1.ads:89, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__commercial_at___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__commercial_at

 axiom commercial_at__def_axiom :
  ((Ada__characters__latin_1__commercial_at.commercial_at ) = 64)

end

(* Module for defining the value of constant "left_square_bracket" defined at a-chlat1.ads:93, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__left_square_bracket___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__left_square_bracket

 axiom left_square_bracket__def_axiom :
  ((Ada__characters__latin_1__left_square_bracket.left_square_bracket ) = 91)

end

(* Module for defining the value of constant "reverse_solidus" defined at a-chlat1.ads:94, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reverse_solidus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reverse_solidus

 axiom reverse_solidus__def_axiom :
  ((Ada__characters__latin_1__reverse_solidus.reverse_solidus ) = 92)

end

(* Module for defining the value of constant "right_square_bracket" defined at a-chlat1.ads:95, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__right_square_bracket___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__right_square_bracket

 axiom right_square_bracket__def_axiom :
  ((Ada__characters__latin_1__right_square_bracket.right_square_bracket ) = 93)

end

(* Module for defining the value of constant "circumflex" defined at a-chlat1.ads:96, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__circumflex

 axiom circumflex__def_axiom :
  ((Ada__characters__latin_1__circumflex.circumflex ) = 94)

end

(* Module for defining the value of constant "low_line" defined at a-chlat1.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__low_line___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__low_line

 axiom low_line__def_axiom :
  ((Ada__characters__latin_1__low_line.low_line ) = 95)

end

(* Module for defining the value of constant "grave" defined at a-chlat1.ads:99, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__grave

 axiom grave__def_axiom :
  ((Ada__characters__latin_1__grave.grave ) = 96)

end

(* Module for defining the value of constant "lc_a" defined at a-chlat1.ads:100, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a

 axiom lc_a__def_axiom :
  ((Ada__characters__latin_1__lc_a.lc_a ) = 97)

end

(* Module for defining the value of constant "lc_b" defined at a-chlat1.ads:101, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_b___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_b

 axiom lc_b__def_axiom :
  ((Ada__characters__latin_1__lc_b.lc_b ) = 98)

end

(* Module for defining the value of constant "lc_c" defined at a-chlat1.ads:102, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_c___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_c

 axiom lc_c__def_axiom :
  ((Ada__characters__latin_1__lc_c.lc_c ) = 99)

end

(* Module for defining the value of constant "lc_d" defined at a-chlat1.ads:103, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_d___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_d

 axiom lc_d__def_axiom :
  ((Ada__characters__latin_1__lc_d.lc_d ) = 100)

end

(* Module for defining the value of constant "lc_e" defined at a-chlat1.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e

 axiom lc_e__def_axiom :
  ((Ada__characters__latin_1__lc_e.lc_e ) = 101)

end

(* Module for defining the value of constant "lc_f" defined at a-chlat1.ads:105, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_f___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_f

 axiom lc_f__def_axiom :
  ((Ada__characters__latin_1__lc_f.lc_f ) = 102)

end

(* Module for defining the value of constant "lc_g" defined at a-chlat1.ads:106, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_g___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_g

 axiom lc_g__def_axiom :
  ((Ada__characters__latin_1__lc_g.lc_g ) = 103)

end

(* Module for defining the value of constant "lc_h" defined at a-chlat1.ads:107, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_h___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_h

 axiom lc_h__def_axiom :
  ((Ada__characters__latin_1__lc_h.lc_h ) = 104)

end

(* Module for defining the value of constant "lc_i" defined at a-chlat1.ads:108, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i

 axiom lc_i__def_axiom :
  ((Ada__characters__latin_1__lc_i.lc_i ) = 105)

end

(* Module for defining the value of constant "lc_j" defined at a-chlat1.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_j___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_j

 axiom lc_j__def_axiom :
  ((Ada__characters__latin_1__lc_j.lc_j ) = 106)

end

(* Module for defining the value of constant "lc_k" defined at a-chlat1.ads:110, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_k___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_k

 axiom lc_k__def_axiom :
  ((Ada__characters__latin_1__lc_k.lc_k ) = 107)

end

(* Module for defining the value of constant "lc_l" defined at a-chlat1.ads:111, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_l___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_l

 axiom lc_l__def_axiom :
  ((Ada__characters__latin_1__lc_l.lc_l ) = 108)

end

(* Module for defining the value of constant "lc_m" defined at a-chlat1.ads:112, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_m___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_m

 axiom lc_m__def_axiom :
  ((Ada__characters__latin_1__lc_m.lc_m ) = 109)

end

(* Module for defining the value of constant "lc_n" defined at a-chlat1.ads:113, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_n___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_n

 axiom lc_n__def_axiom :
  ((Ada__characters__latin_1__lc_n.lc_n ) = 110)

end

(* Module for defining the value of constant "lc_o" defined at a-chlat1.ads:114, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o

 axiom lc_o__def_axiom :
  ((Ada__characters__latin_1__lc_o.lc_o ) = 111)

end

(* Module for defining the value of constant "lc_p" defined at a-chlat1.ads:115, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_p___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_p

 axiom lc_p__def_axiom :
  ((Ada__characters__latin_1__lc_p.lc_p ) = 112)

end

(* Module for defining the value of constant "lc_q" defined at a-chlat1.ads:116, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_q___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_q

 axiom lc_q__def_axiom :
  ((Ada__characters__latin_1__lc_q.lc_q ) = 113)

end

(* Module for defining the value of constant "lc_r" defined at a-chlat1.ads:117, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_r___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_r

 axiom lc_r__def_axiom :
  ((Ada__characters__latin_1__lc_r.lc_r ) = 114)

end

(* Module for defining the value of constant "lc_s" defined at a-chlat1.ads:118, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_s___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_s

 axiom lc_s__def_axiom :
  ((Ada__characters__latin_1__lc_s.lc_s ) = 115)

end

(* Module for defining the value of constant "lc_t" defined at a-chlat1.ads:119, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_t___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_t

 axiom lc_t__def_axiom :
  ((Ada__characters__latin_1__lc_t.lc_t ) = 116)

end

(* Module for defining the value of constant "lc_u" defined at a-chlat1.ads:120, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u

 axiom lc_u__def_axiom :
  ((Ada__characters__latin_1__lc_u.lc_u ) = 117)

end

(* Module for defining the value of constant "lc_v" defined at a-chlat1.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_v___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_v

 axiom lc_v__def_axiom :
  ((Ada__characters__latin_1__lc_v.lc_v ) = 118)

end

(* Module for defining the value of constant "lc_w" defined at a-chlat1.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_w___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_w

 axiom lc_w__def_axiom :
  ((Ada__characters__latin_1__lc_w.lc_w ) = 119)

end

(* Module for defining the value of constant "lc_x" defined at a-chlat1.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_x___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_x

 axiom lc_x__def_axiom :
  ((Ada__characters__latin_1__lc_x.lc_x ) = 120)

end

(* Module for defining the value of constant "lc_y" defined at a-chlat1.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_y___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_y

 axiom lc_y__def_axiom :
  ((Ada__characters__latin_1__lc_y.lc_y ) = 121)

end

(* Module for defining the value of constant "lc_z" defined at a-chlat1.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_z___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_z

 axiom lc_z__def_axiom :
  ((Ada__characters__latin_1__lc_z.lc_z ) = 122)

end

(* Module for defining the value of constant "left_curly_bracket" defined at a-chlat1.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__left_curly_bracket___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__left_curly_bracket

 axiom left_curly_bracket__def_axiom :
  ((Ada__characters__latin_1__left_curly_bracket.left_curly_bracket ) = 123)

end

(* Module for defining the value of constant "vertical_line" defined at a-chlat1.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__vertical_line___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__vertical_line

 axiom vertical_line__def_axiom :
  ((Ada__characters__latin_1__vertical_line.vertical_line ) = 124)

end

(* Module for defining the value of constant "right_curly_bracket" defined at a-chlat1.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__right_curly_bracket___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__right_curly_bracket

 axiom right_curly_bracket__def_axiom :
  ((Ada__characters__latin_1__right_curly_bracket.right_curly_bracket ) = 125)

end

(* Module for defining the value of constant "tilde" defined at a-chlat1.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__tilde

 axiom tilde__def_axiom :
  ((Ada__characters__latin_1__tilde.tilde ) = 126)

end

(* Module for defining the value of constant "del" defined at a-chlat1.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__del___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__del

 axiom del__def_axiom :
  ((Ada__characters__latin_1__del.del ) = 127)

end

(* Module for defining the value of constant "reserved_128" defined at a-chlat1.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reserved_128___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reserved_128

 axiom reserved_128__def_axiom :
  ((Ada__characters__latin_1__reserved_128.reserved_128 ) = 128)

end

(* Module for defining the value of constant "reserved_129" defined at a-chlat1.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reserved_129___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reserved_129

 axiom reserved_129__def_axiom :
  ((Ada__characters__latin_1__reserved_129.reserved_129 ) = 129)

end

(* Module for defining the value of constant "bph" defined at a-chlat1.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__bph___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__bph

 axiom bph__def_axiom :
  ((Ada__characters__latin_1__bph.bph ) = 130)

end

(* Module for defining the value of constant "nbh" defined at a-chlat1.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__nbh___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__nbh

 axiom nbh__def_axiom :
  ((Ada__characters__latin_1__nbh.nbh ) = 131)

end

(* Module for defining the value of constant "reserved_132" defined at a-chlat1.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reserved_132___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reserved_132

 axiom reserved_132__def_axiom :
  ((Ada__characters__latin_1__reserved_132.reserved_132 ) = 132)

end

(* Module for defining the value of constant "nel" defined at a-chlat1.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__nel___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__nel

 axiom nel__def_axiom :
  ((Ada__characters__latin_1__nel.nel ) = 133)

end

(* Module for defining the value of constant "ssa" defined at a-chlat1.ads:147, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ssa___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ssa

 axiom ssa__def_axiom :
  ((Ada__characters__latin_1__ssa.ssa ) = 134)

end

(* Module for defining the value of constant "esa" defined at a-chlat1.ads:148, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__esa___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__esa

 axiom esa__def_axiom :
  ((Ada__characters__latin_1__esa.esa ) = 135)

end

(* Module for defining the value of constant "hts" defined at a-chlat1.ads:149, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__hts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__hts

 axiom hts__def_axiom :
  ((Ada__characters__latin_1__hts.hts ) = 136)

end

(* Module for defining the value of constant "htj" defined at a-chlat1.ads:150, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__htj___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__htj

 axiom htj__def_axiom :
  ((Ada__characters__latin_1__htj.htj ) = 137)

end

(* Module for defining the value of constant "vts" defined at a-chlat1.ads:151, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__vts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__vts

 axiom vts__def_axiom :
  ((Ada__characters__latin_1__vts.vts ) = 138)

end

(* Module for defining the value of constant "pld" defined at a-chlat1.ads:152, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pld___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pld

 axiom pld__def_axiom :
  ((Ada__characters__latin_1__pld.pld ) = 139)

end

(* Module for defining the value of constant "plu" defined at a-chlat1.ads:153, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__plu___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__plu

 axiom plu__def_axiom :
  ((Ada__characters__latin_1__plu.plu ) = 140)

end

(* Module for defining the value of constant "ri" defined at a-chlat1.ads:154, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ri___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ri

 axiom ri__def_axiom :
  ((Ada__characters__latin_1__ri.ri ) = 141)

end

(* Module for defining the value of constant "ss2" defined at a-chlat1.ads:155, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ss2___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ss2

 axiom ss2__def_axiom :
  ((Ada__characters__latin_1__ss2.ss2 ) = 142)

end

(* Module for defining the value of constant "ss3" defined at a-chlat1.ads:156, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ss3___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ss3

 axiom ss3__def_axiom :
  ((Ada__characters__latin_1__ss3.ss3 ) = 143)

end

(* Module for defining the value of constant "dcs" defined at a-chlat1.ads:158, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dcs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dcs

 axiom dcs__def_axiom :
  ((Ada__characters__latin_1__dcs.dcs ) = 144)

end

(* Module for defining the value of constant "pu1" defined at a-chlat1.ads:159, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pu1___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pu1

 axiom pu1__def_axiom :
  ((Ada__characters__latin_1__pu1.pu1 ) = 145)

end

(* Module for defining the value of constant "pu2" defined at a-chlat1.ads:160, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pu2___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pu2

 axiom pu2__def_axiom :
  ((Ada__characters__latin_1__pu2.pu2 ) = 146)

end

(* Module for defining the value of constant "sts" defined at a-chlat1.ads:161, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__sts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__sts

 axiom sts__def_axiom :
  ((Ada__characters__latin_1__sts.sts ) = 147)

end

(* Module for defining the value of constant "cch" defined at a-chlat1.ads:162, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__cch___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__cch

 axiom cch__def_axiom :
  ((Ada__characters__latin_1__cch.cch ) = 148)

end

(* Module for defining the value of constant "mw" defined at a-chlat1.ads:163, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__mw___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__mw

 axiom mw__def_axiom :
  ((Ada__characters__latin_1__mw.mw ) = 149)

end

(* Module for defining the value of constant "spa" defined at a-chlat1.ads:164, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__spa___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__spa

 axiom spa__def_axiom :
  ((Ada__characters__latin_1__spa.spa ) = 150)

end

(* Module for defining the value of constant "epa" defined at a-chlat1.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__epa___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__epa

 axiom epa__def_axiom :
  ((Ada__characters__latin_1__epa.epa ) = 151)

end

(* Module for defining the value of constant "sos" defined at a-chlat1.ads:167, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__sos___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__sos

 axiom sos__def_axiom :
  ((Ada__characters__latin_1__sos.sos ) = 152)

end

(* Module for defining the value of constant "reserved_153" defined at a-chlat1.ads:168, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reserved_153___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reserved_153

 axiom reserved_153__def_axiom :
  ((Ada__characters__latin_1__reserved_153.reserved_153 ) = 153)

end

(* Module for defining the value of constant "sci" defined at a-chlat1.ads:169, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__sci___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__sci

 axiom sci__def_axiom :
  ((Ada__characters__latin_1__sci.sci ) = 154)

end

(* Module for defining the value of constant "csi" defined at a-chlat1.ads:170, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__csi___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__csi

 axiom csi__def_axiom :
  ((Ada__characters__latin_1__csi.csi ) = 155)

end

(* Module for defining the value of constant "st" defined at a-chlat1.ads:171, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__st___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__st

 axiom st__def_axiom :
  ((Ada__characters__latin_1__st.st ) = 156)

end

(* Module for defining the value of constant "osc" defined at a-chlat1.ads:172, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__osc___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__osc

 axiom osc__def_axiom :
  ((Ada__characters__latin_1__osc.osc ) = 157)

end

(* Module for defining the value of constant "pm" defined at a-chlat1.ads:173, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pm___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pm

 axiom pm__def_axiom :
  ((Ada__characters__latin_1__pm.pm ) = 158)

end

(* Module for defining the value of constant "apc" defined at a-chlat1.ads:174, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__apc___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__apc

 axiom apc__def_axiom :
  ((Ada__characters__latin_1__apc.apc ) = 159)

end

(* Module for defining the value of constant "no_break_space" defined at a-chlat1.ads:182, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__no_break_space___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__no_break_space

 axiom no_break_space__def_axiom :
  ((Ada__characters__latin_1__no_break_space.no_break_space ) = 160)

end

(* Module for defining the value of constant "inverted_exclamation" defined at a-chlat1.ads:184, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__inverted_exclamation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__inverted_exclamation

 axiom inverted_exclamation__def_axiom :
  ((Ada__characters__latin_1__inverted_exclamation.inverted_exclamation ) = 161)

end

(* Module for defining the value of constant "cent_sign" defined at a-chlat1.ads:185, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__cent_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__cent_sign

 axiom cent_sign__def_axiom :
  ((Ada__characters__latin_1__cent_sign.cent_sign ) = 162)

end

(* Module for defining the value of constant "pound_sign" defined at a-chlat1.ads:186, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pound_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pound_sign

 axiom pound_sign__def_axiom :
  ((Ada__characters__latin_1__pound_sign.pound_sign ) = 163)

end

(* Module for defining the value of constant "currency_sign" defined at a-chlat1.ads:187, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__currency_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__currency_sign

 axiom currency_sign__def_axiom :
  ((Ada__characters__latin_1__currency_sign.currency_sign ) = 164)

end

(* Module for defining the value of constant "yen_sign" defined at a-chlat1.ads:188, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__yen_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__yen_sign

 axiom yen_sign__def_axiom :
  ((Ada__characters__latin_1__yen_sign.yen_sign ) = 165)

end

(* Module for defining the value of constant "broken_bar" defined at a-chlat1.ads:189, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__broken_bar___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__broken_bar

 axiom broken_bar__def_axiom :
  ((Ada__characters__latin_1__broken_bar.broken_bar ) = 166)

end

(* Module for defining the value of constant "section_sign" defined at a-chlat1.ads:190, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__section_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__section_sign

 axiom section_sign__def_axiom :
  ((Ada__characters__latin_1__section_sign.section_sign ) = 167)

end

(* Module for defining the value of constant "diaeresis" defined at a-chlat1.ads:191, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__diaeresis

 axiom diaeresis__def_axiom :
  ((Ada__characters__latin_1__diaeresis.diaeresis ) = 168)

end

(* Module for defining the value of constant "copyright_sign" defined at a-chlat1.ads:192, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__copyright_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__copyright_sign

 axiom copyright_sign__def_axiom :
  ((Ada__characters__latin_1__copyright_sign.copyright_sign ) = 169)

end

(* Module for defining the value of constant "feminine_ordinal_indicator" defined at a-chlat1.ads:193, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__feminine_ordinal_indicator___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__feminine_ordinal_indicator

 axiom feminine_ordinal_indicator__def_axiom :
  ((Ada__characters__latin_1__feminine_ordinal_indicator.feminine_ordinal_indicator ) = 170)

end

(* Module for defining the value of constant "left_angle_quotation" defined at a-chlat1.ads:194, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__left_angle_quotation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__left_angle_quotation

 axiom left_angle_quotation__def_axiom :
  ((Ada__characters__latin_1__left_angle_quotation.left_angle_quotation ) = 171)

end

(* Module for defining the value of constant "not_sign" defined at a-chlat1.ads:195, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__not_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__not_sign

 axiom not_sign__def_axiom :
  ((Ada__characters__latin_1__not_sign.not_sign ) = 172)

end

(* Module for defining the value of constant "soft_hyphen" defined at a-chlat1.ads:196, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__soft_hyphen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__soft_hyphen

 axiom soft_hyphen__def_axiom :
  ((Ada__characters__latin_1__soft_hyphen.soft_hyphen ) = 173)

end

(* Module for defining the value of constant "registered_trade_mark_sign" defined at a-chlat1.ads:197, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__registered_trade_mark_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__registered_trade_mark_sign

 axiom registered_trade_mark_sign__def_axiom :
  ((Ada__characters__latin_1__registered_trade_mark_sign.registered_trade_mark_sign ) = 174)

end

(* Module for defining the value of constant "macron" defined at a-chlat1.ads:198, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__macron___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__macron

 axiom macron__def_axiom :
  ((Ada__characters__latin_1__macron.macron ) = 175)

end

(* Module for defining the value of constant "degree_sign" defined at a-chlat1.ads:202, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__degree_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__degree_sign

 axiom degree_sign__def_axiom :
  ((Ada__characters__latin_1__degree_sign.degree_sign ) = 176)

end

(* Module for defining the value of constant "plus_minus_sign" defined at a-chlat1.ads:204, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__plus_minus_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__plus_minus_sign

 axiom plus_minus_sign__def_axiom :
  ((Ada__characters__latin_1__plus_minus_sign.plus_minus_sign ) = 177)

end

(* Module for defining the value of constant "superscript_two" defined at a-chlat1.ads:205, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__superscript_two___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__superscript_two

 axiom superscript_two__def_axiom :
  ((Ada__characters__latin_1__superscript_two.superscript_two ) = 178)

end

(* Module for defining the value of constant "superscript_three" defined at a-chlat1.ads:206, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__superscript_three___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__superscript_three

 axiom superscript_three__def_axiom :
  ((Ada__characters__latin_1__superscript_three.superscript_three ) = 179)

end

(* Module for defining the value of constant "acute" defined at a-chlat1.ads:207, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__acute

 axiom acute__def_axiom :
  ((Ada__characters__latin_1__acute.acute ) = 180)

end

(* Module for defining the value of constant "micro_sign" defined at a-chlat1.ads:208, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__micro_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__micro_sign

 axiom micro_sign__def_axiom :
  ((Ada__characters__latin_1__micro_sign.micro_sign ) = 181)

end

(* Module for defining the value of constant "pilcrow_sign" defined at a-chlat1.ads:209, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pilcrow_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pilcrow_sign

 axiom pilcrow_sign__def_axiom :
  ((Ada__characters__latin_1__pilcrow_sign.pilcrow_sign ) = 182)

end

(* Module for defining the value of constant "middle_dot" defined at a-chlat1.ads:211, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__middle_dot___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__middle_dot

 axiom middle_dot__def_axiom :
  ((Ada__characters__latin_1__middle_dot.middle_dot ) = 183)

end

(* Module for defining the value of constant "cedilla" defined at a-chlat1.ads:212, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__cedilla___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__cedilla

 axiom cedilla__def_axiom :
  ((Ada__characters__latin_1__cedilla.cedilla ) = 184)

end

(* Module for defining the value of constant "superscript_one" defined at a-chlat1.ads:213, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__superscript_one___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__superscript_one

 axiom superscript_one__def_axiom :
  ((Ada__characters__latin_1__superscript_one.superscript_one ) = 185)

end

(* Module for defining the value of constant "masculine_ordinal_indicator" defined at a-chlat1.ads:214, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__masculine_ordinal_indicator___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__masculine_ordinal_indicator

 axiom masculine_ordinal_indicator__def_axiom :
  ((Ada__characters__latin_1__masculine_ordinal_indicator.masculine_ordinal_indicator ) = 186)

end

(* Module for defining the value of constant "right_angle_quotation" defined at a-chlat1.ads:215, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__right_angle_quotation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__right_angle_quotation

 axiom right_angle_quotation__def_axiom :
  ((Ada__characters__latin_1__right_angle_quotation.right_angle_quotation ) = 187)

end

(* Module for defining the value of constant "fraction_one_quarter" defined at a-chlat1.ads:216, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__fraction_one_quarter___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__fraction_one_quarter

 axiom fraction_one_quarter__def_axiom :
  ((Ada__characters__latin_1__fraction_one_quarter.fraction_one_quarter ) = 188)

end

(* Module for defining the value of constant "fraction_one_half" defined at a-chlat1.ads:217, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__fraction_one_half___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__fraction_one_half

 axiom fraction_one_half__def_axiom :
  ((Ada__characters__latin_1__fraction_one_half.fraction_one_half ) = 189)

end

(* Module for defining the value of constant "fraction_three_quarters" defined at a-chlat1.ads:218, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__fraction_three_quarters___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__fraction_three_quarters

 axiom fraction_three_quarters__def_axiom :
  ((Ada__characters__latin_1__fraction_three_quarters.fraction_three_quarters ) = 190)

end

(* Module for defining the value of constant "inverted_question" defined at a-chlat1.ads:219, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__inverted_question___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__inverted_question

 axiom inverted_question__def_axiom :
  ((Ada__characters__latin_1__inverted_question.inverted_question ) = 191)

end

(* Module for defining the value of constant "uc_a_grave" defined at a-chlat1.ads:223, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_grave

 axiom uc_a_grave__def_axiom :
  ((Ada__characters__latin_1__uc_a_grave.uc_a_grave ) = 192)

end

(* Module for defining the value of constant "uc_a_acute" defined at a-chlat1.ads:224, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_acute

 axiom uc_a_acute__def_axiom :
  ((Ada__characters__latin_1__uc_a_acute.uc_a_acute ) = 193)

end

(* Module for defining the value of constant "uc_a_circumflex" defined at a-chlat1.ads:225, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_circumflex

 axiom uc_a_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_a_circumflex.uc_a_circumflex ) = 194)

end

(* Module for defining the value of constant "uc_a_tilde" defined at a-chlat1.ads:226, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_tilde

 axiom uc_a_tilde__def_axiom :
  ((Ada__characters__latin_1__uc_a_tilde.uc_a_tilde ) = 195)

end

(* Module for defining the value of constant "uc_a_diaeresis" defined at a-chlat1.ads:227, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_diaeresis

 axiom uc_a_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_a_diaeresis.uc_a_diaeresis ) = 196)

end

(* Module for defining the value of constant "uc_a_ring" defined at a-chlat1.ads:228, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_ring___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_ring

 axiom uc_a_ring__def_axiom :
  ((Ada__characters__latin_1__uc_a_ring.uc_a_ring ) = 197)

end

(* Module for defining the value of constant "uc_ae_diphthong" defined at a-chlat1.ads:229, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_ae_diphthong___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_ae_diphthong

 axiom uc_ae_diphthong__def_axiom :
  ((Ada__characters__latin_1__uc_ae_diphthong.uc_ae_diphthong ) = 198)

end

(* Module for defining the value of constant "uc_c_cedilla" defined at a-chlat1.ads:230, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_c_cedilla___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_c_cedilla

 axiom uc_c_cedilla__def_axiom :
  ((Ada__characters__latin_1__uc_c_cedilla.uc_c_cedilla ) = 199)

end

(* Module for defining the value of constant "uc_e_grave" defined at a-chlat1.ads:231, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_e_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_e_grave

 axiom uc_e_grave__def_axiom :
  ((Ada__characters__latin_1__uc_e_grave.uc_e_grave ) = 200)

end

(* Module for defining the value of constant "uc_e_acute" defined at a-chlat1.ads:232, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_e_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_e_acute

 axiom uc_e_acute__def_axiom :
  ((Ada__characters__latin_1__uc_e_acute.uc_e_acute ) = 201)

end

(* Module for defining the value of constant "uc_e_circumflex" defined at a-chlat1.ads:233, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_e_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_e_circumflex

 axiom uc_e_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_e_circumflex.uc_e_circumflex ) = 202)

end

(* Module for defining the value of constant "uc_e_diaeresis" defined at a-chlat1.ads:234, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_e_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_e_diaeresis

 axiom uc_e_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_e_diaeresis.uc_e_diaeresis ) = 203)

end

(* Module for defining the value of constant "uc_i_grave" defined at a-chlat1.ads:235, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_i_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_i_grave

 axiom uc_i_grave__def_axiom :
  ((Ada__characters__latin_1__uc_i_grave.uc_i_grave ) = 204)

end

(* Module for defining the value of constant "uc_i_acute" defined at a-chlat1.ads:236, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_i_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_i_acute

 axiom uc_i_acute__def_axiom :
  ((Ada__characters__latin_1__uc_i_acute.uc_i_acute ) = 205)

end

(* Module for defining the value of constant "uc_i_circumflex" defined at a-chlat1.ads:237, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_i_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_i_circumflex

 axiom uc_i_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_i_circumflex.uc_i_circumflex ) = 206)

end

(* Module for defining the value of constant "uc_i_diaeresis" defined at a-chlat1.ads:238, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_i_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_i_diaeresis

 axiom uc_i_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_i_diaeresis.uc_i_diaeresis ) = 207)

end

(* Module for defining the value of constant "uc_icelandic_eth" defined at a-chlat1.ads:242, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_icelandic_eth___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_icelandic_eth

 axiom uc_icelandic_eth__def_axiom :
  ((Ada__characters__latin_1__uc_icelandic_eth.uc_icelandic_eth ) = 208)

end

(* Module for defining the value of constant "uc_n_tilde" defined at a-chlat1.ads:243, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_n_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_n_tilde

 axiom uc_n_tilde__def_axiom :
  ((Ada__characters__latin_1__uc_n_tilde.uc_n_tilde ) = 209)

end

(* Module for defining the value of constant "uc_o_grave" defined at a-chlat1.ads:244, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_grave

 axiom uc_o_grave__def_axiom :
  ((Ada__characters__latin_1__uc_o_grave.uc_o_grave ) = 210)

end

(* Module for defining the value of constant "uc_o_acute" defined at a-chlat1.ads:245, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_acute

 axiom uc_o_acute__def_axiom :
  ((Ada__characters__latin_1__uc_o_acute.uc_o_acute ) = 211)

end

(* Module for defining the value of constant "uc_o_circumflex" defined at a-chlat1.ads:246, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_circumflex

 axiom uc_o_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_o_circumflex.uc_o_circumflex ) = 212)

end

(* Module for defining the value of constant "uc_o_tilde" defined at a-chlat1.ads:247, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_tilde

 axiom uc_o_tilde__def_axiom :
  ((Ada__characters__latin_1__uc_o_tilde.uc_o_tilde ) = 213)

end

(* Module for defining the value of constant "uc_o_diaeresis" defined at a-chlat1.ads:248, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_diaeresis

 axiom uc_o_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_o_diaeresis.uc_o_diaeresis ) = 214)

end

(* Module for defining the value of constant "multiplication_sign" defined at a-chlat1.ads:249, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__multiplication_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__multiplication_sign

 axiom multiplication_sign__def_axiom :
  ((Ada__characters__latin_1__multiplication_sign.multiplication_sign ) = 215)

end

(* Module for defining the value of constant "uc_o_oblique_stroke" defined at a-chlat1.ads:250, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_oblique_stroke___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_oblique_stroke

 axiom uc_o_oblique_stroke__def_axiom :
  ((Ada__characters__latin_1__uc_o_oblique_stroke.uc_o_oblique_stroke ) = 216)

end

(* Module for defining the value of constant "uc_u_grave" defined at a-chlat1.ads:251, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_u_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_u_grave

 axiom uc_u_grave__def_axiom :
  ((Ada__characters__latin_1__uc_u_grave.uc_u_grave ) = 217)

end

(* Module for defining the value of constant "uc_u_acute" defined at a-chlat1.ads:252, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_u_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_u_acute

 axiom uc_u_acute__def_axiom :
  ((Ada__characters__latin_1__uc_u_acute.uc_u_acute ) = 218)

end

(* Module for defining the value of constant "uc_u_circumflex" defined at a-chlat1.ads:253, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_u_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_u_circumflex

 axiom uc_u_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_u_circumflex.uc_u_circumflex ) = 219)

end

(* Module for defining the value of constant "uc_u_diaeresis" defined at a-chlat1.ads:254, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_u_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_u_diaeresis

 axiom uc_u_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_u_diaeresis.uc_u_diaeresis ) = 220)

end

(* Module for defining the value of constant "uc_y_acute" defined at a-chlat1.ads:255, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_y_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_y_acute

 axiom uc_y_acute__def_axiom :
  ((Ada__characters__latin_1__uc_y_acute.uc_y_acute ) = 221)

end

(* Module for defining the value of constant "uc_icelandic_thorn" defined at a-chlat1.ads:256, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_icelandic_thorn___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_icelandic_thorn

 axiom uc_icelandic_thorn__def_axiom :
  ((Ada__characters__latin_1__uc_icelandic_thorn.uc_icelandic_thorn ) = 222)

end

(* Module for defining the value of constant "lc_german_sharp_s" defined at a-chlat1.ads:257, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_german_sharp_s___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_german_sharp_s

 axiom lc_german_sharp_s__def_axiom :
  ((Ada__characters__latin_1__lc_german_sharp_s.lc_german_sharp_s ) = 223)

end

(* Module for defining the value of constant "lc_a_grave" defined at a-chlat1.ads:261, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_grave

 axiom lc_a_grave__def_axiom :
  ((Ada__characters__latin_1__lc_a_grave.lc_a_grave ) = 224)

end

(* Module for defining the value of constant "lc_a_acute" defined at a-chlat1.ads:262, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_acute

 axiom lc_a_acute__def_axiom :
  ((Ada__characters__latin_1__lc_a_acute.lc_a_acute ) = 225)

end

(* Module for defining the value of constant "lc_a_circumflex" defined at a-chlat1.ads:263, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_circumflex

 axiom lc_a_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_a_circumflex.lc_a_circumflex ) = 226)

end

(* Module for defining the value of constant "lc_a_tilde" defined at a-chlat1.ads:264, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_tilde

 axiom lc_a_tilde__def_axiom :
  ((Ada__characters__latin_1__lc_a_tilde.lc_a_tilde ) = 227)

end

(* Module for defining the value of constant "lc_a_diaeresis" defined at a-chlat1.ads:265, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_diaeresis

 axiom lc_a_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_a_diaeresis.lc_a_diaeresis ) = 228)

end

(* Module for defining the value of constant "lc_a_ring" defined at a-chlat1.ads:266, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_ring___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_ring

 axiom lc_a_ring__def_axiom :
  ((Ada__characters__latin_1__lc_a_ring.lc_a_ring ) = 229)

end

(* Module for defining the value of constant "lc_ae_diphthong" defined at a-chlat1.ads:267, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_ae_diphthong___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_ae_diphthong

 axiom lc_ae_diphthong__def_axiom :
  ((Ada__characters__latin_1__lc_ae_diphthong.lc_ae_diphthong ) = 230)

end

(* Module for defining the value of constant "lc_c_cedilla" defined at a-chlat1.ads:268, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_c_cedilla___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_c_cedilla

 axiom lc_c_cedilla__def_axiom :
  ((Ada__characters__latin_1__lc_c_cedilla.lc_c_cedilla ) = 231)

end

(* Module for defining the value of constant "lc_e_grave" defined at a-chlat1.ads:269, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e_grave

 axiom lc_e_grave__def_axiom :
  ((Ada__characters__latin_1__lc_e_grave.lc_e_grave ) = 232)

end

(* Module for defining the value of constant "lc_e_acute" defined at a-chlat1.ads:270, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e_acute

 axiom lc_e_acute__def_axiom :
  ((Ada__characters__latin_1__lc_e_acute.lc_e_acute ) = 233)

end

(* Module for defining the value of constant "lc_e_circumflex" defined at a-chlat1.ads:271, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e_circumflex

 axiom lc_e_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_e_circumflex.lc_e_circumflex ) = 234)

end

(* Module for defining the value of constant "lc_e_diaeresis" defined at a-chlat1.ads:272, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e_diaeresis

 axiom lc_e_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_e_diaeresis.lc_e_diaeresis ) = 235)

end

(* Module for defining the value of constant "lc_i_grave" defined at a-chlat1.ads:273, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i_grave

 axiom lc_i_grave__def_axiom :
  ((Ada__characters__latin_1__lc_i_grave.lc_i_grave ) = 236)

end

(* Module for defining the value of constant "lc_i_acute" defined at a-chlat1.ads:274, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i_acute

 axiom lc_i_acute__def_axiom :
  ((Ada__characters__latin_1__lc_i_acute.lc_i_acute ) = 237)

end

(* Module for defining the value of constant "lc_i_circumflex" defined at a-chlat1.ads:275, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i_circumflex

 axiom lc_i_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_i_circumflex.lc_i_circumflex ) = 238)

end

(* Module for defining the value of constant "lc_i_diaeresis" defined at a-chlat1.ads:276, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i_diaeresis

 axiom lc_i_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_i_diaeresis.lc_i_diaeresis ) = 239)

end

(* Module for defining the value of constant "lc_icelandic_eth" defined at a-chlat1.ads:279, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_icelandic_eth___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_icelandic_eth

 axiom lc_icelandic_eth__def_axiom :
  ((Ada__characters__latin_1__lc_icelandic_eth.lc_icelandic_eth ) = 240)

end

(* Module for defining the value of constant "lc_n_tilde" defined at a-chlat1.ads:280, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_n_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_n_tilde

 axiom lc_n_tilde__def_axiom :
  ((Ada__characters__latin_1__lc_n_tilde.lc_n_tilde ) = 241)

end

(* Module for defining the value of constant "lc_o_grave" defined at a-chlat1.ads:281, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_grave

 axiom lc_o_grave__def_axiom :
  ((Ada__characters__latin_1__lc_o_grave.lc_o_grave ) = 242)

end

(* Module for defining the value of constant "lc_o_acute" defined at a-chlat1.ads:282, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_acute

 axiom lc_o_acute__def_axiom :
  ((Ada__characters__latin_1__lc_o_acute.lc_o_acute ) = 243)

end

(* Module for defining the value of constant "lc_o_circumflex" defined at a-chlat1.ads:283, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_circumflex

 axiom lc_o_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_o_circumflex.lc_o_circumflex ) = 244)

end

(* Module for defining the value of constant "lc_o_tilde" defined at a-chlat1.ads:284, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_tilde

 axiom lc_o_tilde__def_axiom :
  ((Ada__characters__latin_1__lc_o_tilde.lc_o_tilde ) = 245)

end

(* Module for defining the value of constant "lc_o_diaeresis" defined at a-chlat1.ads:285, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_diaeresis

 axiom lc_o_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_o_diaeresis.lc_o_diaeresis ) = 246)

end

(* Module for defining the value of constant "division_sign" defined at a-chlat1.ads:286, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__division_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__division_sign

 axiom division_sign__def_axiom :
  ((Ada__characters__latin_1__division_sign.division_sign ) = 247)

end

(* Module for defining the value of constant "lc_o_oblique_stroke" defined at a-chlat1.ads:287, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_oblique_stroke___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_oblique_stroke

 axiom lc_o_oblique_stroke__def_axiom :
  ((Ada__characters__latin_1__lc_o_oblique_stroke.lc_o_oblique_stroke ) = 248)

end

(* Module for defining the value of constant "lc_u_grave" defined at a-chlat1.ads:288, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u_grave

 axiom lc_u_grave__def_axiom :
  ((Ada__characters__latin_1__lc_u_grave.lc_u_grave ) = 249)

end

(* Module for defining the value of constant "lc_u_acute" defined at a-chlat1.ads:289, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u_acute

 axiom lc_u_acute__def_axiom :
  ((Ada__characters__latin_1__lc_u_acute.lc_u_acute ) = 250)

end

(* Module for defining the value of constant "lc_u_circumflex" defined at a-chlat1.ads:290, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u_circumflex

 axiom lc_u_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_u_circumflex.lc_u_circumflex ) = 251)

end

(* Module for defining the value of constant "lc_u_diaeresis" defined at a-chlat1.ads:291, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u_diaeresis

 axiom lc_u_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_u_diaeresis.lc_u_diaeresis ) = 252)

end

(* Module for defining the value of constant "lc_y_acute" defined at a-chlat1.ads:292, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_y_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_y_acute

 axiom lc_y_acute__def_axiom :
  ((Ada__characters__latin_1__lc_y_acute.lc_y_acute ) = 253)

end

(* Module for defining the value of constant "lc_icelandic_thorn" defined at a-chlat1.ads:293, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_icelandic_thorn___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_icelandic_thorn

 axiom lc_icelandic_thorn__def_axiom :
  ((Ada__characters__latin_1__lc_icelandic_thorn.lc_icelandic_thorn ) = 254)

end

(* Module for defining the value of constant "lc_y_diaeresis" defined at a-chlat1.ads:294, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_y_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_y_diaeresis

 axiom lc_y_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_y_diaeresis.lc_y_diaeresis ) = 255)

end

(* Module for defining the value of constant "max_program_length" defined at machine.ads:15, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__max_program_length___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Machine__max_program_length

 axiom max_program_length__def_axiom :
  ((Machine__max_program_length.max_program_length ) = 65536)

end

(* Module for defining the value of constant "C9b" defined at machine.adb:282, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C9b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C10b" defined at machine.adb:282, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C10b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C11b" defined at machine.adb:282, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C11b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C17b" defined at machine.adb:289, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C17b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C18b" defined at machine.adb:289, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C18b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C19b" defined at machine.adb:289, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C19b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C25b" defined at machine.adb:296, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C25b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C26b" defined at machine.adb:296, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C26b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C27b" defined at machine.adb:296, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C27b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C33b" defined at machine.adb:303, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C33b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C34b" defined at machine.adb:303, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C34b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C35b" defined at machine.adb:303, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C35b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C41b" defined at machine.adb:310, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C41b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C42b" defined at machine.adb:310, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C42b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C43b" defined at machine.adb:310, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C43b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C49b" defined at machine.adb:317, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C49b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C50b" defined at machine.adb:317, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C50b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C51b" defined at machine.adb:317, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C51b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C57b" defined at machine.adb:324, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C57b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C58b" defined at machine.adb:324, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C58b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C66b" defined at machine.adb:335, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C66b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C69b" defined at machine.adb:338, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__executeprogram__L_1__C69b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C91b" defined at machine.adb:637, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C91b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C92b" defined at machine.adb:637, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C92b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C93b" defined at machine.adb:637, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C93b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C98b" defined at machine.adb:648, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C98b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C99b" defined at machine.adb:648, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C99b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C100b" defined at machine.adb:648, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C100b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C105b" defined at machine.adb:659, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C105b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C106b" defined at machine.adb:659, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C106b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C107b" defined at machine.adb:659, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C107b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C112b" defined at machine.adb:670, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C112b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C113b" defined at machine.adb:670, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C113b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C114b" defined at machine.adb:670, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C114b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C124b" defined at machine.adb:694, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C124b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C125b" defined at machine.adb:694, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C125b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C126b" defined at machine.adb:694, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C126b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C131b" defined at machine.adb:705, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C131b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C132b" defined at machine.adb:705, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C132b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "C133b" defined at machine.adb:705, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Machine__detectinvalidbehaviour__L_2__C133b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at instruction.ads:70, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__init___axiom
 use import "_gnatprove_standard".Main

 val init 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "generaterandominstr" defined at instruction.ads:74, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__generaterandominstr___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__instr
 use        Instruction__instr___axiom

 val generaterandominstr 
   (inst__split_fields : Instruction__instr.__split_fields__ref) (inst__split_discrs : Instruction__instr.__split_discrs__ref) (inst__attr__constrained : bool) : unit
  requires {  true }
  ensures {  (Instruction__instr___axiom.dynamic_invariant { Instruction__instr.__split_fields = inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = inst__attr__constrained } True True True True) }
  writes {inst__split_fields, inst__split_discrs}

end

(* Module for declaring a program function (and possibly an axiom) for "debugprintinstr" defined at instruction.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__debugprintinstr___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__instr

 val debugprintinstr 
   (inst : Instruction__instr.instr) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at debug.ads:4, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__put___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at debug.ads:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__put_line___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put_line 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at debug.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__put__2___axiom
 use import "_gnatprove_standard".Main

 val put__2 
   (item : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "new_line" defined at debug.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__new_line___axiom
 use import "_gnatprove_standard".Main

 val new_line 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__3" defined at debug.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__put__3___axiom
 use import "_gnatprove_standard".Main

 val put__3 
   (item : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "executeprogram" defined at machine.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Machine__executeprogram___axiom
 use        Machine__regs
 use        Machine__memory
 use        Machine__pc
 use import "_gnatprove_standard".Main
 use        Standard__integer___axiom
 use        Machine__returncode___axiom
 use        Machine__programcounter___axiom
 use        Machine__regs
 use        Machine__memory
 use        Machine__pc
 use        Array__Int__Instruction__instr

 val executeprogram 
   (prog : Array__Int__Instruction__instr.map) (cycles : int) (ret : int__ref) (result__ : int__ref) : unit
  requires {  true }
  ensures {  ( ( (Machine__returncode___axiom.dynamic_invariant ret.int__content True True True True) /\ (Standard__integer___axiom.dynamic_invariant result__.int__content True True True True) ) /\ (Machine__programcounter___axiom.dynamic_invariant Machine__pc.pc.int__content True True True True) ) }
  reads {Machine__regs.regs, Machine__memory.memory}
  writes {Machine__regs.regs, Machine__memory.memory, Machine__pc.pc, ret, result__}

end

(* Module for declaring a program function (and possibly an axiom) for "detectinvalidbehaviour" defined at machine.ads:47, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Machine__detectinvalidbehaviour___axiom
 use        Machine__regs
 use        Machine__memory
 use import "_gnatprove_standard".Main
 use        Machine__detectinvalidbehaviour
 use        Machine__regs
 use        Machine__memory
 use        Array__Int__Machine__dataval
 use        Array__Int__Machine__dataval
 use        Array__Int__Instruction__instr

 val detectinvalidbehaviour 
   (prog : Array__Int__Instruction__instr.map) (cycles : int) : bool
  requires {  true }
  ensures {  ( ( (result = (Machine__detectinvalidbehaviour.detectinvalidbehaviour prog cycles Machine__regs.regs.Array__Int__Machine__dataval.map__content Machine__memory.memory.Array__Int__Machine__dataval.map__content)) /\ (Machine__detectinvalidbehaviour.detectinvalidbehaviour__function_guard result prog cycles Machine__regs.regs.Array__Int__Machine__dataval.map__content Machine__memory.memory.Array__Int__Machine__dataval.map__content) ) /\ true ) }
  reads {Machine__regs.regs, Machine__memory.memory}

end

(* Module for defining the value of the aggregate at machine.adb:17, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__memory__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Machine__dataval
 use        Machine__dataval___axiom
 use        Array__Int__Machine__dataval
 use        Machine__memory__aggregate_def
 use        Array__Int__Machine__dataval

 axiom def_axiom :
  (forall temp___292   : int.
   (let temp___291 = (Machine__memory__aggregate_def.machine__memory__aggregate_def temp___292) in (
    (if ((Machine__dataval___axiom.dynamic_invariant temp___292 True True True True)) then (
     (forall temp___293   : int.
      ((Array__Int__Machine__dataval.get temp___291 temp___293) = ( 0 : Machine__dataval.dataval )))) else true)))
  )

end

(* Module for defining the value of the aggregate at machine.adb:14, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__regs__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Machine__dataval
 use        Machine__dataval___axiom
 use        Array__Int__Machine__dataval
 use        Machine__regs__aggregate_def
 use        Array__Int__Machine__dataval

 axiom def_axiom :
  (forall temp___296   : int.
   (let temp___295 = (Machine__regs__aggregate_def.machine__regs__aggregate_def temp___296) in (
    (if ((Machine__dataval___axiom.dynamic_invariant temp___296 True True True True)) then (
     (forall temp___297   : int.
      ((Array__Int__Machine__dataval.get temp___295 temp___297) = ( 0 : Machine__dataval.dataval )))) else true)))
  )

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "machine" defined at machine.ads:4, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Machine__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Machine__max_program_length
 use        Machine__programcounter___axiom
 use        Machine__regs
 use        Machine__memory
 use        Machine__pc
 use        Array__Int__Machine__dataval
 use        Machine__memory__aggregate_def
 use        Array__Int__Machine__dataval
 use        Array__Int__Machine__dataval
 use        Machine__regs__aggregate_def
 use        Array__Int__Machine__dataval
 use        Standard__integer___axiom
 use        Machine__dataval___axiom
 use        Machine__regs___axiom
 use        Machine__regs__aggregate_def___axiom
 use        Machine__memory___axiom
 use        Machine__memory__aggregate_def___axiom
 use        Machine__pc___axiom
 use        Machine__max_program_length___axiom
 use        Machine__programcounter___axiom

 let def #"machine.ads" 4 0 0#"GP_Subp:machine.ads:4" "W:diverges:N" 
   (__void_param : unit)
  requires { #"machine.ads" 4 0 0# true }
  ensures { #"machine.ads" 4 0 0# true }
   =
  ( (#"machine.ads" 4 0 0# ());
  (#"machine.ads" 12 0 0# ());
  (#"machine.ads" 15 0 0# ( #"machine.ads" 15 0 0# abstract ensures {true}(let _ = 65536 in (
   ()))
   end ;
  #"machine.ads" 15 0 0# assume { #"machine.ads" 15 0 0# (Standard__integer___axiom.dynamic_invariant Machine__max_program_length.max_program_length True False True True) } ));
  (#"machine.ads" 19 0 0# ());
  (#"machine.ads" 22 0 0# ());
  (#"machine.ads" 35 0 0# ());
  (#"machine.ads" 47 0 0# ());
  (#"machine.ads" 47 0 0# ());
  (#"machine.ads" 47 0 0# ());
  (#"machine.ads" 47 0 0# ());
  (#"machine.ads" 47 0 0# ());
  (#"machine.ads" 47 0 0# ());
  (#"machine.ads" 47 0 0# ());
  (#"machine.ads" 47 0 0# ());
  (#"machine.adb" 8 0 0# ());
  (#"machine.adb" 11 0 0# ());
  (#"machine.adb" 14 0 0# ());
  (#"machine.adb" 14 0 0# ());
  (#"machine.adb" 14 0 0# ());
  (#"machine.adb" 14 0 0# ());
  (#"machine.adb" 14 0 0# #"machine.adb" 14 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Machine__regs__aggregate_def.machine__regs__aggregate_def(0)) ));
  (#"machine.adb" 17 0 0# ());
  (#"machine.adb" 17 0 0# ());
  (#"machine.adb" 17 0 0# #"machine.adb" 17 0 0# Machine__memory.memory.Array__Int__Machine__dataval.map__content <- ( (Machine__memory__aggregate_def.machine__memory__aggregate_def(0)) ));
  (#"machine.adb" 20 0 0# ( #"machine.adb" 20 0 0# Machine__pc.pc.int__content <- ( 1 );
  #"machine.adb" 20 0 0# assume { #"machine.adb" 20 0 0# (Machine__programcounter___axiom.dynamic_invariant Machine__pc.pc.int__content True False True True) } ));
  (#"machine.adb" 22 0 0# ());
  (#"machine.adb" 22 0 0# ());
  (#"machine.adb" 22 0 0# ());
  (#"machine.adb" 33 0 0# ());
  (#"machine.adb" 33 0 0# ());
  (#"machine.adb" 33 0 0# ());
  (#"machine.adb" 60 0 0# ());
  (#"machine.adb" 60 0 0# ());
  (#"machine.adb" 60 0 0# ());
  (#"machine.adb" 86 0 0# ());
  (#"machine.adb" 86 0 0# ());
  (#"machine.adb" 86 0 0# ());
  (#"machine.adb" 153 0 0# ());
  (#"machine.adb" 153 0 0# ());
  (#"machine.adb" 153 0 0# ());
  (#"machine.adb" 171 0 0# ());
  (#"machine.adb" 171 0 0# ());
  (#"machine.adb" 171 0 0# ());
  (#"machine.adb" 212 0 0# ());
  (#"machine.adb" 212 0 0# ());
  (#"machine.adb" 212 0 0# ());
  (#"machine.adb" 253 0 0# ());
  (#"machine.adb" 253 0 0# ());
  (#"machine.adb" 253 0 0# ());
  (#"machine.adb" 261 0 0# ());
  (#"machine.adb" 353 0 0# ());
  ( "GP_Sloc:machine.adb:723:1" (#"machine.adb" 723 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "executeprogram" defined at machine.ads:35, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Machine__executeprogram__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Instruction__debugprintinstr___axiom
 use        Debug__put__2___axiom
 use        Debug__new_line___axiom
 use        Debug__put__3___axiom
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__reg
 use        Instruction__reg___axiom
 use        Instruction__reg__rep
 use        Instruction__addr
 use        Instruction__addr___axiom
 use        Instruction__offset
 use        Instruction__offset___axiom
 use        Instruction__offset__rep
 use        Instruction__instr
 use        Instruction__instr___axiom
 use        Machine__returncode___axiom
 use        Machine__programcounter
 use        Machine__programcounter___axiom
 use        Array__Int__Instruction__instr
 use        Machine__program___axiom
 use        Machine__executeprogram__prog
 use        Machine__executeprogram__cycles
 use        Machine__executeprogram__ret
 use        Machine__executeprogram__result
 use        Machine__regs
 use        Machine__memory
 use        Machine__pc
 use        Machine__TdatavalB
 use        Machine__dataval
 use        Machine__dataval__rep
 use        Array__Int__Machine__dataval
 use        Array__Int__Machine__dataval
 use        Array__Int__Machine__dataval
 use        Machine__executeprogram__cyclecount
 use        Machine__executeprogram__inst
 use        Machine__executeprogram__L_1
 use        Machine__executeprogram__L_1__C9b
 use        Machine__executeprogram__L_1__C10b
 use        Machine__executeprogram__L_1__C11b
 use        Machine__executeprogram__L_1__C17b
 use        Machine__executeprogram__L_1__C18b
 use        Machine__executeprogram__L_1__C19b
 use        Machine__executeprogram__L_1__C25b
 use        Machine__executeprogram__L_1__C26b
 use        Machine__executeprogram__L_1__C27b
 use        Machine__executeprogram__L_1__C33b
 use        Machine__executeprogram__L_1__C34b
 use        Machine__executeprogram__L_1__C35b
 use        Machine__executeprogram__L_1__C41b
 use        Machine__executeprogram__L_1__C42b
 use        Machine__executeprogram__L_1__C43b
 use        Machine__executeprogram__L_1__B45b__a
 use        Machine__executeprogram__L_1__C49b
 use        Machine__executeprogram__L_1__C50b
 use        Machine__executeprogram__L_1__C51b
 use        Machine__executeprogram__L_1__B53b__a
 use        Machine__executeprogram__L_1__C57b
 use        Machine__executeprogram__L_1__C58b
 use        Machine__executeprogram__L_1__C66b
 use        Machine__executeprogram__L_1__C69b
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Machine__dataval___axiom
 use        Machine__regs___axiom
 use        Machine__memory___axiom
 use        Machine__pc___axiom
 use        Machine__executeprogram__cyclecount___axiom
 use        Machine__executeprogram__inst___axiom
 use        Machine__executeprogram__L_1___axiom
 use        Machine__returncode___axiom
 use        Machine__programcounter___axiom
 use        Machine__program___axiom
 use        Machine__executeprogram__prog___axiom
 use        Machine__executeprogram__cycles___axiom
 use        Machine__executeprogram__ret___axiom
 use        Machine__executeprogram__result___axiom
 use        Instruction__opcode___axiom
 use        Instruction__reg___axiom
 use        Instruction__addr___axiom
 use        Instruction__offset___axiom
 use        Instruction__instr___axiom
 use        Instruction__debugprintinstr___axiom
 use        Debug__put__2___axiom
 use        Debug__new_line___axiom
 use        Debug__put__3___axiom
 use        Machine__TdatavalB___axiom
 use        Machine__executeprogram__L_1__C9b___axiom
 use        Machine__executeprogram__L_1__C10b___axiom
 use        Machine__executeprogram__L_1__C11b___axiom
 use        Machine__executeprogram__L_1__C17b___axiom
 use        Machine__executeprogram__L_1__C18b___axiom
 use        Machine__executeprogram__L_1__C19b___axiom
 use        Machine__executeprogram__L_1__C25b___axiom
 use        Machine__executeprogram__L_1__C26b___axiom
 use        Machine__executeprogram__L_1__C27b___axiom
 use        Machine__executeprogram__L_1__C33b___axiom
 use        Machine__executeprogram__L_1__C34b___axiom
 use        Machine__executeprogram__L_1__C35b___axiom
 use        Machine__executeprogram__L_1__B45b__a___axiom
 use        Machine__executeprogram__L_1__C41b___axiom
 use        Machine__executeprogram__L_1__C42b___axiom
 use        Machine__executeprogram__L_1__C43b___axiom
 use        Machine__executeprogram__L_1__B53b__a___axiom
 use        Machine__executeprogram__L_1__C49b___axiom
 use        Machine__executeprogram__L_1__C50b___axiom
 use        Machine__executeprogram__L_1__C51b___axiom
 use        Machine__executeprogram__L_1__C57b___axiom
 use        Machine__executeprogram__L_1__C58b___axiom
 use        Machine__executeprogram__L_1__C66b___axiom
 use        Machine__executeprogram__L_1__C69b___axiom

 let def #"machine.ads" 35 0 0#"W:diverges:N" "GP_Subp:machine.ads:35" 
   (__void_param : unit)
  requires { #"machine.ads" 35 0 0# true }
  ensures { #"machine.ads" 35 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram machine.ads:35 *)
  ;
  #"machine.ads" 35 0 0# assume { #"machine.ads" 35 0 0# (Machine__programcounter___axiom.dynamic_invariant Machine__pc.pc.int__content False False True True) };
  #"machine.ads" 35 0 0# assume { #"machine.ads" 35 0 0# (Machine__program___axiom.dynamic_invariant Machine__executeprogram__prog.prog True False True True) };
  #"machine.ads" 35 0 0# assume { #"machine.ads" 35 0 0# (Standard__integer___axiom.dynamic_invariant Machine__executeprogram__cycles.cycles True False True True) };
  #"machine.ads" 35 0 0# assume { #"machine.ads" 35 0 0# (Machine__returncode___axiom.dynamic_invariant Machine__executeprogram__ret.ret.int__content False False True True) };
  #"machine.ads" 35 0 0# assume { #"machine.ads" 35 0 0# (Standard__integer___axiom.dynamic_invariant Machine__executeprogram__result.result__.int__content False False True True) };
  #"machine.ads" 35 0 0# assume { #"machine.ads" 35 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram machine.ads:35 *)
  ;
  () (* Check for RTE in the Pre of the subprogram machine.ads:35 *)
  ;
  #"machine.ads" 35 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram machine.ads:35 *)
  ;
  #"machine.ads" 35 0 0# assume { #"machine.ads" 35 0 0# true };
  #"machine.ads" 35 0 0# try
   ( (#"machine.adb" 266 0 0# ( #"machine.adb" 266 0 0# Machine__executeprogram__cyclecount.cyclecount.int__content <- ( 0 );
   #"machine.adb" 266 0 0# assume { #"machine.adb" 266 0 0# (Standard__integer___axiom.dynamic_invariant Machine__executeprogram__cyclecount.cyclecount.int__content True False True True) } ));
   (#"machine.adb" 267 0 0# ( #"machine.adb" 267 0 0# abstract ensures {true}(let _ = #"machine.adb" 267 0 0# abstract ensures {true}(let _ = (let temp___302 = 0 in (
    ()))
    in (
    ()))
    end  in (
    ()))
    end ;
   #"machine.adb" 267 0 0# assume { #"machine.adb" 267 0 0# (Instruction__instr___axiom.default_initial_assumption { Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained } False) };
   #"machine.adb" 267 0 0# assume { #"machine.adb" 267 0 0# (Instruction__instr___axiom.dynamic_invariant { Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained } False False True True) } ));
   (#"machine.adb" 272 0 0# ());
   ( "GP_Sloc:machine.adb:269:11" (#"machine.adb" 269 0 0# #"machine.adb" 269 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) );
   ( "GP_Sloc:machine.adb:270:7" (#"machine.adb" 270 0 0# ()) );
   ( "GP_Sloc:machine.adb:270:10" (#"machine.adb" 270 0 0# #"machine.adb" 270 0 0# Machine__pc.pc.int__content <- ( 1 )) );
   ( "GP_Sloc:machine.adb:271:14" (#"machine.adb" 271 0 0# #"machine.adb" 271 0 0# Machine__executeprogram__result.result__.int__content <- ( 0 )) );
   ( "GP_Sloc:machine.adb:272:53" (#"machine.adb" 272 0 0# ( () (* Translation of an Ada loop from machine.adb:272 *)
   ;
   (if ((Boolean.andb((Machine__executeprogram__cyclecount.cyclecount.int__content < Machine__executeprogram__cycles.cycles)) ((Machine__executeprogram__ret.ret.int__content = 0)))) then (
    #"machine.adb" 272 0 0# try
     ( #"machine.adb" 272 0 0# abstract ensures {true}(let _ = Machine__pc.pc.int__content in (
      ()))
      end ;
     (let temp___317 = #"machine.adb" 272 0 0# (any int
     ensures {#"machine.adb" 272 0 0# (result = Machine__pc.pc.int__content)} 
     ) in (
      ( #"machine.adb" 272 0 0# abstract ensures {true}(let _ = Machine__memory.memory.Array__Int__Machine__dataval.map__content in (
       ()))
       end ;
      (let temp___315 = #"machine.adb" 272 0 0# (any Array__Int__Machine__dataval.map
      ensures {#"machine.adb" 272 0 0# (result = Machine__memory.memory.Array__Int__Machine__dataval.map__content)} 
      ) in (
       ( #"machine.adb" 272 0 0# abstract ensures {true}(let _ = { Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained } in (
        ()))
        end ;
       (let temp___313 = #"machine.adb" 272 0 0# (any Instruction__instr.instr
       ensures {#"machine.adb" 272 0 0# (result = { Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })} 
       ) in (
        ( #"machine.adb" 272 0 0# abstract ensures {true}(let _ = Machine__executeprogram__result.result__.int__content in (
         ()))
         end ;
        (let temp___312 = #"machine.adb" 272 0 0# (any int
        ensures {#"machine.adb" 272 0 0# (result = Machine__executeprogram__result.result__.int__content)} 
        ) in (
         ( #"machine.adb" 272 0 0# abstract ensures {true}(let _ = Machine__executeprogram__cyclecount.cyclecount.int__content in (
          ()))
          end ;
         (let temp___311 = #"machine.adb" 272 0 0# (any int
         ensures {#"machine.adb" 272 0 0# (result = Machine__executeprogram__cyclecount.cyclecount.int__content)} 
         ) in (
          ( #"machine.adb" 272 0 0# abstract ensures {true}(let _ = Machine__executeprogram__ret.ret.int__content in (
           ()))
           end ;
          (let temp___307 = #"machine.adb" 272 0 0# (any int
          ensures {#"machine.adb" 272 0 0# (result = Machine__executeprogram__ret.ret.int__content)} 
          ) in (
           ( #"machine.adb" 272 0 0# abstract ensures {true}(let _ = Machine__regs.regs.Array__Int__Machine__dataval.map__content in (
            ()))
            end ;
           (let temp___309 = #"machine.adb" 272 0 0# (any Array__Int__Machine__dataval.map
           ensures {#"machine.adb" 272 0 0# (result = Machine__regs.regs.Array__Int__Machine__dataval.map__content)} 
           ) in (
            ( () (* First unroling of the loop statements appearing before the loop invariant of loop machine.adb:272 *)
            ;
            () (* While loop translating the Ada loop from machine.adb:272 *)
            ;
            #"machine.adb" 272 0 0# while True do
             ( () (* Assume implicit invariants from the loop machine.adb:272 *)
             ;
             #"machine.adb" 272 0 0# assume { #"machine.adb" 272 0 0# (Boolean.andb(( ( ( ( ( ( ( ( ( ( ( ( ( ( true /\ (Machine__returncode___axiom.dynamic_invariant Machine__executeprogram__ret.ret.int__content False True True True) ) /\ true ) /\ true ) /\ (forall temp___310 #"machine.adb" 272 0 0#  : int.
              (if (( (Instruction__reg.first <= temp___310) /\ (temp___310 <= Instruction__reg.last) )) then (
               (if (( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ false ) ) ) ) ) ) ) ) ) ) ) ) ) )) then (
                ((Array__Int__Machine__dataval.get Machine__regs.regs.Array__Int__Machine__dataval.map__content temp___310) = (Array__Int__Machine__dataval.get temp___309 temp___310))) else (
                true))) else true)) ) /\ (Standard__integer___axiom.dynamic_invariant Machine__executeprogram__cyclecount.cyclecount.int__content False True True True) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Machine__executeprogram__result.result__.int__content False True True True) ) /\ true ) /\ (Instruction__instr___axiom.dynamic_invariant { Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained } False True True True) ) /\ true ) /\ true ) /\ (forall temp___316 #"machine.adb" 272 0 0#  : int.
              (if (( (Instruction__addr.first <= temp___316) /\ (temp___316 <= Instruction__addr.last) )) then (
               (if (( false /\ ( false /\ false ) )) then (
                ((Array__Int__Machine__dataval.get Machine__memory.memory.Array__Int__Machine__dataval.map__content temp___316) = (Array__Int__Machine__dataval.get temp___315 temp___316))) else (
                true))) else true)) ) /\ (Machine__programcounter___axiom.dynamic_invariant Machine__pc.pc.int__content False True True True) ) /\ true )) (( (Machine__executeprogram__cyclecount.cyclecount.int__content < Machine__executeprogram__cycles.cycles) /\ (Machine__executeprogram__ret.ret.int__content = 0) ))) };
             () (* Check for absence of RTE in the invariant of loop machine.adb:272 *)
             ;
             () (* Loop statements appearing after the loop invariant of loop machine.adb:272 *)
             ;
             ( "GP_Sloc:machine.adb:273:10" (#"machine.adb" 273 0 0# ()) );
             ( "GP_Sloc:machine.adb:273:23" (#"machine.adb" 273 0 0# ()) );
             ( "GP_Sloc:machine.adb:273:15" (#"machine.adb" 273 0 0# (let temp___306 = { ( (let temp___304 = (Array__Int__Instruction__instr.get(Machine__executeprogram__prog.prog) (Machine__pc.pc.int__content)) in (
             (let temp___305 = { Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained } in (
              ( #"machine.adb" 273 0 0# assert { #"machine.adb" 273 0 0# (#"machine.adb" 273 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:machine.adb:273:15" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Id:0" "comment:         Inst := Prog(PC);
              ^ machine.adb:273:15:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__inst_assign" (if ((Instruction__instr.attr__constrained temp___305)) then (
               ((Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs temp___304)) = (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs temp___305)))) else true) )) };
              temp___304 )))
             ))
              ) with Instruction__instr.attr__constrained = (Instruction__instr.attr__constrained({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) } in (
              (  Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content <- ( (Instruction__instr.__split_fields(temp___306)) );
               Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content <- ( (Instruction__instr.__split_discrs(temp___306)) ) )))
             ) );
             ( "GP_Sloc:machine.adb:276:10" (#"machine.adb" 276 0 0# ()) );
             ( "GP_Sloc:machine.adb:276:10" (#"machine.adb" 276 0 0# ( (Debug__put__2___axiom.put__2(Machine__pc.pc.int__content)) )) );
             ( "GP_Sloc:machine.adb:276:28" (#"machine.adb" 276 0 0# ()) );
             ( "GP_Sloc:machine.adb:276:28" (#"machine.adb" 276 0 0# ( (Debug__put__3___axiom.put__3(58)) )) );
             ( "GP_Sloc:machine.adb:276:38" (#"machine.adb" 276 0 0# ()) );
             ( "GP_Sloc:machine.adb:276:38" (#"machine.adb" 276 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
             ( "GP_Sloc:machine.adb:277:26" (#"machine.adb" 277 0 0# ()) );
             ( "GP_Sloc:machine.adb:277:10" (#"machine.adb" 277 0 0# ()) );
             ( "GP_Sloc:machine.adb:277:10" (#"machine.adb" 277 0 0# ( (Instruction__debugprintinstr___axiom.debugprintinstr({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )) );
             ( "GP_Sloc:machine.adb:278:10" (#"machine.adb" 278 0 0# ()) );
             ( "GP_Sloc:machine.adb:278:10" (#"machine.adb" 278 0 0# ( (Debug__new_line___axiom.new_line(())) )) );
             ( "GP_Sloc:machine.adb:280:15" (#"machine.adb" 280 0 0# ()) );
             ( "GP_Sloc:machine.adb:280:10" (#"machine.adb" 280 0 0# (if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 1)) then (
              ( ( "GP_Sloc:machine.adb:282:16" (#"machine.adb" 282 0 0# ()) );
              ( "GP_Sloc:machine.adb:282:16" (#"machine.adb" 282 0 0# (#"machine.adb" 282 0 0# ( (let machine__executeprogram__L_1__C9b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 282 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:282:16" "GP_Id:1" "comment:               DoAdd(Inst.AddRd,Inst.AddRs1,Inst.AddRs2,Ret);
               ^ machine.adb:282:16:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__C9b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__addrd_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C9b__assume = Machine__executeprogram__L_1__C9b.c9b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C9b.c9b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:282:16" (#"machine.adb" 282 0 0# (#"machine.adb" 282 0 0# ( (let machine__executeprogram__L_1__C10b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 282 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:282:16" "comment:               DoAdd(Inst.AddRd,Inst.AddRs1,Inst.AddRs2,Ret);
               ^ machine.adb:282:16:VC_DISCRIMINANT_CHECK" "GP_Id:2" "GP_Shape:L_1_while__case__C10b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__addrs1_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C10b__assume = Machine__executeprogram__L_1__C10b.c10b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C10b.c10b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:282:16" (#"machine.adb" 282 0 0# (#"machine.adb" 282 0 0# ( (let machine__executeprogram__L_1__C11b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 282 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:282:16" "comment:               DoAdd(Inst.AddRd,Inst.AddRs1,Inst.AddRs2,Ret);
               ^ machine.adb:282:16:VC_DISCRIMINANT_CHECK" "GP_Id:3" "GP_Shape:L_1_while__case__C11b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__addrs2_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C11b__assume = Machine__executeprogram__L_1__C11b.c11b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C11b.c11b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:282:16" (#"machine.adb" 282 0 0# ()) );
              ( "GP_Sloc:machine.adb:282:16" (#"machine.adb" 282 0 0# ()) );
              ( "GP_Sloc:machine.adb:38:10:inlined:machine.adb:282:16" (#"machine.adb" 38 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C10b.c10b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C10b.c10b)))) <= 0)))) then (
               ( "GP_Sloc:machine.adb:39:13:inlined:machine.adb:282:16" (#"machine.adb" 39 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C11b.c11b)))) > (#"machine.adb" 39 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:39:43:inlined:machine.adb:282:16" "GP_Id:7" "comment:            if Regs(Rs2) > (DataVal'First - Regs(Rs1)) and Regs(Rs2) < DataVal'Last then
                                          ^ machine.adb:39:43:inlined:machine.adb:282:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__and__cmp__sub" (Machine__TdatavalB.range_check_((( -2147483648 ) - (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C10b.c10b))))))) )))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C11b.c11b)))) < 2147483647)))) then (
                ( ( "GP_Sloc:machine.adb:40:25:inlined:machine.adb:282:16" (#"machine.adb" 40 0 0# #"machine.adb" 40 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C9b.c9b) ((Machine__dataval__rep.of_rep((#"machine.adb" 40 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:40:38:inlined:machine.adb:282:16" "GP_Id:6" "comment:               Regs(Rd) := Regs(Rs1) + Regs(Rs2);
                                     ^ machine.adb:40:38:inlined:machine.adb:282:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__regs_assign__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C10b.c10b)))) + (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C11b.c11b))))))) )))))) )) );
                ( "GP_Sloc:machine.adb:41:20:inlined:machine.adb:282:16" (#"machine.adb" 41 0 0# #"machine.adb" 41 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:43:20:inlined:machine.adb:282:16" (#"machine.adb" 43 0 0# #"machine.adb" 43 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:46:13:inlined:machine.adb:282:16" (#"machine.adb" 46 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C10b.c10b)))) < 2147483647)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C10b.c10b)))) > 0)))) then (
                ( "GP_Sloc:machine.adb:47:16:inlined:machine.adb:282:16" (#"machine.adb" 47 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C11b.c11b)))) < (#"machine.adb" 47 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:47:45:inlined:machine.adb:282:16" "GP_Id:5" "comment:               if Regs(Rs2) < (DataVal'Last - Regs(Rs1)) and Regs(Rs2) > DataVal'First then
                                            ^ machine.adb:47:45:inlined:machine.adb:282:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__and__cmp__sub" (Machine__TdatavalB.range_check_((2147483647 - (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C10b.c10b))))))) )))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C11b.c11b)))) > ( -2147483648 ))))) then (
                 ( ( "GP_Sloc:machine.adb:48:28:inlined:machine.adb:282:16" (#"machine.adb" 48 0 0# #"machine.adb" 48 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C9b.c9b) ((Machine__dataval__rep.of_rep((#"machine.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:machine.adb:48:41:inlined:machine.adb:282:16" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:4" "comment:                  Regs(Rd) := Regs(Rs1) + Regs(Rs2);
                                        ^ machine.adb:48:41:inlined:machine.adb:282:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__regs_assign__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C10b.c10b)))) + (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C11b.c11b))))))) )))))) )) );
                 ( "GP_Sloc:machine.adb:49:23:inlined:machine.adb:282:16" (#"machine.adb" 49 0 0# #"machine.adb" 49 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:51:23:inlined:machine.adb:282:16" (#"machine.adb" 51 0 0# #"machine.adb" 51 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:54:20:inlined:machine.adb:282:16" (#"machine.adb" 54 0 0# #"machine.adb" 54 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )))) );
              ( "GP_Sloc:machine.adb:283:16" (#"machine.adb" 283 0 0# (if ((Machine__executeprogram__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:284:19" (#"machine.adb" 284 0 0# ()) );
               ( "GP_Sloc:machine.adb:284:19" (#"machine.adb" 284 0 0# ()) );
               ( "GP_Sloc:machine.adb:284:19" (#"machine.adb" 284 0 0# ()) );
               ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:284:19" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + 1))) (((Machine__pc.pc.int__content + 1) < 65536)))) then (
                ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:284:19" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:284:19" "GP_Reason:VC_RANGE_CHECK" "GP_Id:8" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:284:19:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__if__pc_assign__typeconv__add" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + 1))) )) )) );
                ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:284:19" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:284:19" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )) else (
               ( "GP_Sloc:machine.adb:286:19" (#"machine.adb" 286 0 0# #"machine.adb" 286 0 0# raise Return__exc) )))) ) )) else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 2)) then (
              ( ( "GP_Sloc:machine.adb:289:16" (#"machine.adb" 289 0 0# ()) );
              ( "GP_Sloc:machine.adb:289:16" (#"machine.adb" 289 0 0# (#"machine.adb" 289 0 0# ( (let machine__executeprogram__L_1__C17b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 289 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:289:16" "GP_Id:9" "comment:               DoSub(Inst.SubRd,Inst.SubRs1,Inst.SubRs2,Ret);
               ^ machine.adb:289:16:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__C17b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__subrd_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C17b__assume = Machine__executeprogram__L_1__C17b.c17b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C17b.c17b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:289:16" (#"machine.adb" 289 0 0# (#"machine.adb" 289 0 0# ( (let machine__executeprogram__L_1__C18b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 289 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:289:16" "comment:               DoSub(Inst.SubRd,Inst.SubRs1,Inst.SubRs2,Ret);
               ^ machine.adb:289:16:VC_DISCRIMINANT_CHECK" "GP_Id:10" "GP_Shape:L_1_while__case__C18b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__subrs1_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C18b__assume = Machine__executeprogram__L_1__C18b.c18b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C18b.c18b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:289:16" (#"machine.adb" 289 0 0# (#"machine.adb" 289 0 0# ( (let machine__executeprogram__L_1__C19b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 289 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:289:16" "comment:               DoSub(Inst.SubRd,Inst.SubRs1,Inst.SubRs2,Ret);
               ^ machine.adb:289:16:VC_DISCRIMINANT_CHECK" "GP_Id:11" "GP_Shape:L_1_while__case__C19b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__subrs2_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C19b__assume = Machine__executeprogram__L_1__C19b.c19b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C19b.c19b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:289:16" (#"machine.adb" 289 0 0# ()) );
              ( "GP_Sloc:machine.adb:289:16" (#"machine.adb" 289 0 0# ()) );
              ( "GP_Sloc:machine.adb:65:7:inlined:machine.adb:289:16" (#"machine.adb" 65 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C18b.c18b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C18b.c18b)))) <= 0)))) then (
               ( "GP_Sloc:machine.adb:66:10:inlined:machine.adb:289:16" (#"machine.adb" 66 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C19b.c19b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C19b.c19b)))) < (#"machine.adb" 66 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:66:66:inlined:machine.adb:289:16" "GP_Id:15" "comment:         if Regs(Rs2) > DataVal'First and Regs(Rs2) < (Regs(Rs1) + DataVal'Last) then
                                                                 ^ machine.adb:66:66:inlined:machine.adb:289:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__and__cmp__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C18b.c18b)))) + 2147483647))) )))))) then (
                ( ( "GP_Sloc:machine.adb:67:22:inlined:machine.adb:289:16" (#"machine.adb" 67 0 0# #"machine.adb" 67 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C17b.c17b) ((Machine__dataval__rep.of_rep((#"machine.adb" 67 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:67:35:inlined:machine.adb:289:16" "GP_Id:14" "comment:            Regs(Rd) := Regs(Rs1) - Regs(Rs2);
                                  ^ machine.adb:67:35:inlined:machine.adb:289:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__regs_assign__sub" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C18b.c18b)))) - (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C19b.c19b))))))) )))))) )) );
                ( "GP_Sloc:machine.adb:68:17:inlined:machine.adb:289:16" (#"machine.adb" 68 0 0# #"machine.adb" 68 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:70:17:inlined:machine.adb:289:16" (#"machine.adb" 70 0 0# #"machine.adb" 70 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:73:10:inlined:machine.adb:289:16" (#"machine.adb" 73 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C18b.c18b)))) > 0)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C18b.c18b)))) < 2147483647)))) then (
                ( "GP_Sloc:machine.adb:74:13:inlined:machine.adb:289:16" (#"machine.adb" 74 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C19b.c19b)))) > (#"machine.adb" 74 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:74:43:inlined:machine.adb:289:16" "GP_Id:13" "comment:            if Regs(Rs2) > (DataVal'First + Regs(Rs1)) and Regs(Rs2) < DataVal'Last then
                                          ^ machine.adb:74:43:inlined:machine.adb:289:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__and__cmp__add" (Machine__TdatavalB.range_check_((( -2147483648 ) + (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C18b.c18b))))))) )))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C19b.c19b)))) < 2147483647)))) then (
                 ( ( "GP_Sloc:machine.adb:75:25:inlined:machine.adb:289:16" (#"machine.adb" 75 0 0# #"machine.adb" 75 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C17b.c17b) ((Machine__dataval__rep.of_rep((#"machine.adb" 75 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:75:38:inlined:machine.adb:289:16" "GP_Id:12" "comment:               Regs(Rd) := Regs(Rs1) - Regs(Rs2);
                                     ^ machine.adb:75:38:inlined:machine.adb:289:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__regs_assign__sub" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C18b.c18b)))) - (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C19b.c19b))))))) )))))) )) );
                 ( "GP_Sloc:machine.adb:76:20:inlined:machine.adb:289:16" (#"machine.adb" 76 0 0# #"machine.adb" 76 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:78:20:inlined:machine.adb:289:16" (#"machine.adb" 78 0 0# #"machine.adb" 78 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:81:17:inlined:machine.adb:289:16" (#"machine.adb" 81 0 0# #"machine.adb" 81 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )))) );
              ( "GP_Sloc:machine.adb:290:16" (#"machine.adb" 290 0 0# (if ((Machine__executeprogram__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:291:19" (#"machine.adb" 291 0 0# ()) );
               ( "GP_Sloc:machine.adb:291:19" (#"machine.adb" 291 0 0# ()) );
               ( "GP_Sloc:machine.adb:291:19" (#"machine.adb" 291 0 0# ()) );
               ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:291:19" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + 1))) (((Machine__pc.pc.int__content + 1) < 65536)))) then (
                ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:291:19" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__if__pc_assign__typeconv__add" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:291:19" "GP_Id:16" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:291:19:VC_RANGE_CHECK" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + 1))) )) )) );
                ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:291:19" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:291:19" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )) else (
               ( "GP_Sloc:machine.adb:293:19" (#"machine.adb" 293 0 0# #"machine.adb" 293 0 0# raise Return__exc) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 3)) then (
              ( ( "GP_Sloc:machine.adb:296:16" (#"machine.adb" 296 0 0# ()) );
              ( "GP_Sloc:machine.adb:296:16" (#"machine.adb" 296 0 0# (#"machine.adb" 296 0 0# ( (let machine__executeprogram__L_1__C25b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 296 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:296:16" "GP_Id:17" "comment:               DoMul(Inst.MulRd,Inst.MulRs1,Inst.MulRs2,Ret);
               ^ machine.adb:296:16:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__C25b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__mulrd_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C25b__assume = Machine__executeprogram__L_1__C25b.c25b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C25b.c25b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:296:16" (#"machine.adb" 296 0 0# (#"machine.adb" 296 0 0# ( (let machine__executeprogram__L_1__C26b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 296 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:296:16" "comment:               DoMul(Inst.MulRd,Inst.MulRs1,Inst.MulRs2,Ret);
               ^ machine.adb:296:16:VC_DISCRIMINANT_CHECK" "GP_Id:18" "GP_Shape:L_1_while__case__C26b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__mulrs1_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C26b__assume = Machine__executeprogram__L_1__C26b.c26b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C26b.c26b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:296:16" (#"machine.adb" 296 0 0# (#"machine.adb" 296 0 0# ( (let machine__executeprogram__L_1__C27b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 296 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:296:16" "comment:               DoMul(Inst.MulRd,Inst.MulRs1,Inst.MulRs2,Ret);
               ^ machine.adb:296:16:VC_DISCRIMINANT_CHECK" "GP_Id:19" "GP_Shape:L_1_while__case__C27b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__mulrs2_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C27b__assume = Machine__executeprogram__L_1__C27b.c27b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C27b.c27b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:296:16" (#"machine.adb" 296 0 0# ()) );
              ( "GP_Sloc:machine.adb:296:16" (#"machine.adb" 296 0 0# ()) );
              ( "GP_Sloc:machine.adb:91:7:inlined:machine.adb:296:16" (#"machine.adb" 91 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b)))) >= 0)) then (
               ( "GP_Sloc:machine.adb:92:10:inlined:machine.adb:296:16" (#"machine.adb" 92 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) < ( -1 ))))) then (
                ( "GP_Sloc:machine.adb:93:13:inlined:machine.adb:296:16" (#"machine.adb" 93 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b)))) < (#"machine.adb" 93 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__cmp__div" "GP_Sloc:machine.adb:93:41:inlined:machine.adb:296:16" "GP_Id:31" "comment:            if Regs(Rs2) < DataVal'First/Regs(Rs1) then
                                        ^ machine.adb:93:41:inlined:machine.adb:296:16:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_((#"machine.adb" 93 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Shape:L_1_while__case__if__if__if__cmp__div" "GP_Sloc:machine.adb:93:41:inlined:machine.adb:296:16" "GP_Id:30" "comment:            if Regs(Rs2) < DataVal'First/Regs(Rs1) then
                                        ^ machine.adb:93:41:inlined:machine.adb:296:16:VC_DIVISION_CHECK" (Int_Division.div_(( -2147483648 )) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))))) )))) )))) then (
                 ( ( "GP_Sloc:machine.adb:94:25:inlined:machine.adb:296:16" (#"machine.adb" 94 0 0# #"machine.adb" 94 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C25b.c25b) ((Machine__dataval__rep.of_rep((#"machine.adb" 94 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__regs_assign__mult" "GP_Sloc:machine.adb:94:38:inlined:machine.adb:296:16" "GP_Id:29" "comment:               Regs(Rd) := Regs(Rs1) * Regs(Rs2);
                                     ^ machine.adb:94:38:inlined:machine.adb:296:16:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b))))))) )))))) )) );
                 ( "GP_Sloc:machine.adb:95:20:inlined:machine.adb:296:16" (#"machine.adb" 95 0 0# #"machine.adb" 95 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:97:20:inlined:machine.adb:296:16" (#"machine.adb" 97 0 0# #"machine.adb" 97 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:100:13:inlined:machine.adb:296:16" (#"machine.adb" 100 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) > ( -1 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) <= 1)))) then (
                 ( "GP_Sloc:machine.adb:101:16:inlined:machine.adb:296:16" (#"machine.adb" 101 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b)))) < 2147483647)) then (
                  ( ( "GP_Sloc:machine.adb:102:28:inlined:machine.adb:296:16" (#"machine.adb" 102 0 0# #"machine.adb" 102 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C25b.c25b) ((Machine__dataval__rep.of_rep((#"machine.adb" 102 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__if__regs_assign__mult" "GP_Sloc:machine.adb:102:41:inlined:machine.adb:296:16" "GP_Id:28" "comment:                  Regs(Rd) := Regs(Rs1) * Regs(Rs2);
                                        ^ machine.adb:102:41:inlined:machine.adb:296:16:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b))))))) )))))) )) );
                  ( "GP_Sloc:machine.adb:103:22:inlined:machine.adb:296:16" (#"machine.adb" 103 0 0# #"machine.adb" 103 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                  ( "GP_Sloc:machine.adb:105:23:inlined:machine.adb:296:16" (#"machine.adb" 105 0 0# #"machine.adb" 105 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                 ( "GP_Sloc:machine.adb:108:16:inlined:machine.adb:296:16" (#"machine.adb" 108 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) > 1)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) < 2147483647)))) then (
                  ( "GP_Sloc:machine.adb:109:19:inlined:machine.adb:296:16" (#"machine.adb" 109 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b)))) < (#"machine.adb" 109 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Shape:L_1_while__case__if__if__if__if__if__cmp__div" "GP_Sloc:machine.adb:109:46:inlined:machine.adb:296:16" "GP_Id:27" "comment:                  if Regs(Rs2) < DataVal'Last/Regs(Rs1) then
                                             ^ machine.adb:109:46:inlined:machine.adb:296:16:VC_DIVISION_CHECK" (Int_Division.div_(2147483647) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))))) )))) then (
                   ( ( "GP_Sloc:machine.adb:110:31:inlined:machine.adb:296:16" (#"machine.adb" 110 0 0# #"machine.adb" 110 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C25b.c25b) ((Machine__dataval__rep.of_rep((#"machine.adb" 110 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__if__if__regs_assign__mult" "GP_Sloc:machine.adb:110:44:inlined:machine.adb:296:16" "GP_Id:26" "comment:                     Regs(Rd) := Regs(Rs1) * Regs(Rs2);
                                           ^ machine.adb:110:44:inlined:machine.adb:296:16:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b))))))) )))))) )) );
                   ( "GP_Sloc:machine.adb:111:25:inlined:machine.adb:296:16" (#"machine.adb" 111 0 0# #"machine.adb" 111 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                   ( "GP_Sloc:machine.adb:113:25:inlined:machine.adb:296:16" (#"machine.adb" 113 0 0# #"machine.adb" 113 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                  ( "GP_Sloc:machine.adb:116:23:inlined:machine.adb:296:16" (#"machine.adb" 116 0 0# #"machine.adb" 116 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )))) )))) )) else (
               ( "GP_Sloc:machine.adb:121:10:inlined:machine.adb:296:16" (#"machine.adb" 121 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) < 0)))) then (
                ( "GP_Sloc:machine.adb:122:13:inlined:machine.adb:296:16" (#"machine.adb" 122 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b)))) > (#"machine.adb" 122 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:machine.adb:122:40:inlined:machine.adb:296:16" "GP_Id:25" "comment:            if Regs(Rs2) > DataVal'Last/Regs(Rs1) then
                                       ^ machine.adb:122:40:inlined:machine.adb:296:16:VC_DIVISION_CHECK" "GP_Shape:L_1_while__case__if__if__if__cmp__div" (Int_Division.div_(2147483647) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))))) )))) then (
                 ( ( "GP_Sloc:machine.adb:123:25:inlined:machine.adb:296:16" (#"machine.adb" 123 0 0# #"machine.adb" 123 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C25b.c25b) ((Machine__dataval__rep.of_rep((#"machine.adb" 123 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:123:38:inlined:machine.adb:296:16" "GP_Id:24" "comment:               Regs(Rd) := Regs(Rs1) * Regs(Rs2);
                                     ^ machine.adb:123:38:inlined:machine.adb:296:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__regs_assign__mult" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b))))))) )))))) )) );
                 ( "GP_Sloc:machine.adb:124:20:inlined:machine.adb:296:16" (#"machine.adb" 124 0 0# #"machine.adb" 124 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:126:20:inlined:machine.adb:296:16" (#"machine.adb" 126 0 0# #"machine.adb" 126 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:129:13:inlined:machine.adb:296:16" (#"machine.adb" 129 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) > 0)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) <= 1)))) then (
                 ( "GP_Sloc:machine.adb:130:16:inlined:machine.adb:296:16" (#"machine.adb" 130 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b)))) > ( -2147483648 ))) then (
                  ( ( "GP_Sloc:machine.adb:131:28:inlined:machine.adb:296:16" (#"machine.adb" 131 0 0# #"machine.adb" 131 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C25b.c25b) ((Machine__dataval__rep.of_rep((#"machine.adb" 131 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:131:41:inlined:machine.adb:296:16" "GP_Id:23" "comment:                  Regs(Rd) := Regs(Rs1) * Regs(Rs2);
                                        ^ machine.adb:131:41:inlined:machine.adb:296:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__if__regs_assign__mult" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b))))))) )))))) )) );
                  ( "GP_Sloc:machine.adb:132:22:inlined:machine.adb:296:16" (#"machine.adb" 132 0 0# #"machine.adb" 132 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                  ( "GP_Sloc:machine.adb:134:23:inlined:machine.adb:296:16" (#"machine.adb" 134 0 0# #"machine.adb" 134 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                 ( "GP_Sloc:machine.adb:137:16:inlined:machine.adb:296:16" (#"machine.adb" 137 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) > 1)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) < 2147483647)))) then (
                  ( "GP_Sloc:machine.adb:138:19:inlined:machine.adb:296:16" (#"machine.adb" 138 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b)))) > (#"machine.adb" 138 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:138:47:inlined:machine.adb:296:16" "GP_Shape:L_1_while__case__if__if__if__if__if__cmp__div" "GP_Id:22" "comment:                  if Regs(Rs2) > DataVal'First/Regs(Rs1) then
                                              ^ machine.adb:138:47:inlined:machine.adb:296:16:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_((#"machine.adb" 138 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:machine.adb:138:47:inlined:machine.adb:296:16" "GP_Reason:VC_DIVISION_CHECK" "GP_Id:21" "comment:                  if Regs(Rs2) > DataVal'First/Regs(Rs1) then
                                              ^ machine.adb:138:47:inlined:machine.adb:296:16:VC_DIVISION_CHECK" "GP_Shape:L_1_while__case__if__if__if__if__if__cmp__div" (Int_Division.div_(( -2147483648 )) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))))) )))) )))) then (
                   ( ( "GP_Sloc:machine.adb:139:31:inlined:machine.adb:296:16" (#"machine.adb" 139 0 0# #"machine.adb" 139 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C25b.c25b) ((Machine__dataval__rep.of_rep((#"machine.adb" 139 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:139:44:inlined:machine.adb:296:16" "GP_Id:20" "comment:                     Regs(Rd) := Regs(Rs1) * Regs(Rs2);
                                           ^ machine.adb:139:44:inlined:machine.adb:296:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__if__if__if__if__if__regs_assign__mult" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C26b.c26b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C27b.c27b))))))) )))))) )) );
                   ( "GP_Sloc:machine.adb:140:25:inlined:machine.adb:296:16" (#"machine.adb" 140 0 0# #"machine.adb" 140 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                   ( "GP_Sloc:machine.adb:142:25:inlined:machine.adb:296:16" (#"machine.adb" 142 0 0# #"machine.adb" 142 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                  ( "GP_Sloc:machine.adb:145:23:inlined:machine.adb:296:16" (#"machine.adb" 145 0 0# #"machine.adb" 145 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )))) )))) )))) );
              ( "GP_Sloc:machine.adb:297:16" (#"machine.adb" 297 0 0# (if ((Machine__executeprogram__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:298:19" (#"machine.adb" 298 0 0# ()) );
               ( "GP_Sloc:machine.adb:298:19" (#"machine.adb" 298 0 0# ()) );
               ( "GP_Sloc:machine.adb:298:19" (#"machine.adb" 298 0 0# ()) );
               ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:298:19" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + 1))) (((Machine__pc.pc.int__content + 1) < 65536)))) then (
                ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:298:19" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__if__pc_assign__typeconv__add" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:298:19" "GP_Id:32" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:298:19:VC_RANGE_CHECK" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + 1))) )) )) );
                ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:298:19" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:298:19" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )) else (
               ( "GP_Sloc:machine.adb:300:19" (#"machine.adb" 300 0 0# #"machine.adb" 300 0 0# raise Return__exc) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 4)) then (
              ( ( "GP_Sloc:machine.adb:303:16" (#"machine.adb" 303 0 0# ()) );
              ( "GP_Sloc:machine.adb:303:16" (#"machine.adb" 303 0 0# (#"machine.adb" 303 0 0# ( (let machine__executeprogram__L_1__C33b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 303 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:303:16" "GP_Id:33" "comment:               DoDiv(Inst.DivRd,Inst.DivRs1,Inst.DivRs2,Ret);
               ^ machine.adb:303:16:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__C33b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__divrd_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C33b__assume = Machine__executeprogram__L_1__C33b.c33b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C33b.c33b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:303:16" (#"machine.adb" 303 0 0# (#"machine.adb" 303 0 0# ( (let machine__executeprogram__L_1__C34b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 303 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:303:16" "comment:               DoDiv(Inst.DivRd,Inst.DivRs1,Inst.DivRs2,Ret);
               ^ machine.adb:303:16:VC_DISCRIMINANT_CHECK" "GP_Id:34" "GP_Shape:L_1_while__case__C34b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__divrs1_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C34b__assume = Machine__executeprogram__L_1__C34b.c34b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C34b.c34b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:303:16" (#"machine.adb" 303 0 0# (#"machine.adb" 303 0 0# ( (let machine__executeprogram__L_1__C35b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 303 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:303:16" "comment:               DoDiv(Inst.DivRd,Inst.DivRs1,Inst.DivRs2,Ret);
               ^ machine.adb:303:16:VC_DISCRIMINANT_CHECK" "GP_Id:35" "GP_Shape:L_1_while__case__C35b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__divrs2_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C35b__assume = Machine__executeprogram__L_1__C35b.c35b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C35b.c35b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:303:16" (#"machine.adb" 303 0 0# ()) );
              ( "GP_Sloc:machine.adb:303:16" (#"machine.adb" 303 0 0# ()) );
              ( "GP_Sloc:machine.adb:158:7:inlined:machine.adb:303:16" (#"machine.adb" 158 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C35b.c35b)))) <> 0)) then (
               ( "GP_Sloc:machine.adb:159:10:inlined:machine.adb:303:16" (#"machine.adb" 159 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C34b.c34b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C34b.c34b)))) < 2147483647)))) then (
                ( ( "GP_Sloc:machine.adb:160:22:inlined:machine.adb:303:16" (#"machine.adb" 160 0 0# #"machine.adb" 160 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C33b.c33b) ((Machine__dataval__rep.of_rep((#"machine.adb" 160 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:160:35:inlined:machine.adb:303:16" "GP_Shape:L_1_while__case__if__if__regs_assign__div" "GP_Id:37" "comment:            Regs(Rd) := Regs(Rs1) / Regs(Rs2);
                                  ^ machine.adb:160:35:inlined:machine.adb:303:16:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_((#"machine.adb" 160 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:machine.adb:160:35:inlined:machine.adb:303:16" "GP_Id:36" "comment:            Regs(Rd) := Regs(Rs1) / Regs(Rs2);
                                  ^ machine.adb:160:35:inlined:machine.adb:303:16:VC_DIVISION_CHECK" "GP_Shape:L_1_while__case__if__if__regs_assign__div" (Int_Division.div_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C34b.c34b))))) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C35b.c35b)))))) )))) )))))) )) );
                ( "GP_Sloc:machine.adb:161:16:inlined:machine.adb:303:16" (#"machine.adb" 161 0 0# #"machine.adb" 161 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:163:17:inlined:machine.adb:303:16" (#"machine.adb" 163 0 0# #"machine.adb" 163 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:166:13:inlined:machine.adb:303:16" (#"machine.adb" 166 0 0# #"machine.adb" 166 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) );
              ( "GP_Sloc:machine.adb:304:16" (#"machine.adb" 304 0 0# (if ((Machine__executeprogram__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:305:19" (#"machine.adb" 305 0 0# ()) );
               ( "GP_Sloc:machine.adb:305:19" (#"machine.adb" 305 0 0# ()) );
               ( "GP_Sloc:machine.adb:305:19" (#"machine.adb" 305 0 0# ()) );
               ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:305:19" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + 1))) (((Machine__pc.pc.int__content + 1) < 65536)))) then (
                ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:305:19" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__if__pc_assign__typeconv__add" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:305:19" "GP_Id:38" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:305:19:VC_RANGE_CHECK" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + 1))) )) )) );
                ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:305:19" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:305:19" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )) else (
               ( "GP_Sloc:machine.adb:307:19" (#"machine.adb" 307 0 0# #"machine.adb" 307 0 0# raise Return__exc) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 6)) then (
              ( ( "GP_Sloc:machine.adb:310:16" (#"machine.adb" 310 0 0# ()) );
              ( "GP_Sloc:machine.adb:310:16" (#"machine.adb" 310 0 0# (#"machine.adb" 310 0 0# ( (let machine__executeprogram__L_1__C41b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 310 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:310:16" "GP_Id:39" "comment:               DoLdr(Inst.LdrRd,Inst.LdrRs,Inst.LdrOffs,Ret);
               ^ machine.adb:310:16:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__C41b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__ldrrd_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C41b__assume = Machine__executeprogram__L_1__C41b.c41b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C41b.c41b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:310:16" (#"machine.adb" 310 0 0# (#"machine.adb" 310 0 0# ( (let machine__executeprogram__L_1__C42b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 310 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:310:16" "comment:               DoLdr(Inst.LdrRd,Inst.LdrRs,Inst.LdrOffs,Ret);
               ^ machine.adb:310:16:VC_DISCRIMINANT_CHECK" "GP_Id:40" "GP_Shape:L_1_while__case__C42b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__ldrrs_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C42b__assume = Machine__executeprogram__L_1__C42b.c42b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C42b.c42b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:310:16" (#"machine.adb" 310 0 0# (#"machine.adb" 310 0 0# ( (let machine__executeprogram__L_1__C43b__assume = (Instruction__offset__rep.to_rep((#"machine.adb" 310 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:310:16" "comment:               DoLdr(Inst.LdrRd,Inst.LdrRs,Inst.LdrOffs,Ret);
               ^ machine.adb:310:16:VC_DISCRIMINANT_CHECK" "GP_Id:41" "GP_Shape:L_1_while__case__C43b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__ldroffs_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C43b__assume = Machine__executeprogram__L_1__C43b.c43b) }))
              ;
               assume {  (Instruction__offset___axiom.dynamic_invariant Machine__executeprogram__L_1__C43b.c43b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:310:16" (#"machine.adb" 310 0 0# ()) );
              ( "GP_Sloc:machine.adb:310:16" (#"machine.adb" 310 0 0# ( (#"machine.adb" 175 0 0# ( #"machine.adb" 175 0 0# abstract ensures {true}(let _ = () in (
               ()))
               end ;
              #"machine.adb" 175 0 0# assume { #"machine.adb" 175 0 0# (Instruction__addr___axiom.default_initial_assumption Machine__executeprogram__L_1__B45b__a.a.int__content False) };
              #"machine.adb" 175 0 0# assume { #"machine.adb" 175 0 0# (Instruction__addr___axiom.dynamic_invariant Machine__executeprogram__L_1__B45b__a.a.int__content False False True True) } ));
              ( "GP_Sloc:machine.adb:177:7:inlined:machine.adb:310:16" (#"machine.adb" 177 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))) >= ( -65535 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))) <= 0)))) then (
               ( "GP_Sloc:machine.adb:178:10:inlined:machine.adb:310:16" (#"machine.adb" 178 0 0# (if ((Boolean.andb((Machine__executeprogram__L_1__C43b.c43b <= 65535)) ((Machine__executeprogram__L_1__C43b.c43b >= (-((#"machine.adb" 178 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:178:60:inlined:machine.adb:310:16" "GP_Id:51" "comment:         if Offs <= Offset(Addr'Last) and Offs >= - Offset(Regs(Rs)) then
                                                           ^ machine.adb:178:60:inlined:machine.adb:310:16:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__B45b_declblk__if__if__and__cmp__minus__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))))) )))))))) then (
                ( ( "GP_Sloc:machine.adb:179:15:inlined:machine.adb:310:16" (#"machine.adb" 179 0 0# #"machine.adb" 179 0 0# Machine__executeprogram__L_1__B45b__a.a.int__content <- ( (#"machine.adb" 179 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:179:32:inlined:machine.adb:310:16" "GP_Shape:L_1_while__case__B45b_declblk__if__if__a_assign__typeconv__add" "GP_Id:50" "comment:            A := Addr(Regs(Rs) + DataVal(Offs));
                               ^ machine.adb:179:32:inlined:machine.adb:310:16:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 179 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:179:32:inlined:machine.adb:310:16" "GP_Id:49" "comment:            A := Addr(Regs(Rs) + DataVal(Offs));
                               ^ machine.adb:179:32:inlined:machine.adb:310:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__B45b_declblk__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))) + Machine__executeprogram__L_1__C43b.c43b))) )))) )) )) );
                ( "GP_Sloc:machine.adb:180:22:inlined:machine.adb:310:16" (#"machine.adb" 180 0 0# #"machine.adb" 180 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C41b.c41b) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__memory.memory.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__B45b__a.a.int__content)))))))) )) );
                ( "GP_Sloc:machine.adb:181:17:inlined:machine.adb:310:16" (#"machine.adb" 181 0 0# #"machine.adb" 181 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:183:17:inlined:machine.adb:310:16" (#"machine.adb" 183 0 0# #"machine.adb" 183 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:186:10:inlined:machine.adb:310:16" (#"machine.adb" 186 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))) > 0)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))) <= 65535)))) then (
                ( "GP_Sloc:machine.adb:187:13:inlined:machine.adb:310:16" (#"machine.adb" 187 0 0# (if ((Boolean.andb((Machine__executeprogram__L_1__C43b.c43b >= (-((#"machine.adb" 187 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:187:32:inlined:machine.adb:310:16" "GP_Id:47" "comment:            if Offs >= -Offset(Regs(Rs)) and Offs <= Offset(Addr'Last) - Offset(Regs(Rs)) then
                               ^ machine.adb:187:32:inlined:machine.adb:310:16:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__B45b_declblk__if__if__if__and__cmp__minus__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))))) )))))) ((Machine__executeprogram__L_1__C43b.c43b <= (65535 - (#"machine.adb" 187 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:187:81:inlined:machine.adb:310:16" "GP_Id:48" "comment:            if Offs >= -Offset(Regs(Rs)) and Offs <= Offset(Addr'Last) - Offset(Regs(Rs)) then
                                                                                ^ machine.adb:187:81:inlined:machine.adb:310:16:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__B45b_declblk__if__if__if__and__cmp__sub__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))))) ))))))) then (
                 ( ( "GP_Sloc:machine.adb:188:18:inlined:machine.adb:310:16" (#"machine.adb" 188 0 0# #"machine.adb" 188 0 0# Machine__executeprogram__L_1__B45b__a.a.int__content <- ( (#"machine.adb" 188 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:188:35:inlined:machine.adb:310:16" "GP_Shape:L_1_while__case__B45b_declblk__if__if__if__a_assign__typeconv__add" "GP_Id:46" "comment:               A := Addr(Regs(Rs) + DataVal(Offs));
                                  ^ machine.adb:188:35:inlined:machine.adb:310:16:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 188 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:188:35:inlined:machine.adb:310:16" "GP_Id:45" "comment:               A := Addr(Regs(Rs) + DataVal(Offs));
                                  ^ machine.adb:188:35:inlined:machine.adb:310:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__B45b_declblk__if__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))) + Machine__executeprogram__L_1__C43b.c43b))) )))) )) )) );
                 ( "GP_Sloc:machine.adb:189:25:inlined:machine.adb:310:16" (#"machine.adb" 189 0 0# #"machine.adb" 189 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C41b.c41b) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__memory.memory.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__B45b__a.a.int__content)))))))) )) );
                 ( "GP_Sloc:machine.adb:190:20:inlined:machine.adb:310:16" (#"machine.adb" 190 0 0# #"machine.adb" 190 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:192:20:inlined:machine.adb:310:16" (#"machine.adb" 192 0 0# #"machine.adb" 192 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:195:13:inlined:machine.adb:310:16" (#"machine.adb" 195 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))) > 65535)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))) <= 65535)))) then (
                 ( "GP_Sloc:machine.adb:196:16:inlined:machine.adb:310:16" (#"machine.adb" 196 0 0# (if ((Boolean.andb((Machine__executeprogram__L_1__C43b.c43b >= 0)) ((Machine__executeprogram__L_1__C43b.c43b <= (65535 - (#"machine.adb" 196 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:196:85:inlined:machine.adb:310:16" "GP_Id:44" "comment:               if Offs >= Offset(Addr'First) and Offs <= Offset(Addr'Last) - Offset(Regs(Rs)) then
                                                                                    ^ machine.adb:196:85:inlined:machine.adb:310:16:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__B45b_declblk__if__if__if__if__and__cmp__sub__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))))) ))))))) then (
                  ( ( "GP_Sloc:machine.adb:197:21:inlined:machine.adb:310:16" (#"machine.adb" 197 0 0# #"machine.adb" 197 0 0# Machine__executeprogram__L_1__B45b__a.a.int__content <- ( (#"machine.adb" 197 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:197:38:inlined:machine.adb:310:16" "GP_Shape:L_1_while__case__B45b_declblk__if__if__if__if__a_assign__typeconv__add" "GP_Id:43" "comment:                  A := Addr(Regs(Rs) + DataVal(Offs));
                                     ^ machine.adb:197:38:inlined:machine.adb:310:16:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 197 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:197:38:inlined:machine.adb:310:16" "GP_Id:42" "comment:                  A := Addr(Regs(Rs) + DataVal(Offs));
                                     ^ machine.adb:197:38:inlined:machine.adb:310:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__B45b_declblk__if__if__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C42b.c42b)))) + Machine__executeprogram__L_1__C43b.c43b))) )))) )) )) );
                  ( "GP_Sloc:machine.adb:198:28:inlined:machine.adb:310:16" (#"machine.adb" 198 0 0# #"machine.adb" 198 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C41b.c41b) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__memory.memory.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__B45b__a.a.int__content)))))))) )) );
                  ( "GP_Sloc:machine.adb:199:23:inlined:machine.adb:310:16" (#"machine.adb" 199 0 0# #"machine.adb" 199 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                  ( "GP_Sloc:machine.adb:201:23:inlined:machine.adb:310:16" (#"machine.adb" 201 0 0# #"machine.adb" 201 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                 ( "GP_Sloc:machine.adb:204:20:inlined:machine.adb:310:16" (#"machine.adb" 204 0 0# #"machine.adb" 204 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )))) )))) ) )) );
              ( "GP_Sloc:machine.adb:311:16" (#"machine.adb" 311 0 0# (if ((Machine__executeprogram__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:312:19" (#"machine.adb" 312 0 0# ()) );
               ( "GP_Sloc:machine.adb:312:19" (#"machine.adb" 312 0 0# ()) );
               ( "GP_Sloc:machine.adb:312:19" (#"machine.adb" 312 0 0# ()) );
               ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:312:19" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + 1))) (((Machine__pc.pc.int__content + 1) < 65536)))) then (
                ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:312:19" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__if__pc_assign__typeconv__add" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:312:19" "GP_Id:52" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:312:19:VC_RANGE_CHECK" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + 1))) )) )) );
                ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:312:19" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:312:19" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )) else (
               ( "GP_Sloc:machine.adb:314:19" (#"machine.adb" 314 0 0# #"machine.adb" 314 0 0# raise Return__exc) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 7)) then (
              ( ( "GP_Sloc:machine.adb:317:16" (#"machine.adb" 317 0 0# ()) );
              ( "GP_Sloc:machine.adb:317:16" (#"machine.adb" 317 0 0# (#"machine.adb" 317 0 0# ( (let machine__executeprogram__L_1__C49b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 317 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:317:16" "GP_Id:53" "comment:               DoStr(Inst.StrRa,Inst.StrOffs,Inst.StrRb,Ret);
               ^ machine.adb:317:16:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__C49b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__strra_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C49b__assume = Machine__executeprogram__L_1__C49b.c49b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C49b.c49b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:317:16" (#"machine.adb" 317 0 0# (#"machine.adb" 317 0 0# ( (let machine__executeprogram__L_1__C50b__assume = (Instruction__offset__rep.to_rep((#"machine.adb" 317 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:317:16" "comment:               DoStr(Inst.StrRa,Inst.StrOffs,Inst.StrRb,Ret);
               ^ machine.adb:317:16:VC_DISCRIMINANT_CHECK" "GP_Id:54" "GP_Shape:L_1_while__case__C50b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__stroffs_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C50b__assume = Machine__executeprogram__L_1__C50b.c50b) }))
              ;
               assume {  (Instruction__offset___axiom.dynamic_invariant Machine__executeprogram__L_1__C50b.c50b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:317:16" (#"machine.adb" 317 0 0# (#"machine.adb" 317 0 0# ( (let machine__executeprogram__L_1__C51b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 317 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:317:16" "comment:               DoStr(Inst.StrRa,Inst.StrOffs,Inst.StrRb,Ret);
               ^ machine.adb:317:16:VC_DISCRIMINANT_CHECK" "GP_Id:55" "GP_Shape:L_1_while__case__C51b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__strrb_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C51b__assume = Machine__executeprogram__L_1__C51b.c51b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C51b.c51b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:317:16" (#"machine.adb" 317 0 0# ()) );
              ( "GP_Sloc:machine.adb:317:16" (#"machine.adb" 317 0 0# ( (#"machine.adb" 216 0 0# ( #"machine.adb" 216 0 0# abstract ensures {true}(let _ = () in (
               ()))
               end ;
              #"machine.adb" 216 0 0# assume { #"machine.adb" 216 0 0# (Instruction__addr___axiom.default_initial_assumption Machine__executeprogram__L_1__B53b__a.a.int__content False) };
              #"machine.adb" 216 0 0# assume { #"machine.adb" 216 0 0# (Instruction__addr___axiom.dynamic_invariant Machine__executeprogram__L_1__B53b__a.a.int__content False False True True) } ));
              ( "GP_Sloc:machine.adb:218:8:inlined:machine.adb:317:16" (#"machine.adb" 218 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))) >= ( -65535 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))) <= 0)))) then (
               ( "GP_Sloc:machine.adb:219:10:inlined:machine.adb:317:16" (#"machine.adb" 219 0 0# (if ((Boolean.andb((Machine__executeprogram__L_1__C50b.c50b <= 65535)) ((Machine__executeprogram__L_1__C50b.c50b >= (-((#"machine.adb" 219 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:219:60:inlined:machine.adb:317:16" "GP_Id:65" "comment:         if Offs <= Offset(Addr'Last) and Offs >= - Offset(Regs(Ra)) then
                                                           ^ machine.adb:219:60:inlined:machine.adb:317:16:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__B53b_declblk__if__if__and__cmp__minus__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))))) )))))))) then (
                ( ( "GP_Sloc:machine.adb:220:15:inlined:machine.adb:317:16" (#"machine.adb" 220 0 0# #"machine.adb" 220 0 0# Machine__executeprogram__L_1__B53b__a.a.int__content <- ( (#"machine.adb" 220 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:220:32:inlined:machine.adb:317:16" "GP_Shape:L_1_while__case__B53b_declblk__if__if__a_assign__typeconv__add" "GP_Id:64" "comment:            A := Addr(Regs(Ra) + DataVal(Offs));
                               ^ machine.adb:220:32:inlined:machine.adb:317:16:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 220 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:220:32:inlined:machine.adb:317:16" "GP_Id:63" "comment:            A := Addr(Regs(Ra) + DataVal(Offs));
                               ^ machine.adb:220:32:inlined:machine.adb:317:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__B53b_declblk__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))) + Machine__executeprogram__L_1__C50b.c50b))) )))) )) )) );
                ( "GP_Sloc:machine.adb:221:23:inlined:machine.adb:317:16" (#"machine.adb" 221 0 0# #"machine.adb" 221 0 0# Machine__memory.memory.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__memory.memory.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__B53b__a.a.int__content) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C51b.c51b)))))))) )) );
                ( "GP_Sloc:machine.adb:222:17:inlined:machine.adb:317:16" (#"machine.adb" 222 0 0# #"machine.adb" 222 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:224:17:inlined:machine.adb:317:16" (#"machine.adb" 224 0 0# #"machine.adb" 224 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:227:10:inlined:machine.adb:317:16" (#"machine.adb" 227 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))) > 0)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))) <= 65535)))) then (
                ( "GP_Sloc:machine.adb:228:13:inlined:machine.adb:317:16" (#"machine.adb" 228 0 0# (if ((Boolean.andb((Machine__executeprogram__L_1__C50b.c50b >= (-((#"machine.adb" 228 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:228:32:inlined:machine.adb:317:16" "GP_Id:61" "comment:            if Offs >= -Offset(Regs(Ra)) and Offs <= Offset(Addr'Last) - Offset(Regs(Ra)) then
                               ^ machine.adb:228:32:inlined:machine.adb:317:16:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__B53b_declblk__if__if__if__and__cmp__minus__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))))) )))))) ((Machine__executeprogram__L_1__C50b.c50b <= (65535 - (#"machine.adb" 228 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:228:81:inlined:machine.adb:317:16" "GP_Id:62" "comment:            if Offs >= -Offset(Regs(Ra)) and Offs <= Offset(Addr'Last) - Offset(Regs(Ra)) then
                                                                                ^ machine.adb:228:81:inlined:machine.adb:317:16:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__B53b_declblk__if__if__if__and__cmp__sub__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))))) ))))))) then (
                 ( ( "GP_Sloc:machine.adb:229:18:inlined:machine.adb:317:16" (#"machine.adb" 229 0 0# #"machine.adb" 229 0 0# Machine__executeprogram__L_1__B53b__a.a.int__content <- ( (#"machine.adb" 229 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:229:35:inlined:machine.adb:317:16" "GP_Shape:L_1_while__case__B53b_declblk__if__if__if__a_assign__typeconv__add" "GP_Id:60" "comment:               A := Addr(Regs(Ra) + DataVal(Offs));
                                  ^ machine.adb:229:35:inlined:machine.adb:317:16:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 229 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:229:35:inlined:machine.adb:317:16" "GP_Id:59" "comment:               A := Addr(Regs(Ra) + DataVal(Offs));
                                  ^ machine.adb:229:35:inlined:machine.adb:317:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__B53b_declblk__if__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))) + Machine__executeprogram__L_1__C50b.c50b))) )))) )) )) );
                 ( "GP_Sloc:machine.adb:230:26:inlined:machine.adb:317:16" (#"machine.adb" 230 0 0# #"machine.adb" 230 0 0# Machine__memory.memory.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__memory.memory.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__B53b__a.a.int__content) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C51b.c51b)))))))) )) );
                 ( "GP_Sloc:machine.adb:231:20:inlined:machine.adb:317:16" (#"machine.adb" 231 0 0# #"machine.adb" 231 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:233:20:inlined:machine.adb:317:16" (#"machine.adb" 233 0 0# #"machine.adb" 233 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:236:13:inlined:machine.adb:317:16" (#"machine.adb" 236 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))) > 65535)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))) <= 65535)))) then (
                 ( "GP_Sloc:machine.adb:237:16:inlined:machine.adb:317:16" (#"machine.adb" 237 0 0# (if ((Boolean.andb((Machine__executeprogram__L_1__C50b.c50b >= 0)) ((Machine__executeprogram__L_1__C50b.c50b <= (65535 - (#"machine.adb" 237 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:237:85:inlined:machine.adb:317:16" "GP_Id:58" "comment:               if Offs >= Offset(Addr'First) and Offs <= Offset(Addr'Last) - Offset(Regs(Ra)) then
                                                                                    ^ machine.adb:237:85:inlined:machine.adb:317:16:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__B53b_declblk__if__if__if__if__and__cmp__sub__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))))) ))))))) then (
                  ( ( "GP_Sloc:machine.adb:238:21:inlined:machine.adb:317:16" (#"machine.adb" 238 0 0# #"machine.adb" 238 0 0# Machine__executeprogram__L_1__B53b__a.a.int__content <- ( (#"machine.adb" 238 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:238:38:inlined:machine.adb:317:16" "GP_Shape:L_1_while__case__B53b_declblk__if__if__if__if__a_assign__typeconv__add" "GP_Id:57" "comment:                  A := Addr(Regs(Ra) + DataVal(Offs));
                                     ^ machine.adb:238:38:inlined:machine.adb:317:16:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 238 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:238:38:inlined:machine.adb:317:16" "GP_Id:56" "comment:                  A := Addr(Regs(Ra) + DataVal(Offs));
                                     ^ machine.adb:238:38:inlined:machine.adb:317:16:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__case__B53b_declblk__if__if__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C49b.c49b)))) + Machine__executeprogram__L_1__C50b.c50b))) )))) )) )) );
                  ( "GP_Sloc:machine.adb:239:29:inlined:machine.adb:317:16" (#"machine.adb" 239 0 0# #"machine.adb" 239 0 0# Machine__memory.memory.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__memory.memory.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__B53b__a.a.int__content) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C51b.c51b)))))))) )) );
                  ( "GP_Sloc:machine.adb:240:23:inlined:machine.adb:317:16" (#"machine.adb" 240 0 0# #"machine.adb" 240 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                  ( "GP_Sloc:machine.adb:242:23:inlined:machine.adb:317:16" (#"machine.adb" 242 0 0# #"machine.adb" 242 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )) else (
                 ( "GP_Sloc:machine.adb:245:20:inlined:machine.adb:317:16" (#"machine.adb" 245 0 0# #"machine.adb" 245 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) )))) )))) ) )) );
              ( "GP_Sloc:machine.adb:318:16" (#"machine.adb" 318 0 0# (if ((Machine__executeprogram__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:319:19" (#"machine.adb" 319 0 0# ()) );
               ( "GP_Sloc:machine.adb:319:19" (#"machine.adb" 319 0 0# ()) );
               ( "GP_Sloc:machine.adb:319:19" (#"machine.adb" 319 0 0# ()) );
               ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:319:19" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + 1))) (((Machine__pc.pc.int__content + 1) < 65536)))) then (
                ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:319:19" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__if__pc_assign__typeconv__add" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:319:19" "GP_Id:66" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:319:19:VC_RANGE_CHECK" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + 1))) )) )) );
                ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:319:19" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:319:19" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )) else (
               ( "GP_Sloc:machine.adb:321:19" (#"machine.adb" 321 0 0# #"machine.adb" 321 0 0# raise Return__exc) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 8)) then (
              ( ( "GP_Sloc:machine.adb:324:16" (#"machine.adb" 324 0 0# ()) );
              ( "GP_Sloc:machine.adb:324:16" (#"machine.adb" 324 0 0# (#"machine.adb" 324 0 0# ( (let machine__executeprogram__L_1__C57b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 324 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:324:16" "GP_Id:67" "comment:               DoMov(Inst.MovRd,Inst.MovOffs,Ret);
               ^ machine.adb:324:16:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__C57b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__movrd_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C57b__assume = Machine__executeprogram__L_1__C57b.c57b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__executeprogram__L_1__C57b.c57b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:324:16" (#"machine.adb" 324 0 0# (#"machine.adb" 324 0 0# ( (let machine__executeprogram__L_1__C58b__assume = (Instruction__offset__rep.to_rep((#"machine.adb" 324 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:324:16" "comment:               DoMov(Inst.MovRd,Inst.MovOffs,Ret);
               ^ machine.adb:324:16:VC_DISCRIMINANT_CHECK" "GP_Id:68" "GP_Shape:L_1_while__case__C58b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__movoffs_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C58b__assume = Machine__executeprogram__L_1__C58b.c58b) }))
              ;
               assume {  (Instruction__offset___axiom.dynamic_invariant Machine__executeprogram__L_1__C58b.c58b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:324:16" (#"machine.adb" 324 0 0# ()) );
              ( "GP_Sloc:machine.adb:324:16" (#"machine.adb" 324 0 0# ()) );
              ( "GP_Sloc:machine.adb:257:16:inlined:machine.adb:324:16" (#"machine.adb" 257 0 0# #"machine.adb" 257 0 0# Machine__regs.regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__executeprogram__L_1__C57b.c57b) ((Machine__dataval__rep.of_rep(Machine__executeprogram__L_1__C58b.c58b)))) )) );
              ( "GP_Sloc:machine.adb:258:11:inlined:machine.adb:324:16" (#"machine.adb" 258 0 0# #"machine.adb" 258 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) );
              ( "GP_Sloc:machine.adb:325:16" (#"machine.adb" 325 0 0# (if ((Machine__executeprogram__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:326:19" (#"machine.adb" 326 0 0# ()) );
               ( "GP_Sloc:machine.adb:326:19" (#"machine.adb" 326 0 0# ()) );
               ( "GP_Sloc:machine.adb:326:19" (#"machine.adb" 326 0 0# ()) );
               ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:326:19" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + 1))) (((Machine__pc.pc.int__content + 1) < 65536)))) then (
                ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:326:19" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__if__pc_assign__typeconv__add" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:326:19" "GP_Id:69" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:326:19:VC_RANGE_CHECK" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + 1))) )) )) );
                ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:326:19" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:326:19" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )) else (
               ( "GP_Sloc:machine.adb:328:19" (#"machine.adb" 328 0 0# #"machine.adb" 328 0 0# raise Return__exc) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 5)) then (
              ( ( "GP_Sloc:machine.adb:331:34" (#"machine.adb" 331 0 0# ()) );
              ( "GP_Sloc:machine.adb:331:39" (#"machine.adb" 331 0 0# ()) );
              ( "GP_Sloc:machine.adb:331:23" (#"machine.adb" 331 0 0# #"machine.adb" 331 0 0# Machine__executeprogram__result.result__.int__content <- ( (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 331 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:331:43" "GP_Id:70" "comment:               Result := Integer(Regs(Inst.RetRs));
                                          ^ machine.adb:331:43:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__result_assign__typeconv__ixdcomp__selectcomp" (Instruction__instr.rec__instruction__instr__retrs_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))))))) )) );
              ( "GP_Sloc:machine.adb:332:20" (#"machine.adb" 332 0 0# #"machine.adb" 332 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) );
              ( "GP_Sloc:machine.adb:333:16" (#"machine.adb" 333 0 0# #"machine.adb" 333 0 0# raise Return__exc) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 9)) then (
              ( ( "GP_Sloc:machine.adb:335:16" (#"machine.adb" 335 0 0# ()) );
              ( "GP_Sloc:machine.adb:335:16" (#"machine.adb" 335 0 0# ()) );
              ( "GP_Sloc:machine.adb:335:16" (#"machine.adb" 335 0 0# (#"machine.adb" 335 0 0# ( (let machine__executeprogram__L_1__C66b__assume = (Instruction__offset__rep.to_rep((#"machine.adb" 335 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:335:16" "GP_Id:71" "comment:               IncPC(Ret,Inst.JmpOffs);
               ^ machine.adb:335:16:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__C66b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__jmpoffs_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__executeprogram__L_1__C66b__assume = Machine__executeprogram__L_1__C66b.c66b) }))
              ;
               assume {  (Instruction__offset___axiom.dynamic_invariant Machine__executeprogram__L_1__C66b.c66b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:335:16" (#"machine.adb" 335 0 0# ()) );
              ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:335:16" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + Machine__executeprogram__L_1__C66b.c66b))) (((Machine__pc.pc.int__content + Machine__executeprogram__L_1__C66b.c66b) < 65536)))) then (
               ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:335:16" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:335:16" "GP_Id:72" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:335:16:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__pc_assign__typeconv__add" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + Machine__executeprogram__L_1__C66b.c66b))) )) )) );
               ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:335:16" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
               ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:335:16" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })))))) = 10)) then (
              ( ( "GP_Sloc:machine.adb:337:19" (#"machine.adb" 337 0 0# ()) );
              ( "GP_Sloc:machine.adb:337:24" (#"machine.adb" 337 0 0# ()) );
              ( "GP_Sloc:machine.adb:337:16" (#"machine.adb" 337 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 337 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:337:28" "GP_Id:76" "comment:               if Regs(Inst.JzRa) = 0 then
                           ^ machine.adb:337:28:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__if__cmp__ixdcomp__selectcomp" (Instruction__instr.rec__instruction__instr__jzra_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))))))) = 0)) then (
               ( ( "GP_Sloc:machine.adb:338:19" (#"machine.adb" 338 0 0# ()) );
               ( "GP_Sloc:machine.adb:338:19" (#"machine.adb" 338 0 0# ()) );
               ( "GP_Sloc:machine.adb:338:19" (#"machine.adb" 338 0 0# (#"machine.adb" 338 0 0# ( (let machine__executeprogram__L_1__C69b__assume = (Instruction__offset__rep.to_rep((#"machine.adb" 338 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:338:19" "GP_Id:74" "comment:                  IncPC(Ret,Inst.JzOffs);
                  ^ machine.adb:338:19:VC_DISCRIMINANT_CHECK" "GP_Shape:L_1_while__case__if__C69b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__jzoffs_({ Instruction__instr.__split_fields = Machine__executeprogram__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__executeprogram__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__executeprogram__inst.inst__attr__constrained })) )))) in (
                 assume {  (machine__executeprogram__L_1__C69b__assume = Machine__executeprogram__L_1__C69b.c69b) }))
               ;
                assume {  (Instruction__offset___axiom.dynamic_invariant Machine__executeprogram__L_1__C69b.c69b True False True True) } ))) );
               ( "GP_Sloc:machine.adb:338:19" (#"machine.adb" 338 0 0# ()) );
               ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:338:19" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + Machine__executeprogram__L_1__C69b.c69b))) (((Machine__pc.pc.int__content + Machine__executeprogram__L_1__C69b.c69b) < 65536)))) then (
                ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:338:19" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__if__pc_assign__typeconv__add" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:338:19" "GP_Id:75" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:338:19:VC_RANGE_CHECK" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + Machine__executeprogram__L_1__C69b.c69b))) )) )) );
                ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:338:19" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:338:19" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )) else (
               ( ( "GP_Sloc:machine.adb:340:19" (#"machine.adb" 340 0 0# ()) );
               ( "GP_Sloc:machine.adb:340:19" (#"machine.adb" 340 0 0# ()) );
               ( "GP_Sloc:machine.adb:340:19" (#"machine.adb" 340 0 0# ()) );
               ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:340:19" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + 1))) (((Machine__pc.pc.int__content + 1) < 65536)))) then (
                ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:340:19" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__if__pc_assign__typeconv__add" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:340:19" "GP_Id:73" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:340:19:VC_RANGE_CHECK" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + 1))) )) )) );
                ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:340:19" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:340:19" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )))) ) )) else (
              ( ( "GP_Sloc:machine.adb:343:16" (#"machine.adb" 343 0 0# ()) );
              ( "GP_Sloc:machine.adb:343:16" (#"machine.adb" 343 0 0# ()) );
              ( "GP_Sloc:machine.adb:343:16" (#"machine.adb" 343 0 0# ()) );
              ( "GP_Sloc:machine.adb:24:7:inlined:machine.adb:343:16" (#"machine.adb" 24 0 0# (if ((Boolean.andb((1 < (Machine__pc.pc.int__content + 1))) (((Machine__pc.pc.int__content + 1) < 65536)))) then (
               ( ( "GP_Sloc:machine.adb:26:12:inlined:machine.adb:343:16" (#"machine.adb" 26 0 0# #"machine.adb" 26 0 0# Machine__pc.pc.int__content <- ( (#"machine.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__case__if__pc_assign__typeconv__add" "GP_Sloc:machine.adb:26:42:inlined:machine.adb:343:16" "GP_Id:77" "comment:        PC := ProgramCounter(Integer(PC) + Integer(Offs));
                                         ^ machine.adb:26:42:inlined:machine.adb:343:16:VC_RANGE_CHECK" (Machine__programcounter.range_check_((Machine__pc.pc.int__content + 1))) )) )) );
               ( "GP_Sloc:machine.adb:27:13:inlined:machine.adb:343:16" (#"machine.adb" 27 0 0# #"machine.adb" 27 0 0# Machine__executeprogram__ret.ret.int__content <- ( 0 )) ) )) else (
               ( "GP_Sloc:machine.adb:29:13:inlined:machine.adb:343:16" (#"machine.adb" 29 0 0# #"machine.adb" 29 0 0# Machine__executeprogram__ret.ret.int__content <- ( 2 )) )))) ) )))) );
             ( "GP_Sloc:machine.adb:345:10" (#"machine.adb" 345 0 0# ()) );
             ( "GP_Sloc:machine.adb:345:24" (#"machine.adb" 345 0 0# ()) );
             ( "GP_Sloc:machine.adb:345:21" (#"machine.adb" 345 0 0# #"machine.adb" 345 0 0# Machine__executeprogram__cyclecount.cyclecount.int__content <- ( (#"machine.adb" 345 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:345:35" "GP_Id:78" "comment:         CycleCount := CycleCount + 1;
                                  ^ machine.adb:345:35:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__cyclecount_assign__add" (Standard__integer.range_check_((Machine__executeprogram__cyclecount.cyclecount.int__content + 1))) )) )) );
             () (* Check for the exit condition and loop statements appearing before the loop invariant of loop machine.adb:272 *)
             ;
             (if (not ( (Boolean.andb((Machine__executeprogram__cyclecount.cyclecount.int__content < Machine__executeprogram__cycles.cycles)) ((Machine__executeprogram__ret.ret.int__content = 0))) )) then (
               raise Machine__executeprogram__L_1.L_1)) )
            done )))
            )))
           )))
          )))
         )))
        )))
       )))
      )
    with
     Machine__executeprogram__L_1.L_1 -> ()
    end)) )) );
   ( "GP_Sloc:machine.adb:347:7" (#"machine.adb" 347 0 0# (if ((Machine__executeprogram__ret.ret.int__content = 0)) then (
    ( "GP_Sloc:machine.adb:349:14" (#"machine.adb" 349 0 0# #"machine.adb" 349 0 0# Machine__executeprogram__ret.ret.int__content <- ( 1 )) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for defining the value of the aggregate at machine.adb:358, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__detectinvalidbehaviour__regssigned__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Bool
 use        Machine__detectinvalidbehaviour__regssigned__aggregate_def
 use        Array__Int__Bool

 axiom def_axiom :
  (forall temp___327   : bool.
   (let temp___326 = (Machine__detectinvalidbehaviour__regssigned__aggregate_def.machine__detectinvalidbehaviour__regssigned__aggregate_def temp___327) in (
    (forall temp___328   : int.
     ((Array__Int__Bool.get temp___326 temp___328) = temp___327))))
  )

end

(* Module for defining the value of the aggregate at machine.adb:362, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__detectinvalidbehaviour__memorysigned__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Bool
 use        Machine__detectinvalidbehaviour__memorysigned__aggregate_def
 use        Array__Int__Bool

 axiom def_axiom :
  (forall temp___331   : bool.
   (let temp___330 = (Machine__detectinvalidbehaviour__memorysigned__aggregate_def.machine__detectinvalidbehaviour__memorysigned__aggregate_def temp___331) in (
    (forall temp___332   : int.
     ((Array__Int__Bool.get temp___330 temp___332) = temp___331))))
  )

end

(* Module for defining the value of the aggregate at machine.adb:365, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__detectinvalidbehaviour__check_regs__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Machine__dataval
 use        Machine__dataval___axiom
 use        Array__Int__Machine__dataval
 use        Machine__detectinvalidbehaviour__check_regs__aggregate_def
 use        Array__Int__Machine__dataval

 axiom def_axiom :
  (forall temp___335   : int.
   (let temp___334 = (Machine__detectinvalidbehaviour__check_regs__aggregate_def.machine__detectinvalidbehaviour__check_regs__aggregate_def temp___335) in (
    (if ((Machine__dataval___axiom.dynamic_invariant temp___335 True True True True)) then (
     (forall temp___336   : int.
      ((Array__Int__Machine__dataval.get temp___334 temp___336) = ( 0 : Machine__dataval.dataval )))) else true)))
  )

end

(* Module for defining the value of the aggregate at machine.adb:368, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Machine__detectinvalidbehaviour__check_memory__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Machine__dataval
 use        Machine__dataval___axiom
 use        Array__Int__Machine__dataval
 use        Machine__detectinvalidbehaviour__check_memory__aggregate_def
 use        Array__Int__Machine__dataval

 axiom def_axiom :
  (forall temp___339   : int.
   (let temp___338 = (Machine__detectinvalidbehaviour__check_memory__aggregate_def.machine__detectinvalidbehaviour__check_memory__aggregate_def temp___339) in (
    (if ((Machine__dataval___axiom.dynamic_invariant temp___339 True True True True)) then (
     (forall temp___340   : int.
      ((Array__Int__Machine__dataval.get temp___338 temp___340) = ( 0 : Machine__dataval.dataval )))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "detectinvalidbehaviour" defined at machine.ads:47, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Machine__detectinvalidbehaviour__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Instruction__debugprintinstr___axiom
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__reg
 use        Instruction__reg___axiom
 use        Instruction__reg__rep
 use        Instruction__addr
 use        Instruction__addr___axiom
 use        Instruction__offset
 use        Instruction__offset___axiom
 use        Instruction__offset__rep
 use        Instruction__instr
 use        Instruction__instr___axiom
 use        Machine__returncode___axiom
 use        Machine__programcounter___axiom
 use        Array__Int__Instruction__instr
 use        Machine__program___axiom
 use        Machine__regs
 use        Machine__memory
 use        Machine__detectinvalidbehaviour__prog
 use        Machine__detectinvalidbehaviour__cycles
 use        Machine__TdatavalB
 use        Machine__dataval
 use        Machine__dataval__rep
 use        Array__Int__Machine__dataval
 use        Array__Int__Machine__dataval
 use        Array__Int__Machine__dataval
 use        Array__Int__Bool
 use        Array__Int__Bool
 use        Machine__detectinvalidbehaviour__regssigned
 use        Array__Int__Bool
 use        Machine__detectinvalidbehaviour__memorysigned
 use        Array__Int__Machine__dataval
 use        Machine__detectinvalidbehaviour__check_regs
 use        Array__Int__Machine__dataval
 use        Machine__detectinvalidbehaviour__check_memory
 use        Machine__detectinvalidbehaviour__check_pc
 use        Machine__detectinvalidbehaviour__ret
 use        Machine__detectinvalidbehaviour__cyclecount
 use        Machine__detectinvalidbehaviour__inst
 use        Machine__detectinvalidbehaviour__L_2
 use        Machine__detectinvalidbehaviour__L_2__C91b
 use        Machine__detectinvalidbehaviour__L_2__C92b
 use        Machine__detectinvalidbehaviour__L_2__C93b
 use        Machine__detectinvalidbehaviour__L_2__C98b
 use        Machine__detectinvalidbehaviour__L_2__C99b
 use        Machine__detectinvalidbehaviour__L_2__C100b
 use        Machine__detectinvalidbehaviour__L_2__C105b
 use        Machine__detectinvalidbehaviour__L_2__C106b
 use        Machine__detectinvalidbehaviour__L_2__C107b
 use        Machine__detectinvalidbehaviour__L_2__C112b
 use        Machine__detectinvalidbehaviour__L_2__C113b
 use        Machine__detectinvalidbehaviour__L_2__C114b
 use        Machine__detectinvalidbehaviour__L_2__C124b
 use        Machine__detectinvalidbehaviour__L_2__C125b
 use        Machine__detectinvalidbehaviour__L_2__C126b
 use        Machine__detectinvalidbehaviour__L_2__B128b__a
 use        Machine__detectinvalidbehaviour__L_2__C131b
 use        Machine__detectinvalidbehaviour__L_2__C132b
 use        Machine__detectinvalidbehaviour__L_2__C133b
 use        Machine__detectinvalidbehaviour__L_2__B135b__a
 use        Array__Int__Bool
 use        Machine__detectinvalidbehaviour__regssigned__aggregate_def
 use        Array__Int__Bool
 use        Array__Int__Bool
 use        Machine__detectinvalidbehaviour__memorysigned__aggregate_def
 use        Array__Int__Bool
 use        Array__Int__Machine__dataval
 use        Machine__detectinvalidbehaviour__check_regs__aggregate_def
 use        Array__Int__Machine__dataval
 use        Array__Int__Machine__dataval
 use        Machine__detectinvalidbehaviour__check_memory__aggregate_def
 use        Array__Int__Machine__dataval
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Machine__dataval___axiom
 use        Machine__regs___axiom
 use        Machine__memory___axiom
 use        Machine__detectinvalidbehaviour__regssigned___axiom
 use        Machine__detectinvalidbehaviour__regssigned__aggregate_def___axiom
 use        Machine__detectinvalidbehaviour__memorysigned___axiom
 use        Machine__detectinvalidbehaviour__memorysigned__aggregate_def___axiom
 use        Machine__detectinvalidbehaviour__check_regs___axiom
 use        Machine__detectinvalidbehaviour__check_regs__aggregate_def___axiom
 use        Machine__detectinvalidbehaviour__check_memory___axiom
 use        Machine__detectinvalidbehaviour__check_memory__aggregate_def___axiom
 use        Machine__detectinvalidbehaviour__check_pc___axiom
 use        Machine__detectinvalidbehaviour__ret___axiom
 use        Machine__detectinvalidbehaviour__cyclecount___axiom
 use        Machine__detectinvalidbehaviour__inst___axiom
 use        Machine__detectinvalidbehaviour__L_2___axiom
 use        Machine__returncode___axiom
 use        Machine__programcounter___axiom
 use        Machine__program___axiom
 use        Machine__detectinvalidbehaviour__prog___axiom
 use        Machine__detectinvalidbehaviour__cycles___axiom
 use        Instruction__opcode___axiom
 use        Instruction__reg___axiom
 use        Instruction__addr___axiom
 use        Instruction__offset___axiom
 use        Instruction__instr___axiom
 use        Instruction__debugprintinstr___axiom
 use        Machine__TdatavalB___axiom
 use        Machine__detectinvalidbehaviour__L_2__C91b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C92b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C93b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C98b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C99b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C100b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C105b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C106b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C107b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C112b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C113b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C114b___axiom
 use        Machine__detectinvalidbehaviour__L_2__B128b__a___axiom
 use        Machine__detectinvalidbehaviour__L_2__C124b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C125b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C126b___axiom
 use        Machine__detectinvalidbehaviour__L_2__B135b__a___axiom
 use        Machine__detectinvalidbehaviour__L_2__C131b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C132b___axiom
 use        Machine__detectinvalidbehaviour__L_2__C133b___axiom

 val machine__detectinvalidbehaviour__result "model_projected" "model_trace:5910@result" "name:DetectInvalidBehaviour"  : bool__ref 
 
 let def #"machine.ads" 47 0 0#"W:diverges:N" "GP_Subp:machine.ads:47" 
   (__void_param : unit)
  requires { #"machine.ads" 47 0 0# true }
  ensures { #"machine.ads" 47 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram machine.ads:47 *)
  ;
  #"machine.ads" 47 0 0# assume { #"machine.ads" 47 0 0# (Machine__program___axiom.dynamic_invariant Machine__detectinvalidbehaviour__prog.prog True False True True) };
  #"machine.ads" 47 0 0# assume { #"machine.ads" 47 0 0# (Standard__integer___axiom.dynamic_invariant Machine__detectinvalidbehaviour__cycles.cycles True False True True) };
  #"machine.ads" 47 0 0# assume { #"machine.ads" 47 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram machine.ads:47 *)
  ;
  () (* Check for RTE in the Pre of the subprogram machine.ads:47 *)
  ;
  #"machine.ads" 47 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram machine.ads:47 *)
  ;
  #"machine.ads" 47 0 0# assume { #"machine.ads" 47 0 0# true };
  #"machine.ads" 47 0 0# try
   ( (#"machine.adb" 358 0 0# ());
   (#"machine.adb" 358 0 0# ());
   (#"machine.adb" 358 0 0# #"machine.adb" 358 0 0# Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content <- ( (Machine__detectinvalidbehaviour__regssigned__aggregate_def.machine__detectinvalidbehaviour__regssigned__aggregate_def((Boolean.of_int(0)))) ));
   (#"machine.adb" 362 0 0# ());
   (#"machine.adb" 362 0 0# ());
   (#"machine.adb" 362 0 0# #"machine.adb" 362 0 0# Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content <- ( (Machine__detectinvalidbehaviour__memorysigned__aggregate_def.machine__detectinvalidbehaviour__memorysigned__aggregate_def((Boolean.of_int(0)))) ));
   (#"machine.adb" 365 0 0# ());
   (#"machine.adb" 365 0 0# ());
   (#"machine.adb" 365 0 0# #"machine.adb" 365 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Machine__detectinvalidbehaviour__check_regs__aggregate_def.machine__detectinvalidbehaviour__check_regs__aggregate_def(0)) ));
   (#"machine.adb" 368 0 0# ());
   (#"machine.adb" 368 0 0# ());
   (#"machine.adb" 368 0 0# #"machine.adb" 368 0 0# Machine__detectinvalidbehaviour__check_memory.check_memory.Array__Int__Machine__dataval.map__content <- ( (Machine__detectinvalidbehaviour__check_memory__aggregate_def.machine__detectinvalidbehaviour__check_memory__aggregate_def(0)) ));
   (#"machine.adb" 371 0 0# ( #"machine.adb" 371 0 0# Machine__detectinvalidbehaviour__check_pc.check_pc.int__content <- ( 1 );
   #"machine.adb" 371 0 0# assume { #"machine.adb" 371 0 0# (Machine__programcounter___axiom.dynamic_invariant Machine__detectinvalidbehaviour__check_pc.check_pc.int__content True False True True) } ));
   (#"machine.adb" 374 0 0# ( #"machine.adb" 374 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 );
   #"machine.adb" 374 0 0# assume { #"machine.adb" 374 0 0# (Machine__returncode___axiom.dynamic_invariant Machine__detectinvalidbehaviour__ret.ret.int__content True False True True) } ));
   (#"machine.adb" 377 0 0# ( #"machine.adb" 377 0 0# Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content <- ( 0 );
   #"machine.adb" 377 0 0# assume { #"machine.adb" 377 0 0# (Standard__integer___axiom.dynamic_invariant Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content True False True True) } ));
   (#"machine.adb" 379 0 0# ( #"machine.adb" 379 0 0# abstract ensures {true}(let _ = #"machine.adb" 379 0 0# abstract ensures {true}(let _ = (let temp___343 = 0 in (
    ()))
    in (
    ()))
    end  in (
    ()))
    end ;
   #"machine.adb" 379 0 0# assume { #"machine.adb" 379 0 0# (Instruction__instr___axiom.default_initial_assumption { Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained } False) };
   #"machine.adb" 379 0 0# assume { #"machine.adb" 379 0 0# (Instruction__instr___axiom.dynamic_invariant { Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained } False False True True) } ));
   (#"machine.adb" 382 0 0# ());
   (#"machine.adb" 382 0 0# ());
   (#"machine.adb" 382 0 0# ());
   (#"machine.adb" 409 0 0# ());
   (#"machine.adb" 409 0 0# ());
   (#"machine.adb" 409 0 0# ());
   (#"machine.adb" 436 0 0# ());
   (#"machine.adb" 436 0 0# ());
   (#"machine.adb" 436 0 0# ());
   (#"machine.adb" 504 0 0# ());
   (#"machine.adb" 504 0 0# ());
   (#"machine.adb" 504 0 0# ());
   (#"machine.adb" 523 0 0# ());
   (#"machine.adb" 523 0 0# ());
   (#"machine.adb" 523 0 0# ());
   (#"machine.adb" 584 0 0# ());
   (#"machine.adb" 584 0 0# ());
   (#"machine.adb" 584 0 0# ());
   (#"machine.adb" 630 0 0# ());
   ( "GP_Sloc:machine.adb:630:53" (#"machine.adb" 630 0 0# ( () (* Translation of an Ada loop from machine.adb:630 *)
   ;
   (if ((Boolean.andb((Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content < Machine__detectinvalidbehaviour__cycles.cycles)) ((Machine__detectinvalidbehaviour__ret.ret.int__content = 0)))) then (
    #"machine.adb" 630 0 0# try
     ( #"machine.adb" 630 0 0# abstract ensures {true}(let _ = Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content in (
      ()))
      end ;
     (let temp___359 = #"machine.adb" 630 0 0# (any int
     ensures {#"machine.adb" 630 0 0# (result = Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content)} 
     ) in (
      ( #"machine.adb" 630 0 0# abstract ensures {true}(let _ = Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content in (
       ()))
       end ;
      (let temp___357 = #"machine.adb" 630 0 0# (any Array__Int__Machine__dataval.map
      ensures {#"machine.adb" 630 0 0# (result = Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content)} 
      ) in (
       ( #"machine.adb" 630 0 0# abstract ensures {true}(let _ = Machine__detectinvalidbehaviour__ret.ret.int__content in (
        ()))
        end ;
       (let temp___355 = #"machine.adb" 630 0 0# (any int
       ensures {#"machine.adb" 630 0 0# (result = Machine__detectinvalidbehaviour__ret.ret.int__content)} 
       ) in (
        ( #"machine.adb" 630 0 0# abstract ensures {true}(let _ = Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content in (
         ()))
         end ;
        (let temp___353 = #"machine.adb" 630 0 0# (any Array__Int__Bool.map
        ensures {#"machine.adb" 630 0 0# (result = Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content)} 
        ) in (
         ( #"machine.adb" 630 0 0# abstract ensures {true}(let _ = Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content in (
          ()))
          end ;
         (let temp___350 = #"machine.adb" 630 0 0# (any Array__Int__Bool.map
         ensures {#"machine.adb" 630 0 0# (result = Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content)} 
         ) in (
          ( #"machine.adb" 630 0 0# abstract ensures {true}(let _ = { Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained } in (
           ()))
           end ;
          (let temp___348 = #"machine.adb" 630 0 0# (any Instruction__instr.instr
          ensures {#"machine.adb" 630 0 0# (result = { Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })} 
          ) in (
           ( () (* First unroling of the loop statements appearing before the loop invariant of loop machine.adb:630 *)
           ;
           () (* While loop translating the Ada loop from machine.adb:630 *)
           ;
           #"machine.adb" 630 0 0# while True do
            ( () (* Assume implicit invariants from the loop machine.adb:630 *)
            ;
            #"machine.adb" 630 0 0# assume { #"machine.adb" 630 0 0# (Boolean.andb(( ( ( ( ( ( ( ( ( ( ( ( true /\ (Instruction__instr___axiom.dynamic_invariant { Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained } False True True True) ) /\ true ) /\ true ) /\ (forall temp___351 #"machine.adb" 630 0 0#  : int.
             (if (( (Instruction__reg.first <= temp___351) /\ (temp___351 <= Instruction__reg.last) )) then (
              (if (( false /\ ( false /\ ( false /\ ( false /\ false ) ) ) )) then (
               ((Array__Int__Bool.get Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content temp___351) = (Array__Int__Bool.get temp___350 temp___351))) else (
               true))) else true)) ) /\ true ) /\ (forall temp___354 #"machine.adb" 630 0 0#  : int.
             (if (( (Instruction__addr.first <= temp___354) /\ (temp___354 <= Instruction__addr.last) )) then (
              (if (( false /\ ( false /\ false ) )) then (
               ((Array__Int__Bool.get Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content temp___354) = (Array__Int__Bool.get temp___353 temp___354))) else (
               true))) else true)) ) /\ (Machine__returncode___axiom.dynamic_invariant Machine__detectinvalidbehaviour__ret.ret.int__content False True True True) ) /\ true ) /\ true ) /\ (forall temp___358 #"machine.adb" 630 0 0#  : int.
             (if (( (Instruction__reg.first <= temp___358) /\ (temp___358 <= Instruction__reg.last) )) then (
              (if (( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ ( false /\ false ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )) then (
               ((Array__Int__Machine__dataval.get Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content temp___358) = (Array__Int__Machine__dataval.get temp___357 temp___358))) else (
               true))) else true)) ) /\ (Standard__integer___axiom.dynamic_invariant Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content False True True True) ) /\ true )) (( (Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content < Machine__detectinvalidbehaviour__cycles.cycles) /\ (Machine__detectinvalidbehaviour__ret.ret.int__content = 0) ))) };
            () (* Check for absence of RTE in the invariant of loop machine.adb:630 *)
            ;
            () (* Loop statements appearing after the loop invariant of loop machine.adb:630 *)
            ;
            ( "GP_Sloc:machine.adb:631:10" (#"machine.adb" 631 0 0# ()) );
            ( "GP_Sloc:machine.adb:631:23" (#"machine.adb" 631 0 0# ()) );
            ( "GP_Sloc:machine.adb:631:15" (#"machine.adb" 631 0 0# (let temp___347 = { ( (let temp___345 = (Array__Int__Instruction__instr.get(Machine__detectinvalidbehaviour__prog.prog) (Machine__detectinvalidbehaviour__check_pc.check_pc.int__content)) in (
            (let temp___346 = { Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained } in (
             ( #"machine.adb" 631 0 0# assert { #"machine.adb" 631 0 0# (#"machine.adb" 631 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:631:15" "GP_Id:79" "comment:         Inst := Prog(Check_PC);
              ^ machine.adb:631:15:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__inst_assign" (if ((Instruction__instr.attr__constrained temp___346)) then (
              ((Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs temp___345)) = (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs temp___346)))) else true) )) };
             temp___345 )))
            ))
             ) with Instruction__instr.attr__constrained = (Instruction__instr.attr__constrained({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) } in (
             (  Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content <- ( (Instruction__instr.__split_fields(temp___347)) );
              Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content <- ( (Instruction__instr.__split_discrs(temp___347)) ) )))
            ) );
            ( "GP_Sloc:machine.adb:632:26" (#"machine.adb" 632 0 0# ()) );
            ( "GP_Sloc:machine.adb:632:10" (#"machine.adb" 632 0 0# ()) );
            ( "GP_Sloc:machine.adb:632:10" (#"machine.adb" 632 0 0# ( (Instruction__debugprintinstr___axiom.debugprintinstr({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )) );
            ( "GP_Sloc:machine.adb:634:15" (#"machine.adb" 634 0 0# ()) );
            ( "GP_Sloc:machine.adb:634:10" (#"machine.adb" 634 0 0# (if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 1)) then (
             ( ( "GP_Sloc:machine.adb:636:19" (#"machine.adb" 636 0 0# ()) );
             ( "GP_Sloc:machine.adb:636:30" (#"machine.adb" 636 0 0# ()) );
             ( "GP_Sloc:machine.adb:636:47" (#"machine.adb" 636 0 0# ()) );
             ( "GP_Sloc:machine.adb:636:58" (#"machine.adb" 636 0 0# ()) );
             ( "GP_Sloc:machine.adb:636:16" (#"machine.adb" 636 0 0# (if ((Boolean.andb((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 636 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:636:34" "GP_Id:88" "comment:               if RegsSigned(Inst.AddRs1) and RegsSigned(Inst.AddRs2) then
                                 ^ machine.adb:636:34:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" (Instruction__instr.rec__instruction__instr__addrs1_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))) ((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 636 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" "GP_Sloc:machine.adb:636:62" "GP_Id:89" "comment:               if RegsSigned(Inst.AddRs1) and RegsSigned(Inst.AddRs2) then
                                                             ^ machine.adb:636:62:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__addrs2_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))))) then (
              ( ( "GP_Sloc:machine.adb:637:63" (#"machine.adb" 637 0 0# ()) );
              ( "GP_Sloc:machine.adb:637:19" (#"machine.adb" 637 0 0# ()) );
              ( "GP_Sloc:machine.adb:637:19" (#"machine.adb" 637 0 0# (#"machine.adb" 637 0 0# ( (let machine__detectinvalidbehaviour__L_2__C91b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 637 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:637:19" "GP_Id:80" "comment:                  CheckAdd(Inst.AddRd,Inst.AddRs1,Inst.AddRs2,Ret);
                  ^ machine.adb:637:19:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__C91b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__addrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C91b__assume = Machine__detectinvalidbehaviour__L_2__C91b.c91b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C91b.c91b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:637:19" (#"machine.adb" 637 0 0# (#"machine.adb" 637 0 0# ( (let machine__detectinvalidbehaviour__L_2__C92b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 637 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:637:19" "comment:                  CheckAdd(Inst.AddRd,Inst.AddRs1,Inst.AddRs2,Ret);
                  ^ machine.adb:637:19:VC_DISCRIMINANT_CHECK" "GP_Id:81" "GP_Shape:L_2_while__case__if__C92b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__addrs1_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C92b__assume = Machine__detectinvalidbehaviour__L_2__C92b.c92b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C92b.c92b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:637:19" (#"machine.adb" 637 0 0# (#"machine.adb" 637 0 0# ( (let machine__detectinvalidbehaviour__L_2__C93b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 637 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:637:19" "comment:                  CheckAdd(Inst.AddRd,Inst.AddRs1,Inst.AddRs2,Ret);
                  ^ machine.adb:637:19:VC_DISCRIMINANT_CHECK" "GP_Id:82" "GP_Shape:L_2_while__case__if__C93b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__addrs2_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C93b__assume = Machine__detectinvalidbehaviour__L_2__C93b.c93b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C93b.c93b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:637:19" (#"machine.adb" 637 0 0# ()) );
              ( "GP_Sloc:machine.adb:637:19" (#"machine.adb" 637 0 0# ()) );
              ( "GP_Sloc:machine.adb:387:10:inlined:machine.adb:637:19" (#"machine.adb" 387 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C92b.c92b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C92b.c92b)))) <= 0)))) then (
               ( "GP_Sloc:machine.adb:388:13:inlined:machine.adb:637:19" (#"machine.adb" 388 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C93b.c93b)))) > (#"machine.adb" 388 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:388:49:inlined:machine.adb:637:19" "GP_Id:86" "comment:            if Check_Regs(Rs2) > (DataVal'First - Check_Regs(Rs1)) and Check_Regs(Rs2) < DataVal'Last then
                                                ^ machine.adb:388:49:inlined:machine.adb:637:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__and__cmp__sub" (Machine__TdatavalB.range_check_((( -2147483648 ) - (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C92b.c92b))))))) )))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C93b.c93b)))) < 2147483647)))) then (
                ( ( "GP_Sloc:machine.adb:389:31:inlined:machine.adb:637:19" (#"machine.adb" 389 0 0# #"machine.adb" 389 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C91b.c91b) ((Machine__dataval__rep.of_rep((#"machine.adb" 389 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:389:50:inlined:machine.adb:637:19" "GP_Id:85" "comment:               Check_Regs(Rd) := Check_Regs(Rs1) + Check_Regs(Rs2);
                                                 ^ machine.adb:389:50:inlined:machine.adb:637:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__check_regs_assign__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C92b.c92b)))) + (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C93b.c93b))))))) )))))) )) );
                ( "GP_Sloc:machine.adb:390:20:inlined:machine.adb:637:19" (#"machine.adb" 390 0 0# #"machine.adb" 390 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:392:20:inlined:machine.adb:637:19" (#"machine.adb" 392 0 0# #"machine.adb" 392 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:395:13:inlined:machine.adb:637:19" (#"machine.adb" 395 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C92b.c92b)))) < 2147483647)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C92b.c92b)))) > 0)))) then (
                ( "GP_Sloc:machine.adb:396:16:inlined:machine.adb:637:19" (#"machine.adb" 396 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C93b.c93b)))) < (#"machine.adb" 396 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:396:51:inlined:machine.adb:637:19" "GP_Id:84" "comment:               if Check_Regs(Rs2) < (DataVal'Last - Check_Regs(Rs1)) and Check_Regs(Rs2) > DataVal'First then
                                                  ^ machine.adb:396:51:inlined:machine.adb:637:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__and__cmp__sub" (Machine__TdatavalB.range_check_((2147483647 - (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C92b.c92b))))))) )))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C93b.c93b)))) > ( -2147483648 ))))) then (
                 ( ( "GP_Sloc:machine.adb:397:34:inlined:machine.adb:637:19" (#"machine.adb" 397 0 0# #"machine.adb" 397 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C91b.c91b) ((Machine__dataval__rep.of_rep((#"machine.adb" 397 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:397:53:inlined:machine.adb:637:19" "GP_Id:83" "comment:                  Check_Regs(Rd) := Check_Regs(Rs1) + Check_Regs(Rs2);
                                                    ^ machine.adb:397:53:inlined:machine.adb:637:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__check_regs_assign__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C92b.c92b)))) + (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C93b.c93b))))))) )))))) )) );
                 ( "GP_Sloc:machine.adb:398:23:inlined:machine.adb:637:19" (#"machine.adb" 398 0 0# #"machine.adb" 398 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:400:23:inlined:machine.adb:637:19" (#"machine.adb" 400 0 0# #"machine.adb" 400 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:403:20:inlined:machine.adb:637:19" (#"machine.adb" 403 0 0# #"machine.adb" 403 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )))) );
              ( "GP_Sloc:machine.adb:638:22" (#"machine.adb" 638 0 0# ()) );
              ( "GP_Sloc:machine.adb:638:19" (#"machine.adb" 638 0 0# (if ((Machine__detectinvalidbehaviour__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:639:22" (#"machine.adb" 639 0 0# ()) );
               ( "GP_Sloc:machine.adb:639:33" (#"machine.adb" 639 0 0# ()) );
               ( "GP_Sloc:machine.adb:639:45" (#"machine.adb" 639 0 0# #"machine.adb" 639 0 0# Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 639 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:639:37" "GP_Id:87" "comment:                     RegsSigned(Inst.AddRd) := True;
                                    ^ machine.adb:639:37:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__if__regssigned_assign__ixdcomp__selectcomp" (Instruction__instr.rec__instruction__instr__addrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))) ((Boolean.of_int(1)))) )) ) )) else (
               ( "GP_Sloc:machine.adb:641:22" (#"machine.adb" 641 0 0# ( #"machine.adb" 641 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
               #"machine.adb" 641 0 0# raise Return__exc )) )))) ) )) else (
              ( "GP_Sloc:machine.adb:644:19" (#"machine.adb" 644 0 0# ( #"machine.adb" 644 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
              #"machine.adb" 644 0 0# raise Return__exc )) )))) ) )) else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 2)) then (
             ( ( "GP_Sloc:machine.adb:647:19" (#"machine.adb" 647 0 0# ()) );
             ( "GP_Sloc:machine.adb:647:30" (#"machine.adb" 647 0 0# ()) );
             ( "GP_Sloc:machine.adb:647:47" (#"machine.adb" 647 0 0# ()) );
             ( "GP_Sloc:machine.adb:647:58" (#"machine.adb" 647 0 0# ()) );
             ( "GP_Sloc:machine.adb:647:16" (#"machine.adb" 647 0 0# (if ((Boolean.andb((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 647 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" "GP_Sloc:machine.adb:647:34" "GP_Id:98" "comment:               if RegsSigned(Inst.SubRs1) and RegsSigned(Inst.SubRs2) then
                                 ^ machine.adb:647:34:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__subrs1_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))) ((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 647 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" "GP_Sloc:machine.adb:647:62" "GP_Id:99" "comment:               if RegsSigned(Inst.SubRs1) and RegsSigned(Inst.SubRs2) then
                                                             ^ machine.adb:647:62:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__subrs2_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))))) then (
              ( ( "GP_Sloc:machine.adb:648:63" (#"machine.adb" 648 0 0# ()) );
              ( "GP_Sloc:machine.adb:648:19" (#"machine.adb" 648 0 0# ()) );
              ( "GP_Sloc:machine.adb:648:19" (#"machine.adb" 648 0 0# (#"machine.adb" 648 0 0# ( (let machine__detectinvalidbehaviour__L_2__C98b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 648 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:648:19" "GP_Id:90" "comment:                  CheckSub(Inst.SubRd,Inst.SubRs1,Inst.SubRs2,Ret);
                  ^ machine.adb:648:19:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__C98b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__subrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C98b__assume = Machine__detectinvalidbehaviour__L_2__C98b.c98b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C98b.c98b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:648:19" (#"machine.adb" 648 0 0# (#"machine.adb" 648 0 0# ( (let machine__detectinvalidbehaviour__L_2__C99b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 648 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:648:19" "comment:                  CheckSub(Inst.SubRd,Inst.SubRs1,Inst.SubRs2,Ret);
                  ^ machine.adb:648:19:VC_DISCRIMINANT_CHECK" "GP_Id:91" "GP_Shape:L_2_while__case__if__C99b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__subrs1_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C99b__assume = Machine__detectinvalidbehaviour__L_2__C99b.c99b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C99b.c99b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:648:19" (#"machine.adb" 648 0 0# (#"machine.adb" 648 0 0# ( (let machine__detectinvalidbehaviour__L_2__C100b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 648 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:648:19" "comment:                  CheckSub(Inst.SubRd,Inst.SubRs1,Inst.SubRs2,Ret);
                  ^ machine.adb:648:19:VC_DISCRIMINANT_CHECK" "GP_Id:92" "GP_Shape:L_2_while__case__if__C100b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__subrs2_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C100b__assume = Machine__detectinvalidbehaviour__L_2__C100b.c100b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C100b.c100b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:648:19" (#"machine.adb" 648 0 0# ()) );
              ( "GP_Sloc:machine.adb:648:19" (#"machine.adb" 648 0 0# ()) );
              ( "GP_Sloc:machine.adb:414:10:inlined:machine.adb:648:19" (#"machine.adb" 414 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C99b.c99b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C99b.c99b)))) <= 0)))) then (
               ( "GP_Sloc:machine.adb:415:13:inlined:machine.adb:648:19" (#"machine.adb" 415 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C100b.c100b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C100b.c100b)))) < (#"machine.adb" 415 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:415:87:inlined:machine.adb:648:19" "GP_Id:96" "comment:            if Check_Regs(Rs2) > DataVal'First and Check_Regs(Rs2) < (Check_Regs(Rs1) + DataVal'Last) then
                                                                                      ^ machine.adb:415:87:inlined:machine.adb:648:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__and__cmp__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C99b.c99b)))) + 2147483647))) )))))) then (
                ( ( "GP_Sloc:machine.adb:416:31:inlined:machine.adb:648:19" (#"machine.adb" 416 0 0# #"machine.adb" 416 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C98b.c98b) ((Machine__dataval__rep.of_rep((#"machine.adb" 416 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:416:50:inlined:machine.adb:648:19" "GP_Id:95" "comment:               Check_Regs(Rd) := Check_Regs(Rs1) - Check_Regs(Rs2);
                                                 ^ machine.adb:416:50:inlined:machine.adb:648:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__check_regs_assign__sub" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C99b.c99b)))) - (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C100b.c100b))))))) )))))) )) );
                ( "GP_Sloc:machine.adb:417:20:inlined:machine.adb:648:19" (#"machine.adb" 417 0 0# #"machine.adb" 417 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:419:20:inlined:machine.adb:648:19" (#"machine.adb" 419 0 0# #"machine.adb" 419 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:422:13:inlined:machine.adb:648:19" (#"machine.adb" 422 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C99b.c99b)))) > 0)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__regs.regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C99b.c99b)))) < 2147483647)))) then (
                ( "GP_Sloc:machine.adb:423:16:inlined:machine.adb:648:19" (#"machine.adb" 423 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C100b.c100b)))) > (#"machine.adb" 423 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:423:52:inlined:machine.adb:648:19" "GP_Id:94" "comment:               if Check_Regs(Rs2) > (DataVal'First + Check_Regs(Rs1)) and Check_Regs(Rs2) < DataVal'Last then
                                                   ^ machine.adb:423:52:inlined:machine.adb:648:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__and__cmp__add" (Machine__TdatavalB.range_check_((( -2147483648 ) + (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C99b.c99b))))))) )))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C100b.c100b)))) < 2147483647)))) then (
                 ( ( "GP_Sloc:machine.adb:424:34:inlined:machine.adb:648:19" (#"machine.adb" 424 0 0# #"machine.adb" 424 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C98b.c98b) ((Machine__dataval__rep.of_rep((#"machine.adb" 424 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:424:53:inlined:machine.adb:648:19" "GP_Id:93" "comment:                  Check_Regs(Rd) := Check_Regs(Rs1) - Check_Regs(Rs2);
                                                    ^ machine.adb:424:53:inlined:machine.adb:648:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__check_regs_assign__sub" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C99b.c99b)))) - (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C100b.c100b))))))) )))))) )) );
                 ( "GP_Sloc:machine.adb:425:23:inlined:machine.adb:648:19" (#"machine.adb" 425 0 0# #"machine.adb" 425 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:427:23:inlined:machine.adb:648:19" (#"machine.adb" 427 0 0# #"machine.adb" 427 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:430:20:inlined:machine.adb:648:19" (#"machine.adb" 430 0 0# #"machine.adb" 430 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )))) );
              ( "GP_Sloc:machine.adb:649:22" (#"machine.adb" 649 0 0# ()) );
              ( "GP_Sloc:machine.adb:649:19" (#"machine.adb" 649 0 0# (if ((Machine__detectinvalidbehaviour__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:650:22" (#"machine.adb" 650 0 0# ()) );
               ( "GP_Sloc:machine.adb:650:33" (#"machine.adb" 650 0 0# ()) );
               ( "GP_Sloc:machine.adb:650:45" (#"machine.adb" 650 0 0# #"machine.adb" 650 0 0# Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 650 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__if__regssigned_assign__ixdcomp__selectcomp" "GP_Sloc:machine.adb:650:37" "GP_Id:97" "comment:                     RegsSigned(Inst.SubRd) := True;
                                    ^ machine.adb:650:37:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__subrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))) ((Boolean.of_int(1)))) )) ) )) else (
               ( "GP_Sloc:machine.adb:652:22" (#"machine.adb" 652 0 0# ( #"machine.adb" 652 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
               #"machine.adb" 652 0 0# raise Return__exc )) )))) ) )) else (
              ( "GP_Sloc:machine.adb:655:19" (#"machine.adb" 655 0 0# ( #"machine.adb" 655 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
              #"machine.adb" 655 0 0# raise Return__exc )) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 3)) then (
             ( ( "GP_Sloc:machine.adb:658:19" (#"machine.adb" 658 0 0# ()) );
             ( "GP_Sloc:machine.adb:658:30" (#"machine.adb" 658 0 0# ()) );
             ( "GP_Sloc:machine.adb:658:47" (#"machine.adb" 658 0 0# ()) );
             ( "GP_Sloc:machine.adb:658:58" (#"machine.adb" 658 0 0# ()) );
             ( "GP_Sloc:machine.adb:658:16" (#"machine.adb" 658 0 0# (if ((Boolean.andb((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 658 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" "GP_Sloc:machine.adb:658:34" "GP_Id:116" "comment:               if RegsSigned(Inst.MulRs1) and RegsSigned(Inst.MulRs2) then
                                 ^ machine.adb:658:34:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__mulrs1_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))) ((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 658 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" "GP_Sloc:machine.adb:658:62" "GP_Id:117" "comment:               if RegsSigned(Inst.MulRs1) and RegsSigned(Inst.MulRs2) then
                                                             ^ machine.adb:658:62:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__mulrs2_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))))) then (
              ( ( "GP_Sloc:machine.adb:659:63" (#"machine.adb" 659 0 0# ()) );
              ( "GP_Sloc:machine.adb:659:19" (#"machine.adb" 659 0 0# ()) );
              ( "GP_Sloc:machine.adb:659:19" (#"machine.adb" 659 0 0# (#"machine.adb" 659 0 0# ( (let machine__detectinvalidbehaviour__L_2__C105b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 659 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:659:19" "GP_Id:100" "comment:                  CheckMul(Inst.MulRd,Inst.MulRs1,Inst.MulRs2,Ret);
                  ^ machine.adb:659:19:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__C105b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__mulrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C105b__assume = Machine__detectinvalidbehaviour__L_2__C105b.c105b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C105b.c105b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:659:19" (#"machine.adb" 659 0 0# (#"machine.adb" 659 0 0# ( (let machine__detectinvalidbehaviour__L_2__C106b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 659 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:659:19" "comment:                  CheckMul(Inst.MulRd,Inst.MulRs1,Inst.MulRs2,Ret);
                  ^ machine.adb:659:19:VC_DISCRIMINANT_CHECK" "GP_Id:101" "GP_Shape:L_2_while__case__if__C106b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__mulrs1_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C106b__assume = Machine__detectinvalidbehaviour__L_2__C106b.c106b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C106b.c106b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:659:19" (#"machine.adb" 659 0 0# (#"machine.adb" 659 0 0# ( (let machine__detectinvalidbehaviour__L_2__C107b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 659 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:659:19" "comment:                  CheckMul(Inst.MulRd,Inst.MulRs1,Inst.MulRs2,Ret);
                  ^ machine.adb:659:19:VC_DISCRIMINANT_CHECK" "GP_Id:102" "GP_Shape:L_2_while__case__if__C107b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__mulrs2_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C107b__assume = Machine__detectinvalidbehaviour__L_2__C107b.c107b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C107b.c107b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:659:19" (#"machine.adb" 659 0 0# ()) );
              ( "GP_Sloc:machine.adb:659:19" (#"machine.adb" 659 0 0# ()) );
              ( "GP_Sloc:machine.adb:441:7:inlined:machine.adb:659:19" (#"machine.adb" 441 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b)))) >= 0)) then (
               ( "GP_Sloc:machine.adb:442:10:inlined:machine.adb:659:19" (#"machine.adb" 442 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) < ( -1 ))))) then (
                ( "GP_Sloc:machine.adb:443:13:inlined:machine.adb:659:19" (#"machine.adb" 443 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b)))) < (#"machine.adb" 443 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__cmp__div" "GP_Sloc:machine.adb:443:47:inlined:machine.adb:659:19" "GP_Id:114" "comment:            if Check_Regs(Rs2) < DataVal'First/ Check_Regs(Rs1) then
                                              ^ machine.adb:443:47:inlined:machine.adb:659:19:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_((#"machine.adb" 443 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__cmp__div" "GP_Sloc:machine.adb:443:47:inlined:machine.adb:659:19" "GP_Id:113" "comment:            if Check_Regs(Rs2) < DataVal'First/ Check_Regs(Rs1) then
                                              ^ machine.adb:443:47:inlined:machine.adb:659:19:VC_DIVISION_CHECK" (Int_Division.div_(( -2147483648 )) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))))) )))) )))) then (
                 ( ( "GP_Sloc:machine.adb:444:31:inlined:machine.adb:659:19" (#"machine.adb" 444 0 0# #"machine.adb" 444 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C105b.c105b) ((Machine__dataval__rep.of_rep((#"machine.adb" 444 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__check_regs_assign__mult" "GP_Sloc:machine.adb:444:50:inlined:machine.adb:659:19" "GP_Id:112" "comment:               Check_Regs(Rd) := Check_Regs(Rs1) * Check_Regs(Rs2);
                                                 ^ machine.adb:444:50:inlined:machine.adb:659:19:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b))))))) )))))) )) );
                 ( "GP_Sloc:machine.adb:445:20:inlined:machine.adb:659:19" (#"machine.adb" 445 0 0# #"machine.adb" 445 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:447:20:inlined:machine.adb:659:19" (#"machine.adb" 447 0 0# #"machine.adb" 447 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:450:13:inlined:machine.adb:659:19" (#"machine.adb" 450 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) > ( -1 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) <= 1)))) then (
                 ( "GP_Sloc:machine.adb:451:16:inlined:machine.adb:659:19" (#"machine.adb" 451 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b)))) < 2147483647)) then (
                  ( ( "GP_Sloc:machine.adb:452:34:inlined:machine.adb:659:19" (#"machine.adb" 452 0 0# #"machine.adb" 452 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C105b.c105b) ((Machine__dataval__rep.of_rep((#"machine.adb" 452 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__if__check_regs_assign__mult" "GP_Sloc:machine.adb:452:53:inlined:machine.adb:659:19" "GP_Id:111" "comment:                  Check_Regs(Rd) := Check_Regs(Rs1) * Check_Regs(Rs2);
                                                    ^ machine.adb:452:53:inlined:machine.adb:659:19:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b))))))) )))))) )) );
                  ( "GP_Sloc:machine.adb:453:22:inlined:machine.adb:659:19" (#"machine.adb" 453 0 0# #"machine.adb" 453 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                  ( "GP_Sloc:machine.adb:455:23:inlined:machine.adb:659:19" (#"machine.adb" 455 0 0# #"machine.adb" 455 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                 ( "GP_Sloc:machine.adb:458:16:inlined:machine.adb:659:19" (#"machine.adb" 458 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) > 1)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) < 2147483647)))) then (
                  ( "GP_Sloc:machine.adb:459:19:inlined:machine.adb:659:19" (#"machine.adb" 459 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b)))) < (#"machine.adb" 459 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__if__if__cmp__div" "GP_Sloc:machine.adb:459:52:inlined:machine.adb:659:19" "GP_Id:110" "comment:                  if Check_Regs(Rs2) < DataVal'Last/ Check_Regs(Rs1) then
                                                   ^ machine.adb:459:52:inlined:machine.adb:659:19:VC_DIVISION_CHECK" (Int_Division.div_(2147483647) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))))) )))) then (
                   ( ( "GP_Sloc:machine.adb:460:37:inlined:machine.adb:659:19" (#"machine.adb" 460 0 0# #"machine.adb" 460 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C105b.c105b) ((Machine__dataval__rep.of_rep((#"machine.adb" 460 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__if__if__check_regs_assign__mult" "GP_Sloc:machine.adb:460:56:inlined:machine.adb:659:19" "GP_Id:109" "comment:                     Check_Regs(Rd) := Check_Regs(Rs1) * Check_Regs(Rs2);
                                                       ^ machine.adb:460:56:inlined:machine.adb:659:19:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b))))))) )))))) )) );
                   ( "GP_Sloc:machine.adb:461:25:inlined:machine.adb:659:19" (#"machine.adb" 461 0 0# #"machine.adb" 461 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                   ( "GP_Sloc:machine.adb:463:25:inlined:machine.adb:659:19" (#"machine.adb" 463 0 0# #"machine.adb" 463 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                  ( "GP_Sloc:machine.adb:466:23:inlined:machine.adb:659:19" (#"machine.adb" 466 0 0# #"machine.adb" 466 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )))) )))) )) else (
               ( "GP_Sloc:machine.adb:471:10:inlined:machine.adb:659:19" (#"machine.adb" 471 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) < 0)))) then (
                ( "GP_Sloc:machine.adb:472:13:inlined:machine.adb:659:19" (#"machine.adb" 472 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b)))) > (#"machine.adb" 472 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:machine.adb:472:46:inlined:machine.adb:659:19" "GP_Id:108" "comment:            if Check_Regs(Rs2) > DataVal'Last/Check_Regs(Rs1) then
                                             ^ machine.adb:472:46:inlined:machine.adb:659:19:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__cmp__div" (Int_Division.div_(2147483647) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))))) )))) then (
                 ( ( "GP_Sloc:machine.adb:473:31:inlined:machine.adb:659:19" (#"machine.adb" 473 0 0# #"machine.adb" 473 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C105b.c105b) ((Machine__dataval__rep.of_rep((#"machine.adb" 473 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:473:50:inlined:machine.adb:659:19" "GP_Id:107" "comment:               Check_Regs(Rd) := Check_Regs(Rs1) * Check_Regs(Rs2);
                                                 ^ machine.adb:473:50:inlined:machine.adb:659:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__check_regs_assign__mult" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b))))))) )))))) )) );
                 ( "GP_Sloc:machine.adb:474:20:inlined:machine.adb:659:19" (#"machine.adb" 474 0 0# #"machine.adb" 474 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:476:20:inlined:machine.adb:659:19" (#"machine.adb" 476 0 0# #"machine.adb" 476 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:479:13:inlined:machine.adb:659:19" (#"machine.adb" 479 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) > 0)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) <= 1)))) then (
                 ( "GP_Sloc:machine.adb:480:16:inlined:machine.adb:659:19" (#"machine.adb" 480 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b)))) > ( -2147483648 ))) then (
                  ( ( "GP_Sloc:machine.adb:481:34:inlined:machine.adb:659:19" (#"machine.adb" 481 0 0# #"machine.adb" 481 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C105b.c105b) ((Machine__dataval__rep.of_rep((#"machine.adb" 481 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:481:53:inlined:machine.adb:659:19" "GP_Id:106" "comment:                  Check_Regs(Rd) := Check_Regs(Rs1) * Check_Regs(Rs2);
                                                    ^ machine.adb:481:53:inlined:machine.adb:659:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__if__check_regs_assign__mult" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b))))))) )))))) )) );
                  ( "GP_Sloc:machine.adb:482:22:inlined:machine.adb:659:19" (#"machine.adb" 482 0 0# #"machine.adb" 482 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                  ( "GP_Sloc:machine.adb:484:23:inlined:machine.adb:659:19" (#"machine.adb" 484 0 0# #"machine.adb" 484 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                 ( "GP_Sloc:machine.adb:487:16:inlined:machine.adb:659:19" (#"machine.adb" 487 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) > 1)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) < 2147483647)))) then (
                  ( "GP_Sloc:machine.adb:488:19:inlined:machine.adb:659:19" (#"machine.adb" 488 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b)))) > (#"machine.adb" 488 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:488:53:inlined:machine.adb:659:19" "GP_Shape:L_2_while__case__if__if__if__if__if__if__cmp__div" "GP_Id:105" "comment:                  if Check_Regs(Rs2) > DataVal'First/Check_Regs(Rs1) then
                                                    ^ machine.adb:488:53:inlined:machine.adb:659:19:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_((#"machine.adb" 488 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:machine.adb:488:53:inlined:machine.adb:659:19" "GP_Id:104" "comment:                  if Check_Regs(Rs2) > DataVal'First/Check_Regs(Rs1) then
                                                    ^ machine.adb:488:53:inlined:machine.adb:659:19:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__if__if__cmp__div" (Int_Division.div_(( -2147483648 )) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))))) )))) )))) then (
                   ( ( "GP_Sloc:machine.adb:489:37:inlined:machine.adb:659:19" (#"machine.adb" 489 0 0# #"machine.adb" 489 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C105b.c105b) ((Machine__dataval__rep.of_rep((#"machine.adb" 489 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:489:56:inlined:machine.adb:659:19" "GP_Id:103" "comment:                     Check_Regs(Rd) := Check_Regs(Rs1) * Check_Regs(Rs2);
                                                       ^ machine.adb:489:56:inlined:machine.adb:659:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__if__if__if__if__if__check_regs_assign__mult" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C106b.c106b)))) * (Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C107b.c107b))))))) )))))) )) );
                   ( "GP_Sloc:machine.adb:490:25:inlined:machine.adb:659:19" (#"machine.adb" 490 0 0# #"machine.adb" 490 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                   ( "GP_Sloc:machine.adb:492:25:inlined:machine.adb:659:19" (#"machine.adb" 492 0 0# #"machine.adb" 492 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                  ( "GP_Sloc:machine.adb:495:23:inlined:machine.adb:659:19" (#"machine.adb" 495 0 0# #"machine.adb" 495 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )))) )))) )))) );
              ( "GP_Sloc:machine.adb:660:22" (#"machine.adb" 660 0 0# ()) );
              ( "GP_Sloc:machine.adb:660:19" (#"machine.adb" 660 0 0# (if ((Machine__detectinvalidbehaviour__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:661:22" (#"machine.adb" 661 0 0# ()) );
               ( "GP_Sloc:machine.adb:661:33" (#"machine.adb" 661 0 0# ()) );
               ( "GP_Sloc:machine.adb:661:45" (#"machine.adb" 661 0 0# #"machine.adb" 661 0 0# Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 661 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__if__regssigned_assign__ixdcomp__selectcomp" "GP_Sloc:machine.adb:661:37" "GP_Id:115" "comment:                     RegsSigned(Inst.MulRd) := True;
                                    ^ machine.adb:661:37:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__mulrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))) ((Boolean.of_int(1)))) )) ) )) else (
               ( "GP_Sloc:machine.adb:663:22" (#"machine.adb" 663 0 0# ( #"machine.adb" 663 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
               #"machine.adb" 663 0 0# raise Return__exc )) )))) ) )) else (
              ( "GP_Sloc:machine.adb:666:19" (#"machine.adb" 666 0 0# ( #"machine.adb" 666 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
              #"machine.adb" 666 0 0# raise Return__exc )) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 4)) then (
             ( ( "GP_Sloc:machine.adb:669:19" (#"machine.adb" 669 0 0# ()) );
             ( "GP_Sloc:machine.adb:669:30" (#"machine.adb" 669 0 0# ()) );
             ( "GP_Sloc:machine.adb:669:47" (#"machine.adb" 669 0 0# ()) );
             ( "GP_Sloc:machine.adb:669:58" (#"machine.adb" 669 0 0# ()) );
             ( "GP_Sloc:machine.adb:669:16" (#"machine.adb" 669 0 0# (if ((Boolean.andb((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 669 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" "GP_Sloc:machine.adb:669:34" "GP_Id:124" "comment:               if RegsSigned(Inst.DivRs1) and RegsSigned(Inst.DivRs2) then
                                 ^ machine.adb:669:34:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__divrs1_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))) ((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 669 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" "GP_Sloc:machine.adb:669:62" "GP_Id:125" "comment:               if RegsSigned(Inst.DivRs1) and RegsSigned(Inst.DivRs2) then
                                                             ^ machine.adb:669:62:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__divrs2_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))))) then (
              ( ( "GP_Sloc:machine.adb:670:63" (#"machine.adb" 670 0 0# ()) );
              ( "GP_Sloc:machine.adb:670:19" (#"machine.adb" 670 0 0# ()) );
              ( "GP_Sloc:machine.adb:670:19" (#"machine.adb" 670 0 0# (#"machine.adb" 670 0 0# ( (let machine__detectinvalidbehaviour__L_2__C112b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 670 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:670:19" "GP_Id:118" "comment:                  CheckDiv(Inst.DivRd,Inst.DivRs1,Inst.DivRs2,Ret);
                  ^ machine.adb:670:19:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__C112b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__divrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C112b__assume = Machine__detectinvalidbehaviour__L_2__C112b.c112b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C112b.c112b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:670:19" (#"machine.adb" 670 0 0# (#"machine.adb" 670 0 0# ( (let machine__detectinvalidbehaviour__L_2__C113b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 670 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:670:19" "comment:                  CheckDiv(Inst.DivRd,Inst.DivRs1,Inst.DivRs2,Ret);
                  ^ machine.adb:670:19:VC_DISCRIMINANT_CHECK" "GP_Id:119" "GP_Shape:L_2_while__case__if__C113b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__divrs1_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C113b__assume = Machine__detectinvalidbehaviour__L_2__C113b.c113b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C113b.c113b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:670:19" (#"machine.adb" 670 0 0# (#"machine.adb" 670 0 0# ( (let machine__detectinvalidbehaviour__L_2__C114b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 670 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:670:19" "comment:                  CheckDiv(Inst.DivRd,Inst.DivRs1,Inst.DivRs2,Ret);
                  ^ machine.adb:670:19:VC_DISCRIMINANT_CHECK" "GP_Id:120" "GP_Shape:L_2_while__case__if__C114b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__divrs2_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C114b__assume = Machine__detectinvalidbehaviour__L_2__C114b.c114b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C114b.c114b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:670:19" (#"machine.adb" 670 0 0# ()) );
              ( "GP_Sloc:machine.adb:670:19" (#"machine.adb" 670 0 0# ()) );
              ( "GP_Sloc:machine.adb:509:10:inlined:machine.adb:670:19" (#"machine.adb" 509 0 0# (if (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C114b.c114b)))) <> 0)) then (
               ( "GP_Sloc:machine.adb:510:13:inlined:machine.adb:670:19" (#"machine.adb" 510 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C113b.c113b)))) > ( -2147483648 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C113b.c113b)))) < 2147483647)))) then (
                ( ( "GP_Sloc:machine.adb:511:31:inlined:machine.adb:670:19" (#"machine.adb" 511 0 0# #"machine.adb" 511 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C112b.c112b) ((Machine__dataval__rep.of_rep((#"machine.adb" 511 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:511:50:inlined:machine.adb:670:19" "GP_Shape:L_2_while__case__if__if__if__check_regs_assign__div" "GP_Id:122" "comment:               Check_Regs(Rd) := Check_Regs(Rs1) / Check_Regs(Rs2);
                                                 ^ machine.adb:511:50:inlined:machine.adb:670:19:VC_OVERFLOW_CHECK" (Machine__TdatavalB.range_check_((#"machine.adb" 511 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:machine.adb:511:50:inlined:machine.adb:670:19" "GP_Id:121" "comment:               Check_Regs(Rd) := Check_Regs(Rs1) / Check_Regs(Rs2);
                                                 ^ machine.adb:511:50:inlined:machine.adb:670:19:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__if__if__if__check_regs_assign__div" (Int_Division.div_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C113b.c113b))))) ((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C114b.c114b)))))) )))) )))))) )) );
                ( "GP_Sloc:machine.adb:512:19:inlined:machine.adb:670:19" (#"machine.adb" 512 0 0# #"machine.adb" 512 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:514:20:inlined:machine.adb:670:19" (#"machine.adb" 514 0 0# #"machine.adb" 514 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:517:16:inlined:machine.adb:670:19" (#"machine.adb" 517 0 0# #"machine.adb" 517 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) );
              ( "GP_Sloc:machine.adb:671:22" (#"machine.adb" 671 0 0# ()) );
              ( "GP_Sloc:machine.adb:671:19" (#"machine.adb" 671 0 0# (if ((Machine__detectinvalidbehaviour__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:672:22" (#"machine.adb" 672 0 0# ()) );
               ( "GP_Sloc:machine.adb:672:33" (#"machine.adb" 672 0 0# ()) );
               ( "GP_Sloc:machine.adb:672:45" (#"machine.adb" 672 0 0# #"machine.adb" 672 0 0# Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 672 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__if__regssigned_assign__ixdcomp__selectcomp" "GP_Sloc:machine.adb:672:37" "GP_Id:123" "comment:                     RegsSigned(Inst.DivRd) := True;
                                    ^ machine.adb:672:37:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__divrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))) ((Boolean.of_int(1)))) )) ) )) else (
               ( "GP_Sloc:machine.adb:674:22" (#"machine.adb" 674 0 0# ( #"machine.adb" 674 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
               #"machine.adb" 674 0 0# raise Return__exc )) )))) ) )) else (
              ( "GP_Sloc:machine.adb:677:19" (#"machine.adb" 677 0 0# ( #"machine.adb" 677 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
              #"machine.adb" 677 0 0# raise Return__exc )) )))) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 9)) then (
             ( "GP_Sloc:machine.adb:680:16" (#"machine.adb" 680 0 0# ( #"machine.adb" 680 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
             #"machine.adb" 680 0 0# raise Return__exc )) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 10)) then (
             ( "GP_Sloc:machine.adb:682:16" (#"machine.adb" 682 0 0# ( #"machine.adb" 682 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
             #"machine.adb" 682 0 0# raise Return__exc )) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 0)) then (
             ( "GP_Sloc:machine.adb:684:16" (#"machine.adb" 684 0 0# ( #"machine.adb" 684 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
             #"machine.adb" 684 0 0# raise Return__exc )) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 5)) then (
             ( "GP_Sloc:machine.adb:686:16" (#"machine.adb" 686 0 0# ( #"machine.adb" 686 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(0)) );
             #"machine.adb" 686 0 0# raise Return__exc )) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 8)) then (
             ( "GP_Sloc:machine.adb:688:13" (#"machine.adb" 688 0 0# ( #"machine.adb" 688 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(0)) );
             #"machine.adb" 688 0 0# raise Return__exc )) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })))))) = 6)) then (
             ( ( "GP_Sloc:machine.adb:693:19" (#"machine.adb" 693 0 0# ()) );
             ( "GP_Sloc:machine.adb:693:30" (#"machine.adb" 693 0 0# ()) );
             ( "GP_Sloc:machine.adb:693:16" (#"machine.adb" 693 0 0# (if ((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 693 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:693:34" "GP_Id:140" "comment:               if RegsSigned(Inst.LdrRs) then
                                 ^ machine.adb:693:34:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__ixdcomp__selectcomp" (Instruction__instr.rec__instruction__instr__ldrrs_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))) then (
              ( ( "GP_Sloc:machine.adb:694:63" (#"machine.adb" 694 0 0# ()) );
              ( "GP_Sloc:machine.adb:694:19" (#"machine.adb" 694 0 0# ()) );
              ( "GP_Sloc:machine.adb:694:19" (#"machine.adb" 694 0 0# (#"machine.adb" 694 0 0# ( (let machine__detectinvalidbehaviour__L_2__C124b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 694 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:694:19" "GP_Id:126" "comment:                  CheckLdr(Inst.LdrRd,Inst.LdrRs,Inst.LdrOffs,Ret);
                  ^ machine.adb:694:19:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__C124b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__ldrrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C124b__assume = Machine__detectinvalidbehaviour__L_2__C124b.c124b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C124b.c124b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:694:19" (#"machine.adb" 694 0 0# (#"machine.adb" 694 0 0# ( (let machine__detectinvalidbehaviour__L_2__C125b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 694 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:694:19" "comment:                  CheckLdr(Inst.LdrRd,Inst.LdrRs,Inst.LdrOffs,Ret);
                  ^ machine.adb:694:19:VC_DISCRIMINANT_CHECK" "GP_Id:127" "GP_Shape:L_2_while__case__if__C125b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__ldrrs_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C125b__assume = Machine__detectinvalidbehaviour__L_2__C125b.c125b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C125b.c125b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:694:19" (#"machine.adb" 694 0 0# (#"machine.adb" 694 0 0# ( (let machine__detectinvalidbehaviour__L_2__C126b__assume = (Instruction__offset__rep.to_rep((#"machine.adb" 694 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:694:19" "comment:                  CheckLdr(Inst.LdrRd,Inst.LdrRs,Inst.LdrOffs,Ret);
                  ^ machine.adb:694:19:VC_DISCRIMINANT_CHECK" "GP_Id:128" "GP_Shape:L_2_while__case__if__C126b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__ldroffs_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C126b__assume = Machine__detectinvalidbehaviour__L_2__C126b.c126b) }))
              ;
               assume {  (Instruction__offset___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C126b.c126b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:694:19" (#"machine.adb" 694 0 0# ()) );
              ( "GP_Sloc:machine.adb:694:19" (#"machine.adb" 694 0 0# ( (#"machine.adb" 527 0 0# ( #"machine.adb" 527 0 0# abstract ensures {true}(let _ = () in (
               ()))
               end ;
              #"machine.adb" 527 0 0# assume { #"machine.adb" 527 0 0# (Instruction__addr___axiom.default_initial_assumption Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content False) };
              #"machine.adb" 527 0 0# assume { #"machine.adb" 527 0 0# (Instruction__addr___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content False False True True) } ));
              ( "GP_Sloc:machine.adb:529:10:inlined:machine.adb:694:19" (#"machine.adb" 529 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))) >= ( -65535 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))) <= 0)))) then (
               ( "GP_Sloc:machine.adb:530:13:inlined:machine.adb:694:19" (#"machine.adb" 530 0 0# (if ((Boolean.andb((Machine__detectinvalidbehaviour__L_2__C126b.c126b <= 65535)) ((Machine__detectinvalidbehaviour__L_2__C126b.c126b >= (-((#"machine.adb" 530 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:530:63:inlined:machine.adb:694:19" "GP_Id:138" "comment:            if Offs <= Offset(Addr'Last) and Offs >= - Offset(Check_Regs(Rs)) then
                                                              ^ machine.adb:530:63:inlined:machine.adb:694:19:VC_RANGE_CHECK" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__and__cmp__minus__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))))) )))))))) then (
                ( ( "GP_Sloc:machine.adb:531:18:inlined:machine.adb:694:19" (#"machine.adb" 531 0 0# #"machine.adb" 531 0 0# Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content <- ( (#"machine.adb" 531 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:531:41:inlined:machine.adb:694:19" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__a_assign__typeconv__add" "GP_Id:137" "comment:               A := Addr(Check_Regs(Rs) + DataVal(Offs));
                                        ^ machine.adb:531:41:inlined:machine.adb:694:19:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 531 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:531:41:inlined:machine.adb:694:19" "GP_Id:136" "comment:               A := Addr(Check_Regs(Rs) + DataVal(Offs));
                                        ^ machine.adb:531:41:inlined:machine.adb:694:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))) + Machine__detectinvalidbehaviour__L_2__C126b.c126b))) )))) )) )) );
                ( "GP_Sloc:machine.adb:534:16:inlined:machine.adb:694:19" (#"machine.adb" 534 0 0# (if ((Array__Int__Bool.get(Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content) (Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content))) then (
                 ( ( "GP_Sloc:machine.adb:535:34:inlined:machine.adb:694:19" (#"machine.adb" 535 0 0# #"machine.adb" 535 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C124b.c124b) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_memory.check_memory.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content)))))))) )) );
                 ( "GP_Sloc:machine.adb:536:23:inlined:machine.adb:694:19" (#"machine.adb" 536 0 0# #"machine.adb" 536 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:538:23:inlined:machine.adb:694:19" (#"machine.adb" 538 0 0# #"machine.adb" 538 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) ) )) else (
                ( "GP_Sloc:machine.adb:542:20:inlined:machine.adb:694:19" (#"machine.adb" 542 0 0# #"machine.adb" 542 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:545:13:inlined:machine.adb:694:19" (#"machine.adb" 545 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))) > 0)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))) <= 65535)))) then (
                ( "GP_Sloc:machine.adb:546:16:inlined:machine.adb:694:19" (#"machine.adb" 546 0 0# (if ((Boolean.andb((Machine__detectinvalidbehaviour__L_2__C126b.c126b >= (-((#"machine.adb" 546 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:546:35:inlined:machine.adb:694:19" "GP_Id:134" "comment:               if Offs >= -Offset(Check_Regs(Rs)) and Offs <= Offset(Addr'Last) - Offset(Check_Regs(Rs)) then
                                  ^ machine.adb:546:35:inlined:machine.adb:694:19:VC_RANGE_CHECK" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__if__and__cmp__minus__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))))) )))))) ((Machine__detectinvalidbehaviour__L_2__C126b.c126b <= (65535 - (#"machine.adb" 546 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:546:90:inlined:machine.adb:694:19" "GP_Id:135" "comment:               if Offs >= -Offset(Check_Regs(Rs)) and Offs <= Offset(Addr'Last) - Offset(Check_Regs(Rs)) then
                                                                                         ^ machine.adb:546:90:inlined:machine.adb:694:19:VC_RANGE_CHECK" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__if__and__cmp__sub__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))))) ))))))) then (
                 ( ( "GP_Sloc:machine.adb:547:21:inlined:machine.adb:694:19" (#"machine.adb" 547 0 0# #"machine.adb" 547 0 0# Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content <- ( (#"machine.adb" 547 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:547:44:inlined:machine.adb:694:19" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__if__a_assign__typeconv__add" "GP_Id:133" "comment:                  A := Addr(Check_Regs(Rs) + DataVal(Offs));
                                           ^ machine.adb:547:44:inlined:machine.adb:694:19:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 547 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:547:44:inlined:machine.adb:694:19" "GP_Id:132" "comment:                  A := Addr(Check_Regs(Rs) + DataVal(Offs));
                                           ^ machine.adb:547:44:inlined:machine.adb:694:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))) + Machine__detectinvalidbehaviour__L_2__C126b.c126b))) )))) )) )) );
                 ( "GP_Sloc:machine.adb:550:19:inlined:machine.adb:694:19" (#"machine.adb" 550 0 0# (if ((Array__Int__Bool.get(Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content) (Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content))) then (
                  ( ( "GP_Sloc:machine.adb:551:37:inlined:machine.adb:694:19" (#"machine.adb" 551 0 0# #"machine.adb" 551 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C124b.c124b) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_memory.check_memory.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content)))))))) )) );
                  ( "GP_Sloc:machine.adb:552:26:inlined:machine.adb:694:19" (#"machine.adb" 552 0 0# #"machine.adb" 552 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                  ( "GP_Sloc:machine.adb:554:26:inlined:machine.adb:694:19" (#"machine.adb" 554 0 0# #"machine.adb" 554 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) ) )) else (
                 ( "GP_Sloc:machine.adb:558:23:inlined:machine.adb:694:19" (#"machine.adb" 558 0 0# #"machine.adb" 558 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:561:16:inlined:machine.adb:694:19" (#"machine.adb" 561 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))) > 65535)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))) <= 65535)))) then (
                 ( "GP_Sloc:machine.adb:562:19:inlined:machine.adb:694:19" (#"machine.adb" 562 0 0# (if ((Boolean.andb((Machine__detectinvalidbehaviour__L_2__C126b.c126b >= 0)) ((Machine__detectinvalidbehaviour__L_2__C126b.c126b <= (65535 - (#"machine.adb" 562 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:562:88:inlined:machine.adb:694:19" "GP_Id:131" "comment:                  if Offs >= Offset(Addr'First) and Offs <= Offset(Addr'Last) - Offset(Check_Regs(Rs)) then
                                                                                       ^ machine.adb:562:88:inlined:machine.adb:694:19:VC_RANGE_CHECK" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__if__if__and__cmp__sub__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))))) ))))))) then (
                  ( ( "GP_Sloc:machine.adb:563:24:inlined:machine.adb:694:19" (#"machine.adb" 563 0 0# #"machine.adb" 563 0 0# Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content <- ( (#"machine.adb" 563 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:563:47:inlined:machine.adb:694:19" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__if__if__a_assign__typeconv__add" "GP_Id:130" "comment:                     A := Addr(Check_Regs(Rs) + DataVal(Offs));
                                              ^ machine.adb:563:47:inlined:machine.adb:694:19:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 563 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:563:47:inlined:machine.adb:694:19" "GP_Id:129" "comment:                     A := Addr(Check_Regs(Rs) + DataVal(Offs));
                                              ^ machine.adb:563:47:inlined:machine.adb:694:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__B128b_declblk__if__if__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C125b.c125b)))) + Machine__detectinvalidbehaviour__L_2__C126b.c126b))) )))) )) )) );
                  ( "GP_Sloc:machine.adb:565:22:inlined:machine.adb:694:19" (#"machine.adb" 565 0 0# (if ((Array__Int__Bool.get(Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content) (Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content))) then (
                   ( ( "GP_Sloc:machine.adb:566:40:inlined:machine.adb:694:19" (#"machine.adb" 566 0 0# #"machine.adb" 566 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C124b.c124b) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_memory.check_memory.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__B128b__a.a.int__content)))))))) )) );
                   ( "GP_Sloc:machine.adb:567:29:inlined:machine.adb:694:19" (#"machine.adb" 567 0 0# #"machine.adb" 567 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                   ( "GP_Sloc:machine.adb:569:29:inlined:machine.adb:694:19" (#"machine.adb" 569 0 0# #"machine.adb" 569 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) ) )) else (
                  ( "GP_Sloc:machine.adb:572:26:inlined:machine.adb:694:19" (#"machine.adb" 572 0 0# #"machine.adb" 572 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                 ( "GP_Sloc:machine.adb:575:23:inlined:machine.adb:694:19" (#"machine.adb" 575 0 0# #"machine.adb" 575 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )))) )))) ) )) );
              ( "GP_Sloc:machine.adb:695:22" (#"machine.adb" 695 0 0# ()) );
              ( "GP_Sloc:machine.adb:695:19" (#"machine.adb" 695 0 0# (if ((Machine__detectinvalidbehaviour__ret.ret.int__content = 0)) then (
               ( ( "GP_Sloc:machine.adb:696:22" (#"machine.adb" 696 0 0# ()) );
               ( "GP_Sloc:machine.adb:696:33" (#"machine.adb" 696 0 0# ()) );
               ( "GP_Sloc:machine.adb:696:45" (#"machine.adb" 696 0 0# #"machine.adb" 696 0 0# Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 696 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__if__regssigned_assign__ixdcomp__selectcomp" "GP_Sloc:machine.adb:696:37" "GP_Id:139" "comment:                     RegsSigned(Inst.LdrRd) := True;
                                    ^ machine.adb:696:37:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__ldrrd_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))) ((Boolean.of_int(1)))) )) ) )) else (
               ( "GP_Sloc:machine.adb:698:22" (#"machine.adb" 698 0 0# ( #"machine.adb" 698 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
               #"machine.adb" 698 0 0# raise Return__exc )) )))) ) )) else (
              ( "GP_Sloc:machine.adb:701:19" (#"machine.adb" 701 0 0# ( #"machine.adb" 701 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
              #"machine.adb" 701 0 0# raise Return__exc )) )))) ) )) else (
             ( ( "GP_Sloc:machine.adb:704:16" (#"machine.adb" 704 0 0# ()) );
             ( "GP_Sloc:machine.adb:704:27" (#"machine.adb" 704 0 0# ()) );
             ( "GP_Sloc:machine.adb:704:43" (#"machine.adb" 704 0 0# ()) );
             ( "GP_Sloc:machine.adb:704:54" (#"machine.adb" 704 0 0# ()) );
             ( "GP_Sloc:machine.adb:704:13" (#"machine.adb" 704 0 0# (if ((Boolean.andb((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 704 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" "GP_Sloc:machine.adb:704:31" "GP_Id:154" "comment:            if RegsSigned(Inst.StrRa) and RegsSigned(Inst.StrRb) then
                              ^ machine.adb:704:31:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__strra_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))) ((Array__Int__Bool.get(Machine__detectinvalidbehaviour__regssigned.regssigned.Array__Int__Bool.map__content) ((Instruction__reg__rep.to_rep((#"machine.adb" 704 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__and__ixdcomp__selectcomp" "GP_Sloc:machine.adb:704:58" "GP_Id:155" "comment:            if RegsSigned(Inst.StrRa) and RegsSigned(Inst.StrRb) then
                                                         ^ machine.adb:704:58:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__strrb_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) ))))))))) then (
              ( ( "GP_Sloc:machine.adb:705:60" (#"machine.adb" 705 0 0# ()) );
              ( "GP_Sloc:machine.adb:705:16" (#"machine.adb" 705 0 0# ()) );
              ( "GP_Sloc:machine.adb:705:16" (#"machine.adb" 705 0 0# (#"machine.adb" 705 0 0# ( (let machine__detectinvalidbehaviour__L_2__C131b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 705 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:705:16" "GP_Id:141" "comment:               CheckStr(Inst.StrRa,Inst.StrOffs,Inst.StrRb,Ret);
               ^ machine.adb:705:16:VC_DISCRIMINANT_CHECK" "GP_Shape:L_2_while__case__if__C131b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__strra_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C131b__assume = Machine__detectinvalidbehaviour__L_2__C131b.c131b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C131b.c131b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:705:16" (#"machine.adb" 705 0 0# (#"machine.adb" 705 0 0# ( (let machine__detectinvalidbehaviour__L_2__C132b__assume = (Instruction__offset__rep.to_rep((#"machine.adb" 705 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:705:16" "comment:               CheckStr(Inst.StrRa,Inst.StrOffs,Inst.StrRb,Ret);
               ^ machine.adb:705:16:VC_DISCRIMINANT_CHECK" "GP_Id:142" "GP_Shape:L_2_while__case__if__C132b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__stroffs_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C132b__assume = Machine__detectinvalidbehaviour__L_2__C132b.c132b) }))
              ;
               assume {  (Instruction__offset___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C132b.c132b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:705:16" (#"machine.adb" 705 0 0# (#"machine.adb" 705 0 0# ( (let machine__detectinvalidbehaviour__L_2__C133b__assume = (Instruction__reg__rep.to_rep((#"machine.adb" 705 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:machine.adb:705:16" "comment:               CheckStr(Inst.StrRa,Inst.StrOffs,Inst.StrRb,Ret);
               ^ machine.adb:705:16:VC_DISCRIMINANT_CHECK" "GP_Id:143" "GP_Shape:L_2_while__case__if__C133b_decl__selectcomp" (Instruction__instr.rec__instruction__instr__strrb_({ Instruction__instr.__split_fields = Machine__detectinvalidbehaviour__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Machine__detectinvalidbehaviour__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Machine__detectinvalidbehaviour__inst.inst__attr__constrained })) )))) in (
                assume {  (machine__detectinvalidbehaviour__L_2__C133b__assume = Machine__detectinvalidbehaviour__L_2__C133b.c133b) }))
              ;
               assume {  (Instruction__reg___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__C133b.c133b True False True True) } ))) );
              ( "GP_Sloc:machine.adb:705:16" (#"machine.adb" 705 0 0# ()) );
              ( "GP_Sloc:machine.adb:705:16" (#"machine.adb" 705 0 0# ( (#"machine.adb" 588 0 0# ( #"machine.adb" 588 0 0# abstract ensures {true}(let _ = () in (
               ()))
               end ;
              #"machine.adb" 588 0 0# assume { #"machine.adb" 588 0 0# (Instruction__addr___axiom.default_initial_assumption Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content False) };
              #"machine.adb" 588 0 0# assume { #"machine.adb" 588 0 0# (Instruction__addr___axiom.dynamic_invariant Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content False False True True) } ));
              ( "GP_Sloc:machine.adb:590:10:inlined:machine.adb:705:16" (#"machine.adb" 590 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))) >= ( -65535 ))) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))) <= 0)))) then (
               ( "GP_Sloc:machine.adb:591:13:inlined:machine.adb:705:16" (#"machine.adb" 591 0 0# (if ((Boolean.andb((Machine__detectinvalidbehaviour__L_2__C132b.c132b <= 65535)) ((Machine__detectinvalidbehaviour__L_2__C132b.c132b >= (-((#"machine.adb" 591 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:591:63:inlined:machine.adb:705:16" "GP_Id:153" "comment:            if Offs <= Offset(Addr'Last) and Offs >= - Offset(Check_Regs(Ra)) then
                                                              ^ machine.adb:591:63:inlined:machine.adb:705:16:VC_RANGE_CHECK" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__and__cmp__minus__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))))) )))))))) then (
                ( ( "GP_Sloc:machine.adb:592:18:inlined:machine.adb:705:16" (#"machine.adb" 592 0 0# #"machine.adb" 592 0 0# Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content <- ( (#"machine.adb" 592 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:592:41:inlined:machine.adb:705:16" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__a_assign__typeconv__add" "GP_Id:152" "comment:               A := Addr(Check_Regs(Ra) + DataVal(Offs));
                                        ^ machine.adb:592:41:inlined:machine.adb:705:16:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 592 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:592:41:inlined:machine.adb:705:16" "GP_Id:151" "comment:               A := Addr(Check_Regs(Ra) + DataVal(Offs));
                                        ^ machine.adb:592:41:inlined:machine.adb:705:16:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))) + Machine__detectinvalidbehaviour__L_2__C132b.c132b))) )))) )) )) );
                ( "GP_Sloc:machine.adb:593:31:inlined:machine.adb:705:16" (#"machine.adb" 593 0 0# #"machine.adb" 593 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C133b.c133b) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__memory.memory.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content)))))))) )) );
                ( "GP_Sloc:machine.adb:594:32:inlined:machine.adb:705:16" (#"machine.adb" 594 0 0# #"machine.adb" 594 0 0# Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content) (Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content) ((Boolean.of_int(1)))) )) );
                ( "GP_Sloc:machine.adb:595:20:inlined:machine.adb:705:16" (#"machine.adb" 595 0 0# #"machine.adb" 595 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                ( "GP_Sloc:machine.adb:597:20:inlined:machine.adb:705:16" (#"machine.adb" 597 0 0# #"machine.adb" 597 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
               ( "GP_Sloc:machine.adb:600:13:inlined:machine.adb:705:16" (#"machine.adb" 600 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))) > 0)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))) <= 65535)))) then (
                ( "GP_Sloc:machine.adb:601:16:inlined:machine.adb:705:16" (#"machine.adb" 601 0 0# (if ((Boolean.andb((Machine__detectinvalidbehaviour__L_2__C132b.c132b >= (-((#"machine.adb" 601 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:601:35:inlined:machine.adb:705:16" "GP_Id:149" "comment:               if Offs >= -Offset(Check_Regs(Ra)) and Offs <= Offset(Addr'Last) - Offset(Check_Regs(Ra)) then
                                  ^ machine.adb:601:35:inlined:machine.adb:705:16:VC_RANGE_CHECK" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__if__and__cmp__minus__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))))) )))))) ((Machine__detectinvalidbehaviour__L_2__C132b.c132b <= (65535 - (#"machine.adb" 601 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:601:90:inlined:machine.adb:705:16" "GP_Id:150" "comment:               if Offs >= -Offset(Check_Regs(Ra)) and Offs <= Offset(Addr'Last) - Offset(Check_Regs(Ra)) then
                                                                                         ^ machine.adb:601:90:inlined:machine.adb:705:16:VC_RANGE_CHECK" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__if__and__cmp__sub__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))))) ))))))) then (
                 ( ( "GP_Sloc:machine.adb:602:21:inlined:machine.adb:705:16" (#"machine.adb" 602 0 0# #"machine.adb" 602 0 0# Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content <- ( (#"machine.adb" 602 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:602:44:inlined:machine.adb:705:16" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__if__a_assign__typeconv__add" "GP_Id:148" "comment:                  A := Addr(Check_Regs(Ra) + DataVal(Offs));                 
                                           ^ machine.adb:602:44:inlined:machine.adb:705:16:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 602 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:602:44:inlined:machine.adb:705:16" "GP_Id:147" "comment:                  A := Addr(Check_Regs(Ra) + DataVal(Offs));                 
                                           ^ machine.adb:602:44:inlined:machine.adb:705:16:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))) + Machine__detectinvalidbehaviour__L_2__C132b.c132b))) )))) )) )) );
                 ( "GP_Sloc:machine.adb:603:34:inlined:machine.adb:705:16" (#"machine.adb" 603 0 0# #"machine.adb" 603 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C133b.c133b) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__memory.memory.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content)))))))) )) );
                 ( "GP_Sloc:machine.adb:604:35:inlined:machine.adb:705:16" (#"machine.adb" 604 0 0# #"machine.adb" 604 0 0# Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content) (Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content) ((Boolean.of_int(1)))) )) );
                 ( "GP_Sloc:machine.adb:605:23:inlined:machine.adb:705:16" (#"machine.adb" 605 0 0# #"machine.adb" 605 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                 ( "GP_Sloc:machine.adb:608:23:inlined:machine.adb:705:16" (#"machine.adb" 608 0 0# #"machine.adb" 608 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                ( "GP_Sloc:machine.adb:611:16:inlined:machine.adb:705:16" (#"machine.adb" 611 0 0# (if ((Boolean.andb(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))) > 65535)) (((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))) <= 65535)))) then (
                 ( "GP_Sloc:machine.adb:612:19:inlined:machine.adb:705:16" (#"machine.adb" 612 0 0# (if ((Boolean.andb((Machine__detectinvalidbehaviour__L_2__C132b.c132b >= 0)) ((Machine__detectinvalidbehaviour__L_2__C132b.c132b <= (65535 - (#"machine.adb" 612 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:612:88:inlined:machine.adb:705:16" "GP_Id:146" "comment:                  if Offs >= Offset(Addr'First) and Offs <= Offset(Addr'Last) - Offset(Check_Regs(Ra)) then
                                                                                       ^ machine.adb:612:88:inlined:machine.adb:705:16:VC_RANGE_CHECK" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__if__if__and__cmp__sub__typeconv__ixdcomp" (Instruction__offset.range_check_((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))))) ))))))) then (
                  ( ( "GP_Sloc:machine.adb:613:23:inlined:machine.adb:705:16" (#"machine.adb" 613 0 0# #"machine.adb" 613 0 0# Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content <- ( (#"machine.adb" 613 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:machine.adb:613:46:inlined:machine.adb:705:16" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__if__if__a_assign__typeconv__add" "GP_Id:145" "comment:                    A := Addr(Check_Regs(Ra) + DataVal(Offs));
                                             ^ machine.adb:613:46:inlined:machine.adb:705:16:VC_RANGE_CHECK" (Instruction__addr.range_check_((#"machine.adb" 613 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:613:46:inlined:machine.adb:705:16" "GP_Id:144" "comment:                    A := Addr(Check_Regs(Ra) + DataVal(Offs));
                                             ^ machine.adb:613:46:inlined:machine.adb:705:16:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__case__if__B135b_declblk__if__if__if__if__a_assign__typeconv__add" (Machine__TdatavalB.range_check_(((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C131b.c131b)))) + Machine__detectinvalidbehaviour__L_2__C132b.c132b))) )))) )) )) );
                  ( "GP_Sloc:machine.adb:614:37:inlined:machine.adb:705:16" (#"machine.adb" 614 0 0# #"machine.adb" 614 0 0# Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Machine__detectinvalidbehaviour__memorysigned.memorysigned.Array__Int__Bool.map__content) (Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content) ((Boolean.of_int(1)))) )) );
                  ( "GP_Sloc:machine.adb:615:36:inlined:machine.adb:705:16" (#"machine.adb" 615 0 0# #"machine.adb" 615 0 0# Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content <- ( (Array__Int__Machine__dataval.set(Machine__detectinvalidbehaviour__check_regs.check_regs.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__C133b.c133b) ((Machine__dataval__rep.of_rep((Machine__dataval__rep.to_rep((Array__Int__Machine__dataval.get(Machine__memory.memory.Array__Int__Machine__dataval.map__content) (Machine__detectinvalidbehaviour__L_2__B135b__a.a.int__content)))))))) )) );
                  ( "GP_Sloc:machine.adb:616:25:inlined:machine.adb:705:16" (#"machine.adb" 616 0 0# #"machine.adb" 616 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 0 )) ) )) else (
                  ( "GP_Sloc:machine.adb:618:26:inlined:machine.adb:705:16" (#"machine.adb" 618 0 0# #"machine.adb" 618 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )) else (
                 ( "GP_Sloc:machine.adb:621:23:inlined:machine.adb:705:16" (#"machine.adb" 621 0 0# #"machine.adb" 621 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 2 )) )))) )))) )))) ) )) );
              ( "GP_Sloc:machine.adb:706:19" (#"machine.adb" 706 0 0# ()) );
              ( "GP_Sloc:machine.adb:706:16" (#"machine.adb" 706 0 0# (if ((Machine__detectinvalidbehaviour__ret.ret.int__content = 2)) then (
               ( "GP_Sloc:machine.adb:707:19" (#"machine.adb" 707 0 0# ( #"machine.adb" 707 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
               #"machine.adb" 707 0 0# raise Return__exc )) )) else (
               ()))) ) )) else (
              ()))) ) )))) );
            ( "GP_Sloc:machine.adb:712:10" (#"machine.adb" 712 0 0# ()) );
            ( "GP_Sloc:machine.adb:712:24" (#"machine.adb" 712 0 0# ()) );
            ( "GP_Sloc:machine.adb:712:21" (#"machine.adb" 712 0 0# #"machine.adb" 712 0 0# Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content <- ( (#"machine.adb" 712 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:machine.adb:712:35" "GP_Id:156" "comment:         CycleCount := CycleCount + 1;   
                                  ^ machine.adb:712:35:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__cyclecount_assign__add" (Standard__integer.range_check_((Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content + 1))) )) )) );
            () (* Check for the exit condition and loop statements appearing before the loop invariant of loop machine.adb:630 *)
            ;
            (if (not ( (Boolean.andb((Machine__detectinvalidbehaviour__cyclecount.cyclecount.int__content < Machine__detectinvalidbehaviour__cycles.cycles)) ((Machine__detectinvalidbehaviour__ret.ret.int__content = 0))) )) then (
              raise Machine__detectinvalidbehaviour__L_2.L_2)) )
           done )))
           )))
          )))
         )))
        )))
       )))
      )
    with
     Machine__detectinvalidbehaviour__L_2.L_2 -> ()
    end)) )) );
   ( "GP_Sloc:machine.adb:714:10" (#"machine.adb" 714 0 0# ()) );
   ( "GP_Sloc:machine.adb:714:7" (#"machine.adb" 714 0 0# (if ((Machine__detectinvalidbehaviour__ret.ret.int__content = 0)) then (
    ( ( "GP_Sloc:machine.adb:715:10" (#"machine.adb" 715 0 0# ()) );
    ( "GP_Sloc:machine.adb:715:14" (#"machine.adb" 715 0 0# #"machine.adb" 715 0 0# Machine__detectinvalidbehaviour__ret.ret.int__content <- ( 1 )) );
    ( "GP_Sloc:machine.adb:716:10" (#"machine.adb" 716 0 0# ( #"machine.adb" 716 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(1)) );
    #"machine.adb" 716 0 0# raise Return__exc )) ) )) else (
    ( "GP_Sloc:machine.adb:718:10" (#"machine.adb" 718 0 0# ( #"machine.adb" 718 0 0# machine__detectinvalidbehaviour__result.bool__content <- ( (Boolean.of_int(0)) );
    #"machine.adb" 718 0 0# raise Return__exc )) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  machine__detectinvalidbehaviour__result.bool__content )
end
